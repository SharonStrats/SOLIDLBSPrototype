{"version":3,"file":"Types.js","sourceRoot":"","sources":["../../../lib/core/Types.ts"],"names":[],"mappings":";;AAAA,yCAAgC;AAahC;;;;;GAKG;AACH,SAAgB,QAAQ,CAAC,IAAiC;IACxD,OAAO,eAAG,CAAC,IAAI,CAAC,CAAC;AACnB,CAAC;AAFD,4BAEC","sourcesContent":["import { Map } from 'immutable';\nimport * as RDF from 'rdf-js';\nimport { Algebra as Alg } from 'sparqlalgebrajs';\n\n/**\n * An immutable solution mapping object.\n * This maps variables to a terms.\n *\n * Variables are represented as strings containing the variable name (without '?').\n * Terms are named nodes, literals or the default graph.\n */\nexport type Bindings = Map<string, RDF.Term>;\n\n/**\n * A convenience constructor for bindings based on a given hash.\n * @param {{[p: string]: RDF.Term}} hash A hash that maps variable names to terms.\n * @return {Bindings} The immutable bindings from the hash.\n * @constructor\n */\nexport function Bindings(hash: { [key: string]: RDF.Term }): Bindings {\n  return Map(hash);\n}\n\n// TODO: Document\nexport type AsyncLookUp = (expr: Alg.ExistenceExpression) => Promise<boolean>;\n\nexport interface AsyncAggregator {\n  count(exp: Alg.Expression): Promise<number>;\n  sum(exp: Alg.Expression): Promise<number>;\n  min(exp: Alg.Expression): Promise<number>;\n  max(exp: Alg.Expression): Promise<number>;\n  avg(exp: Alg.Expression): Promise<number>;\n  groupConcat(exp: Alg.Expression): Promise<string>;\n  sample(exp: Alg.Expression): Promise<RDF.Term>;\n}\n"]}