import { Map } from 'immutable';
import * as C from '../../util/Consts';
import * as E from './../Expressions';
import { ArgumentType, OverloadMap, SpecialFunctionAsync } from './Types';
export declare type FuncDefinition = SimpleDefinition | OverloadedDefinition | SpecialDefinition;
export interface DefinitionProps {
    arity: number | number[];
    category: C.OperatorCategory;
}
export declare type SimpleDefinition = DefinitionProps & {
    arity: number;
    category: 'simple';
    types: ArgumentType[];
    apply(args: E.TermExpression[]): E.TermExpression;
};
export declare type OverloadedDefinition = DefinitionProps & {
    arity: number | number[];
    category: 'overloaded';
    overloads: OverloadMap;
};
export declare type SpecialDefinition = DefinitionProps & {
    arity: number;
    category: 'special';
    constructor: new () => SpecialFunctionAsync;
};
export declare const definitions: Map<C.Operator, FuncDefinition>;
