"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
const Helpers_1 = require("./Helpers");
const Special = require("./SpecialFunctions");
const X = require("./XPath");
const Consts_1 = require("../../util/Consts");
const Errors_1 = require("../../util/Errors");
const Helpers_2 = require("./Helpers");
// ----------------------------------------------------------------------------
// Operator Mapping
// https://www.w3.org/TR/sparql11-query/#OperatorMapping
// ----------------------------------------------------------------------------
const not = {
    arity: 1,
    overloads: Helpers_1.simple(['term'], () => { throw new Errors_1.UnimplementedError('! operator'); }),
};
const unaryPlus = {
    arity: 1,
    overloads: Helpers_1.simple(['term'], () => { throw new Errors_1.UnimplementedError('Unary plus operator'); }),
};
const unaryMinus = {
    arity: 1,
    overloads: Helpers_1.simple(['term'], () => { throw new Errors_1.UnimplementedError('Unary minus operator'); }),
};
const multiplication = {
    arity: 2,
    overloads: Helpers_2.arithmetic(X.numericMultiply),
};
const division = {
    arity: 2,
    overloads: Helpers_2.arithmetic(X.numericDivide).set(Helpers_2.list('integer', 'integer'), (args) => {
        if (args[1].typedValue === 0) {
            throw new Errors_1.ExpressionError('Integer division by 0');
        }
        return Helpers_2.number(Helpers_2.binary(X.numericDivide, args), Consts_1.TypeURL.XSD_DECIMAL);
    }),
};
const addition = {
    arity: 2,
    overloads: Helpers_2.arithmetic(X.numericAdd),
};
const subtraction = {
    arity: 2,
    overloads: Helpers_2.arithmetic(X.numericSubtract),
};
const equality = {
    arity: 2,
    overloads: Helpers_2.xPathTest(X.numericEqual, (left, right) => X.numericEqual(X.compare(left, right), 0), X.booleanEqual, X.dateTimeEqual).set(Helpers_2.list('term', 'term'), (args) => {
        return Helpers_2.bool(Special.RDFTermEqual(args[0], args[1]));
    }),
};
const inequality = {
    arity: 2,
    overloads: Helpers_2.xPathTest((left, right) => !X.numericEqual(left, right), (left, right) => !X.numericEqual(X.compare(left, right), 0), (left, right) => !X.booleanEqual(left, right), (left, right) => !X.dateTimeEqual(left, right)),
};
const lesserThan = {
    arity: 2,
    overloads: Helpers_2.xPathTest(X.numericLessThan, (left, right) => X.numericEqual(X.compare(left, right), -1), X.booleanLessThan, X.dateTimeLessThan),
};
const greaterThan = {
    arity: 2,
    overloads: Helpers_2.xPathTest(X.numericGreaterThan, (left, right) => X.numericEqual(X.compare(left, right), 1), X.booleanGreaterThan, X.dateTimeGreaterThan),
};
const lesserThanEqual = {
    arity: 2,
    overloads: Helpers_2.xPathTest((left, right) => X.numericLessThan(left, right) || X.numericEqual(left, right), (left, right) => !X.numericEqual(X.compare(left, right), 1), (left, right) => !X.booleanGreaterThan(left, right), (left, right) => !X.dateTimeGreaterThan(left, right)),
};
const greaterThanEqual = {
    arity: 2,
    overloads: Helpers_2.xPathTest((left, right) => X.numericGreaterThan(left, right) || X.numericEqual(left, right), (left, right) => !X.numericEqual(X.compare(left, right), -1), (left, right) => !X.booleanLessThan(left, right), (left, right) => !X.dateTimeLessThan(left, right)),
};
// ----------------------------------------------------------------------------
// Functions on RDF Terms
// https://www.w3.org/TR/sparql11-query/#func-rdfTerms
// ----------------------------------------------------------------------------
const strTerm = {
    arity: 1,
    overloads: Helpers_1.simple(['term'], (args) => Helpers_1.str(args[0].str())),
};
const lang = {
    arity: 1,
    overloads: Helpers_1.simple(['literal'], (args) => Helpers_1.str(args[0].language || '')),
};
const datatype = {
    arity: 1,
    overloads: Helpers_1.simple(['literal'], 
    // tslint:disable-next-line:no-any
    (args) => {
        const arg = args[0];
        return Helpers_1.str((arg.typeURL) ? arg.typeURL.value : '');
    }),
};
// ----------------------------------------------------------------------------
// Functions on strings
// https://www.w3.org/TR/sparql11-query/#func-forms
// ----------------------------------------------------------------------------
const strlen = {
    arity: 1,
    overloads: Helpers_1.forAll([['string'], ['langString']], (args) => Helpers_2.number(Helpers_1.unary(X.stringLength, args), Consts_1.TypeURL.XSD_INTEGER)),
};
const langmatches = {
    arity: 2,
    overloads: Helpers_1.simple(['string', 'string'], (args) => Helpers_2.bool(Helpers_2.binary(X.langMatches, args))),
};
const regex = {
    arity: [2, 3],
    // // TODO: This deviates from the spec, as the second and third argument should be simple literals
    overloads: Helpers_1.forAll([
        ['string', 'string'],
        ['langString', 'string'],
        ['string', 'string', 'string'],
        ['langString', 'string', 'string'],
    ], (args) => Helpers_2.bool(X.matches(args[0].typedValue, args[1].typedValue, ((args[2]) ? args[2].typedValue : '')))),
};
// ----------------------------------------------------------------------------
// Functions on numerics
// https://www.w3.org/TR/sparql11-query/#func-numerics
// ----------------------------------------------------------------------------
const abs = {
    arity: 1,
    overloads: Helpers_1.forAll([['term']], () => { throw new Errors_1.UnimplementedError('abs'); }),
};
// ----------------------------------------------------------------------------
// Functions on Dates and Times
// https://www.w3.org/TR/sparql11-query/#func-date-time
// ----------------------------------------------------------------------------
const now = {
    arity: 0,
    overloads: Helpers_1.simple(['term'], () => { throw new Errors_1.UnimplementedError('now function'); }),
};
// ----------------------------------------------------------------------------
// Hash functions
// https://www.w3.org/TR/sparql11-query/#func-hash
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// XPath Constructor functions
// https://www.w3.org/TR/sparql11-query/#FunctionMapping
// ----------------------------------------------------------------------------
// TODO Maybe split in definitions for overloaded and async functions.
const _definitions = {
    // --------------------------------------------------------------------------
    // Operator Mapping
    // https://www.w3.org/TR/sparql11-query/#OperatorMapping
    // --------------------------------------------------------------------------
    '!': not,
    'UPLUS': unaryPlus,
    'UMINUS': unaryMinus,
    '*': multiplication,
    '/': division,
    '+': addition,
    '-': subtraction,
    '=': equality,
    '!=': inequality,
    '<': lesserThan,
    '>': greaterThan,
    '<=': lesserThanEqual,
    '>=': greaterThanEqual,
    // --------------------------------------------------------------------------
    // Functions on RDF Terms
    // https://www.w3.org/TR/sparql11-query/#func-rdfTerms
    // --------------------------------------------------------------------------
    'str': strTerm,
    'lang': lang,
    'datatype': datatype,
    // --------------------------------------------------------------------------
    // Functions on strings
    // https://www.w3.org/TR/sparql11-query/#func-forms
    // --------------------------------------------------------------------------
    'strlen': strlen,
    'langmatches': langmatches,
    'regex': regex,
    // --------------------------------------------------------------------------
    // Functions on numerics
    // https://www.w3.org/TR/sparql11-query/#func-numerics
    // --------------------------------------------------------------------------
    'abs': abs,
    // --------------------------------------------------------------------------
    // Functions on Dates and Times
    // https://www.w3.org/TR/sparql11-query/#func-date-time
    // --------------------------------------------------------------------------
    'now': now,
};
const _specialDefinitions = {
    // --------------------------------------------------------------------------
    // Functional Forms
    // https://www.w3.org/TR/sparql11-query/#func-forms
    // --------------------------------------------------------------------------
    'bound': {
        arity: 1,
        constructor: Special.Bound,
    },
    'if': {
        arity: 3,
        constructor: Special.If,
    },
    'coalesce': {
        arity: Infinity,
        constructor: Special.Coalesce,
    },
    '&&': {
        arity: 2,
        constructor: Special.LogicalAndAsync,
    },
    '||': {
        arity: 2,
        constructor: Special.LogicalOrAsync,
    },
    'sameterm': {
        arity: 2,
        constructor: Special.SameTerm,
    },
    'in': {
        arity: Infinity,
        constructor: Special.In,
    },
    'notin': {
        arity: Infinity,
        constructor: Special.NotIn,
    },
};
exports.definitions = immutable_1.Map(_definitions);
exports.specialDefinitions = immutable_1.Map(_specialDefinitions);
//# sourceMappingURL=DefinitionsV2.js.map