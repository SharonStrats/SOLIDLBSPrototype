import * as Promise from 'bluebird';
import * as C from '../../util/Consts';
import * as E from '../Expressions';
import { Bindings } from '../Types';
import { SpecialFunctionAsync } from './Types';
export declare type AsyncTerm = Promise<E.TermExpression>;
export declare type Evaluator = (expr: E.Expression, mapping: Bindings) => AsyncTerm;
export declare class Bound extends SpecialFunctionAsync {
    operator: C.Operator;
    apply(args: E.Expression[], mapping: Bindings, evaluate: Evaluator): AsyncTerm;
}
export declare class If extends SpecialFunctionAsync {
    operator: C.Operator;
    apply(args: E.Expression[], mapping: Bindings, evaluate: Evaluator): AsyncTerm;
}
export declare class Coalesce extends SpecialFunctionAsync {
    operator: C.Operator;
    apply(args: E.Expression[], mapping: Bindings, evaluate: Evaluator): AsyncTerm;
}
export declare class LogicalOrAsync extends SpecialFunctionAsync {
    operator: C.Operator;
    apply(args: E.Expression[], mapping: Bindings, evaluate: Evaluator): AsyncTerm;
}
export declare class LogicalAndAsync extends SpecialFunctionAsync {
    operator: C.Operator;
    apply(args: E.Expression[], mapping: Bindings, evaluate: Evaluator): AsyncTerm;
}
export declare function RDFTermEqual(_left: E.TermExpression, _right: E.TermExpression): boolean;
export declare function sameTerm(left: E.TermExpression, right: E.TermExpression): boolean;
export declare class In extends SpecialFunctionAsync {
    operator: C.Operator;
    apply(args: E.Expression[], mapping: Bindings, evaluate: Evaluator): AsyncTerm;
}
export declare class NotIn extends SpecialFunctionAsync {
    operator: C.Operator;
    apply(args: E.Expression[], mapping: Bindings, evaluate: Evaluator): AsyncTerm;
}
