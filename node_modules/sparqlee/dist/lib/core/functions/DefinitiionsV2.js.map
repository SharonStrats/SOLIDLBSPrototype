{"version":3,"file":"DefinitiionsV2.js","sourceRoot":"","sources":["../../../../lib/core/functions/DefinitiionsV2.ts"],"names":[],"mappings":";;AAAA,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACjB,KAAK,EAAE,CAAC,MAAM,CAAC;QACf,KAAK,CAAC,CAAC,GAAG,CAAqB;YAC7B,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;QACjB,CAAC;KACF,CAAC,CAAC,CAAC;AAGJ,SAAS,OAAO,CAAC,CAAC,IAAI,EAAE,OAAO,CAAuC;IACpE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;QACvB,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;QAC3B,KAAK,EAAE,OAAO;KACf,CAAC,CAAC,CAAC;AASS,QAAA,GAAG,GAAG;IACjB,KAAK,EAAE,IAAI;IACX,OAAO,EAAE,KAAK;CACf,CAAC","sourcesContent":["const str1 = f(1, [{\n  types: ['term'],\n  apply([arg]: [E.TermExpression]) {\n    str(arg.str());\n  },\n}]);\n\n\nfunction _regex2([text, pattern]: [E.Literal<string>, E.StringLiteral]) {\n  bool(X.matches(text.typedValue, pattern.typedValue));\n}\n\nconst regex = f([2, 3], [{\n  types: ['string', 'string'],\n  apply: _regex2,\n}]);\n\nexport interface Definition {\n  arity: number | number[];\n  overloads: OverloadMap;\n}\n\nfunction f(arity: number, )\n\nexport const def = {\n  'str': str1,\n  'regex': regex,\n};\n"]}