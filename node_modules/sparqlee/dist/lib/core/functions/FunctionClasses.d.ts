import { List, Map } from 'immutable';
import * as C from '../../util/Consts';
import * as E from '../Expressions';
import { SPARQLFunction } from './index';
declare type Term = E.TermExpression;
export declare abstract class FunctionClass<Operator, Definition, Application extends E.Application> implements SPARQLFunction<Application> {
    operator: Operator;
    private definition;
    abstract arity: number | number[];
    abstract apply: Application;
    constructor(operator: Operator, definition: Definition);
}
export declare type OverloadMap = Map<List<ArgumentType>, E.SimpleApplication>;
export declare type ArgumentType = 'term' | E.TermType | C.Type;
export declare type OverloadedDefinition = {
    arity: number | number[];
    overloads: OverloadMap;
};
export declare abstract class OverloadedFunction<Operator> extends FunctionClass<Operator, OverloadedDefinition, E.SimpleApplication> {
    arity: number | number[];
    private overloads;
    constructor(op: Operator, definition: OverloadedDefinition);
    /**
     * A function application works by monomorphing the function to a specific
     * instance depending on the runtime types. We then just apply this function
     * to the args.
     */
    apply: (args: E.TermExpression[]) => E.TermExpression;
    protected abstract handleInvalidTypes(args: Term[]): never;
    /**
     * We monomorph by checking the map of overloads for keys corresponding
     * to the runtime types. We start by checking for an implementation for the
     * most concrete types (integer, string, date, IRI), if we find none,
     * we consider their term types (literal, blank, IRI), and lastly we consider
     * all arguments as generic terms.
     *
     * Another option would be to populate the overloads with an implementation
     * for every concrete type when the function is generic over termtypes or
     * terms.
     */
    private monomorph;
}
/**
 * Varying kinds of functions take arguments of different types on which the
 * specific behaviour is dependant. Although their behaviour is often varying,
 * it is always relatively simple, and better suited for synced behaviour.
 * The types of their arguments are always terms, but might differ in
 * their term-type (eg: iri, literal),
 * their specific literal type (eg: string, integer),
 * their arity (see BNODE),
 * or even their specific numeric type (eg: integer, float).
 *
 * Examples include:
 *  - Arithmetic operations such as: *, -, /, +
 *  - Bool operators such as: =, !=, <=, <, ...
 *  - Functions such as: str, IRI
 *
 * See also: https://www.w3.org/TR/sparql11-query/#func-rdfTerms
 * and https://www.w3.org/TR/sparql11-query/#OperatorMapping
 */
export declare class RegularFunction extends OverloadedFunction<C.RegularOperator> {
    functionClass: 'regular';
    constructor(op: C.RegularOperator, definition: OverloadedDefinition);
    handleInvalidTypes(args: Term[]): never;
}
export declare class NamedFunction extends OverloadedFunction<C.NamedOperator> {
    functionClass: 'named';
    constructor(op: C.NamedOperator, definition: OverloadedDefinition);
    handleInvalidTypes(args: Term[]): never;
}
export declare class SpecialFunctionAsync implements SPARQLFunction<E.SpecialApplication> {
    operator: C.SpecialOperator;
    functionClass: 'special';
    arity: number;
    apply: E.SpecialApplication;
    constructor(operator: C.SpecialOperator, definition: SpecialDefinition);
}
export declare type SpecialDefinition = {
    arity: number;
    apply: E.SpecialApplication;
};
export {};
