{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/core/functions/index.ts"],"names":[],"mappings":";;;AAKA,uDAI2B;AAC3B,qDAAoD;AACpD,yDAAiD;AACjD,mEAA6D;AAE7D,4DAAkC;AAQrB,QAAA,gBAAgB,GAC3B,8BAAW;KACR,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,iCAAe,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;KAC9C,KAAK,EAAE,CAAC;AAGA,QAAA,gBAAgB,GAC3B,0CAAkB;KACf,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,sCAAoB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;KACnD,KAAK,EAAE,CAAC;AAGA,QAAA,SAAS,GACnB,wBAAgC;KAC9B,KAAK,CAAC,wBAAgB,CAAC,CAAC;AAGhB,QAAA,cAAc,GACzB,iCAAgB;KACb,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,+BAAa,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;KAC5C,KAAK,EAAE,CAAC","sourcesContent":["import { Map } from 'immutable';\n\nimport * as C from '../../util/Consts';\nimport * as E from '../Expressions';\n\nimport {\n  NamedFunction,\n  RegularFunction,\n  SpecialFunctionAsync,\n} from './FunctionClasses';\nimport { namedDefinitions } from './NamedFunctions';\nimport { definitions } from './RegularFunctions';\nimport { specialDefinitions } from './SpecialFunctionsAsync';\n\nexport * from './FunctionClasses';\n\nexport interface SPARQLFunction<Apply extends E.Application> {\n  arity: number | number[];\n  apply: Apply;\n}\n\nexport type RegularFunctionMap = Map<C.RegularOperator, RegularFunction>;\nexport const regularFunctions: RegularFunctionMap =\n  definitions\n    .map((def, op) => new RegularFunction(op, def))\n    .toMap();\n\nexport type SpecialFunctionAsyncMap = Map<C.SpecialOperator, SpecialFunctionAsync>;\nexport const specialFunctions: SpecialFunctionAsyncMap =\n  specialDefinitions\n    .map((def, op) => new SpecialFunctionAsync(op, def))\n    .toMap();\n\nexport type FunctionMap = Map<C.Operator, SPARQLFunction<E.Application>>;\nexport const functions: FunctionMap =\n  (specialFunctions as FunctionMap)\n    .merge(regularFunctions);\n\nexport type NamedFunctionMap = Map<C.NamedOperator, NamedFunction>;\nexport const namedFunctions: NamedFunctionMap =\n  namedDefinitions\n    .map((def, op) => new NamedFunction(op, def))\n    .toMap();\n"]}