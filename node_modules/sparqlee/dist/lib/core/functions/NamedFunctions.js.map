{"version":3,"file":"NamedFunctions.js","sourceRoot":"","sources":["../../../../lib/core/functions/NamedFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Map } from 'immutable';\n\nimport * as C from '../../util/Consts';\nimport * as Err from '../../util/Errors';\nimport * as E from '../Expressions';\n\nimport { TypeURL as Type } from '../../util/Consts';\nimport { parseXSDDecimal, parseXSDFloat, parseXSDInteger } from '../../util/Parsing';\n\nimport { OverloadMap } from './FunctionClasses';\nimport { bool, dateTime, declare, number, string } from './Helpers';\n\ntype Term = E.TermExpression;\n\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Begin definitions.\n\n// ----------------------------------------------------------------------------\n// XPath Constructor functions\n// https://www.w3.org/TR/sparql11-query/#FunctionMapping\n// ----------------------------------------------------------------------------\n\nconst toString = {\n  arity: 1,\n  overloads: declare()\n    .onTerm1((term) => string(term.str()))\n    .collect(),\n};\n\nconst toFloat = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => number(val.typedValue))\n    .setLitUnary('boolean', (val: boolean) => number(val ? 1 : 0))\n    .setUnary('string', (val: E.StringLiteral) => {\n      const result = parseXSDFloat(val.str());\n      if (!result) { throw new Err.CastError(val, Type.XSD_FLOAT); }\n      return number(result);\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .collect(),\n};\n\nconst toDouble = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => number(val.typedValue, Type.XSD_DOUBLE))\n    .setLitUnary('boolean', (val: boolean) => number(val ? 1 : 0, Type.XSD_DOUBLE))\n    .setUnary('string', (val: E.Term) => {\n      const result = parseXSDFloat(val.str());\n      if (!result) { throw new Err.CastError(val, Type.XSD_DOUBLE); }\n      return number(result, Type.XSD_DOUBLE);\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .collect(),\n};\n\nconst toDecimal = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.Term) => {\n      const result = parseXSDDecimal(val.str());\n      if (!result) { throw new Err.CastError(val, Type.XSD_DECIMAL); }\n      return number(result, Type.XSD_DECIMAL);\n    })\n    .copy({ from: ['integer'], to: ['string'] })\n    .copy({ from: ['integer'], to: ['nonlexical'] })\n    .setLitUnary('boolean', (val: boolean) => number(val ? 1 : 0, Type.XSD_DECIMAL))\n    .collect(),\n};\n\nconst toInteger = {\n  arity: 1,\n  overloads: declare()\n    .setLitUnary('boolean', (val: boolean) => number(val ? 1 : 0, Type.XSD_INTEGER))\n    .onNumeric1((val: E.Term) => {\n      const result = parseXSDInteger(val.str());\n      if (!result) { throw new Err.CastError(val, Type.XSD_INTEGER); }\n      return number(result, Type.XSD_INTEGER);\n    })\n    .copy({ from: ['integer'], to: ['string'] })\n    .copy({ from: ['integer'], to: ['nonlexical'] })\n    .collect(),\n};\n\nconst toDatetime = {\n  arity: 1,\n  overloads: declare()\n    .setUnary('date', (val: E.DateTimeLiteral) => val)\n    .setUnary('string', (val: Term) => {\n      const date = new Date(val.str());\n      if (isNaN(date.getTime())) {\n        throw new Err.CastError(val, Type.XSD_DATE_TIME);\n      }\n      return dateTime(date, val.str());\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .collect(),\n};\n\nconst toBoolean = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => bool(val.coerceEBV()))\n    .setUnary('boolean', (val: Term) => val)\n    .setUnary('string', (val: Term) => {\n      const str = val.str();\n      if (str !== 'true' && str !== 'false') {\n        throw new Err.CastError(val, Type.XSD_BOOLEAN);\n      }\n      return bool((str === 'true'));\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .collect(),\n};\n\n// End definitions.\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n\nconst _definitions: { [key in C.NamedOperator]: Definition } = {\n  // --------------------------------------------------------------------------\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // --------------------------------------------------------------------------\n  [Type.XSD_STRING]: toString,\n  [Type.XSD_FLOAT]: toFloat,\n  [Type.XSD_DOUBLE]: toDouble,\n  [Type.XSD_DECIMAL]: toDecimal,\n  [Type.XSD_INTEGER]: toInteger,\n  [Type.XSD_DATE_TIME]: toDatetime,\n  [Type.XSD_BOOLEAN]: toBoolean,\n};\n\n// ----------------------------------------------------------------------------\n// The definitions and functionality for all operators\n// ----------------------------------------------------------------------------\n\nexport interface Definition {\n  arity: number | number[];\n  overloads: OverloadMap;\n}\n\nexport const namedDefinitions = Map<C.NamedOperator, Definition>(_definitions);\n"]}