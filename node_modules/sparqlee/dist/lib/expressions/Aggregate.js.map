{"version":3,"file":"Aggregate.js","sourceRoot":"","sources":["../../../lib/expressions/Aggregate.ts"],"names":[],"mappings":";;AAIA,+CAGuB;AAEvB,MAAa,SAAS;IAGpB,YACS,IAAY,EACZ,UAAyB,EACzB,UAAmC;QAFnC,SAAI,GAAJ,IAAI,CAAQ;QACZ,eAAU,GAAV,UAAU,CAAe;QACzB,eAAU,GAAV,UAAU,CAAyB;QAL5C,mBAAc,GAA6B,4BAAc,CAAC,SAAS,CAAC;IAMhE,CAAC;IAEL,SAAS;QACP,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;CACF;AAZD,8BAYC","sourcesContent":["import * as RDF from 'rdf-js';\nimport { Algebra as Alg } from 'sparqlalgebrajs';\n\nimport { AggregateHook } from './../Types';\nimport {\n  AggregateExpression,\n  ExpressionType,\n} from './Expressions';\n\nexport class Aggregate implements AggregateExpression {\n  expressionType: ExpressionType.Aggregate = ExpressionType.Aggregate;\n\n  constructor(\n    public name: string,\n    public aggregator: AggregateHook,\n    public expression: Alg.AggregateExpression,\n  ) { }\n\n  aggregate(): Promise<RDF.Term> {\n    return this.aggregator(this.expression);\n  }\n}\n"]}