import * as Promise from 'bluebird';
import * as RDF from 'rdf-js';
import { Algebra as Alg } from 'sparqlalgebrajs';
import * as E from '../core/Expressions';
import { AsyncAggregator, AsyncLookUp, Bindings } from '../core/Types';
export declare class AsyncEvaluator {
    lookup?: AsyncLookUp;
    aggregator?: AsyncAggregator;
    private _expr;
    constructor(expr: Alg.Expression, lookup?: AsyncLookUp, aggregator?: AsyncAggregator);
    evaluate(mapping: Bindings): Promise<RDF.Term>;
    evaluateAsEBV(mapping: Bindings): Promise<boolean>;
    evaluateAsInternal(mapping: Bindings): Promise<E.TermExpression>;
    private _eval;
    private _evalVar;
    private _evalOp;
}
