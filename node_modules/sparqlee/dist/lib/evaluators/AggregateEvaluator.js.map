{"version":3,"file":"AggregateEvaluator.js","sourceRoot":"","sources":["../../../lib/evaluators/AggregateEvaluator.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:object-literal-sort-keys\n// tslint:disable:max-classes-per-file\n\nimport * as RDFDM from '@rdfjs/data-model';\nimport * as RDF from 'rdf-js';\n\nimport { Algebra } from 'sparqlalgebrajs';\n\nimport * as E from '../expressions';\nimport * as C from '../util/Consts';\nimport * as Err from '../util/Errors';\n\nimport { regularFunctions } from '../functions';\nimport { number, string } from '../functions/Helpers';\nimport { Bindings } from '../Types';\nimport { parseXSDFloat } from '../util/Parsing';\nimport { SetFunction, TypeURL } from './../util/Consts';\nimport { SimpleEvaluator } from './SimpleEvaluator';\n\n// TODO: Support hooks\nexport class AggregateEvaluator {\n  private expression: Algebra.AggregateExpression;\n  private aggregator: BaseAggregator<any>;\n  private evaluator: SimpleEvaluator;\n  private throwError = false;\n  private state: any;\n\n  constructor(expr: Algebra.AggregateExpression, start?: Bindings, throwError?: boolean) {\n    this.expression = expr;\n    this.evaluator = new SimpleEvaluator(expr.expression);\n    this.aggregator = new aggregators[expr.aggregator as SetFunction](expr);\n    this.throwError = throwError;\n    try {\n      const startTerm = this.evaluator.evaluate(start);\n      this.state = this.aggregator.init(startTerm);\n    } catch (err) {\n      if (throwError) {\n        throw err;\n      } else {\n        this.put = () => { return; };\n        this.result = () => undefined;\n      }\n    }\n  }\n\n  /**\n   * The spec says to throw an error when a set function is called on an empty\n   * set (unless explicitly mentioned otherwise like COUNT).\n   * However, aggregate error handling says to not bind the result in case of an\n   * error. So to simplify logic in the caller, we return undefined by default.\n   *\n   * @param throwError wether this function should respect the spec and throw an error if no empty value is defined\n   */\n  static emptyValue(expr: Algebra.AggregateExpression, throwError = false): RDF.Term {\n    if (throwError) {\n      throw new Err.EmptyAggregateError();\n    } else {\n      return aggregators[expr.aggregator as SetFunction].emptyValue();\n    }\n  }\n\n  /**\n   * Put a binding from the result stream in the aggregate state.\n   *\n   * If any binding evaluation errors, the corresponding aggregate variable should be unbound.\n   * If this happens, calling @see result() will return @constant undefined\n   * @param bindings the bindings to pass tho the expression\n   */\n  put(bindings: Bindings): void {\n    try {\n      const term = this.evaluator.evaluate(bindings);\n      this.state = this.aggregator.put(this.state, term);\n    } catch (err) {\n      if (this.throwError) {\n        throw err;\n      } else {\n        this.put = () => { return; };\n        this.result = () => undefined;\n      }\n    }\n  }\n\n  result(): RDF.Term {\n    return this.aggregator.result(this.state);\n  }\n}\n\nabstract class BaseAggregator<State> {\n  protected distinct: boolean;\n  protected separator: string;\n\n  constructor(expr: Algebra.AggregateExpression) {\n    this.distinct = expr.distinct;\n    this.separator = expr.separator || ' ';\n  }\n\n  static emptyValue(): RDF.Term {\n    return undefined;\n  }\n\n  abstract init(start: RDF.Term): State;\n\n  abstract result(state: State): RDF.Term;\n\n  abstract put(state: State, bindings: RDF.Term): State;\n\n}\n\nclass Count extends BaseAggregator<number> {\n  static emptyValue() {\n    return number(0, TypeURL.XSD_INTEGER).toRDF();\n  }\n\n  init(start: RDF.Term): number {\n    return 1;\n  }\n\n  put(state: number, term: RDF.Term): number {\n    return state + 1;\n  }\n\n  result(state: number): RDF.Term {\n    return number(state, TypeURL.XSD_INTEGER).toRDF();\n  }\n}\n\ntype SumState = E.NumericLiteral;\nclass Sum extends BaseAggregator<SumState> {\n  summer = regularFunctions.get(C.RegularOperator.ADDITION);\n\n  static emptyValue() {\n    return number(0, TypeURL.XSD_INTEGER).toRDF();\n  }\n\n  init(start: RDF.Term): SumState {\n    const { value, type } = extractNumericValueAndTypeOrError(start);\n    return new E.NumericLiteral(value, RDFDM.namedNode(type));\n  }\n\n  put(state: SumState, term: RDF.Term): SumState {\n    const { value, type } = extractNumericValueAndTypeOrError(term);\n    const internalTerm = new E.NumericLiteral(value, RDFDM.namedNode(type));\n    const sum = this.summer.apply([state, internalTerm]) as E.NumericLiteral;\n    return sum;\n  }\n\n  result(state: SumState): RDF.Term {\n    return state.toRDF();\n  }\n}\n\ntype MinState = { minNum: number, minTerm: RDF.Term };\nclass Min extends BaseAggregator<MinState> {\n  init(start: RDF.Term): MinState {\n    const { value } = extractNumericValueAndTypeOrError(start);\n    return { minNum: value, minTerm: start };\n  }\n\n  put(state: MinState, term: RDF.Term): MinState {\n    const { value } = extractNumericValueAndTypeOrError(term);\n    if (value < state.minNum) {\n      return {\n        minNum: value,\n        minTerm: term,\n      };\n    }\n    return state;\n  }\n\n  result(state: MinState): RDF.Term {\n    return state.minTerm;\n  }\n}\n\ntype MaxState = { maxNum: number, maxTerm: RDF.Term };\nclass Max extends BaseAggregator<MaxState> {\n  init(start: RDF.Term): MaxState {\n    const { value } = extractNumericValueAndTypeOrError(start);\n    return { maxNum: value, maxTerm: start };\n  }\n\n  put(state: MaxState, term: RDF.Term): MaxState {\n    const { value } = extractNumericValueAndTypeOrError(term);\n    if (value >= state.maxNum) {\n      return {\n        maxNum: value,\n        maxTerm: term,\n      };\n    }\n    return state;\n  }\n\n  result(state: MaxState): RDF.Term {\n    return state.maxTerm;\n  }\n}\n\ntype AverageState = { sum: E.NumericLiteral, count: number };\nclass Average extends BaseAggregator<AverageState> {\n  summer = regularFunctions.get(C.RegularOperator.ADDITION);\n  divider = regularFunctions.get(C.RegularOperator.DIVISION);\n\n  static emptyValue() {\n    return number(0, TypeURL.XSD_INTEGER).toRDF();\n  }\n\n  init(start: RDF.Term): AverageState {\n    const { value, type } = extractNumericValueAndTypeOrError(start);\n    const sum = new E.NumericLiteral(value, RDFDM.namedNode(type));\n    return { sum, count: 1 };\n  }\n\n  put(state: AverageState, term: RDF.Term): AverageState {\n    const { value, type } = extractNumericValueAndTypeOrError(term);\n    const internalTerm = new E.NumericLiteral(value, RDFDM.namedNode(type));\n    const sum = this.summer.apply([state.sum, internalTerm]) as E.NumericLiteral;\n    return {\n      sum,\n      count: state.count + 1,\n    };\n  }\n\n  result(state: AverageState): RDF.Term {\n    const count = new E.NumericLiteral(state.count, RDFDM.namedNode(C.TypeURL.XSD_INTEGER));\n    const result = this.divider.apply([state.sum, count]);\n    return result.toRDF();\n  }\n\n}\n\nclass GroupConcat extends BaseAggregator<string> {\n  static emptyValue() {\n    return string('').toRDF();\n  }\n\n  init(start: RDF.Term): string {\n    return start.value;\n  }\n\n  put(state: string, term: RDF.Term): string {\n    return state + this.separator + term.value;\n  }\n\n  result(state: string): RDF.Term {\n    return string(state).toRDF();\n  }\n}\n\nclass Sample extends BaseAggregator<RDF.Term> {\n  init(start: RDF.Term): RDF.Term {\n    return start;\n  }\n\n  put(state: RDF.Term, term: RDF.Term): RDF.Term {\n    return state; // First value is our sample\n  }\n\n  result(state: RDF.Term): RDF.Term {\n    return state;\n  }\n}\n\nexport interface AggregatorClass {\n  new(expr: Algebra.AggregateExpression): BaseAggregator<any>;\n  emptyValue(): RDF.Term;\n}\nexport const aggregators: Readonly<{ [key in SetFunction]: AggregatorClass }> = {\n  count: Count,\n  sum: Sum,\n  min: Min,\n  max: Max,\n  avg: Average,\n  group_concat: GroupConcat,\n  sample: Sample,\n};\n\nfunction extractNumericValueAndTypeOrError(term: RDF.Term): { value: number, type: C.NumericTypeURL } {\n  // TODO: Check behaviour\n  if (term.termType !== 'Literal' || !C.NumericTypeURLs.contains(term.datatype.value)) {\n    throw new Error('Term is not numeric');\n  }\n\n  const type: C.NumericTypeURL = term.datatype.value as unknown as C.NumericTypeURL;\n  const value = parseXSDFloat(term.value);\n  return { type, value };\n}\n"]}