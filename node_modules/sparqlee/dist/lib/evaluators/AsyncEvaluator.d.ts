import * as RDF from 'rdf-js';
import { Algebra as Alg } from 'sparqlalgebrajs';
import * as E from '../expressions/Expressions';
import { Bindings, Hooks } from '../Types';
declare type Term = E.TermExpression;
export declare class AsyncEvaluator {
    algExpr: Alg.Expression;
    hooks: Hooks;
    private expr;
    constructor(algExpr: Alg.Expression, hooks?: Hooks);
    evaluate(mapping: Bindings): Promise<RDF.Term>;
    evaluateAsEBV(mapping: Bindings): Promise<boolean>;
    evaluateAsInternal(mapping: Bindings): Promise<Term>;
    private readonly evaluators;
    private evalRecursive;
    private evalTerm;
    private evalVariable;
    private evalOperator;
    private evalSpecialOperator;
    private evalNamed;
    private evalExistence;
    private evalAggregate;
}
export {};
