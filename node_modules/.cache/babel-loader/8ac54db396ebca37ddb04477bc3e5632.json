{"ast":null,"code":"// **N3Util** provides N3 utility functions.\nimport N3DataFactory from './N3DataFactory'; // Tests whether the given term represents an IRI\n\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n} // Tests whether the given term represents a blank node\n\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n} // Tests whether the given term represents a literal\n\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n} // Tests whether the given term represents a variable\n\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n} // Tests whether the given term represents the default graph\n\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n} // Tests whether the given quad is in the default graph\n\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n} // Creates a function that prepends the given IRI to a local name\n\nexport function prefix(iri, factory) {\n  return prefixes({\n    '': iri\n  }, factory)('');\n} // Creates a function that allows registering and expanding prefixes\n\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  var prefixes = Object.create(null);\n\n  for (var prefix in defaultPrefixes) {\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  } // Set the default factory if none was specified\n\n\n  factory = factory || N3DataFactory; // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      var cache = Object.create(null);\n\n      prefixes[prefix] = function (local) {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    } else if (!(prefix in prefixes)) {\n      throw new Error('Unknown prefix: ' + prefix);\n    }\n\n    return prefixes[prefix];\n  }\n\n  return processPrefix;\n}","map":null,"metadata":{},"sourceType":"module"}