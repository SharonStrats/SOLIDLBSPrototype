{"ast":null,"code":"'use strict'; // This file attaches all functionality to Node\n// that would otherwise require circular dependencies.\n\nimport Node from './node-internal';\nimport Collection from './collection';\nimport Literal from './literal';\nexport default Node;\n/**\n * Creates an RDF Node from a native javascript value.\n * RDF Nodes are returned unchanged, undefined returned as itself.\n * @method fromValue\n * @static\n * @param value {Node|Date|String|Number|Boolean|Undefined}\n * @return {Node|Collection}\n */\n\nNode.fromValue = function fromValue(value) {\n  if (typeof value === 'undefined' || value === null) {\n    return value;\n  }\n\n  var isNode = value && value.termType;\n\n  if (isNode) {\n    // a Node subclass or a Collection\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return new Collection(value);\n  }\n\n  return Literal.fromValue(value);\n};\n\nimport Namespace from './namespace';\nvar ns = {\n  xsd: Namespace('http://www.w3.org/2001/XMLSchema#')\n};\n\nNode.toJS = function toJS(term) {\n  if (term.elements) {\n    return term.elements.map(Node.toJS); // Array node (not standard RDFJS)\n  }\n\n  if (!term.datatype) return term; // Objects remain objects\n\n  if (term.datatype.sameTerm(ns.xsd('boolean'))) {\n    return term.value === '1';\n  }\n\n  if (term.datatype.sameTerm(ns.xsd('dateTime')) || term.datatype.sameTerm(ns.xsd('date'))) {\n    return new Date(term.value);\n  }\n\n  if (term.datatype.sameTerm(ns.xsd('integer')) || term.datatype.sameTerm(ns.xsd('float')) || term.datatype.sameTerm(ns.xsd('decimal'))) {\n    var z = Number(term.value);\n    return Number(term.value);\n  }\n\n  return term.value;\n};","map":null,"metadata":{},"sourceType":"module"}