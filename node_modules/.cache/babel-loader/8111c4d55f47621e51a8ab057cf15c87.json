{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/**\n * Local dependencies\n */\nvar Algorithm = require('../dictionaries/Algorithm');\n\nvar KeyAlgorithm = require('../dictionaries/KeyAlgorithm');\n\nvar RegisteredAlgorithms = require('./RegisteredAlgorithms');\n\nvar _require = require('../errors'),\n    NotSupportedError = _require.NotSupportedError;\n/**\n * Supported Operations\n */\n\n\nvar operations = ['encrypt', 'decrypt', 'sign', 'verify', 'deriveBits', 'digest', // THIS WASN'T IN THE LIST. PROBABLY GETTING SOMETHING WRONG HERE\n'wrapKey', 'unwrapKey', 'generateKey', 'importKey', 'exportKey', 'getLength'];\n/**\n * SupportedAlgorithms\n */\n\nvar SupportedAlgorithms =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  /**\n   * Constructor\n   */\n  function SupportedAlgorithms() {\n    var _this = this;\n\n    _classCallCheck(this, SupportedAlgorithms);\n\n    operations.forEach(function (op) {\n      _this[op] = new RegisteredAlgorithms();\n    });\n  }\n  /**\n   * Supported Operations\n   */\n\n\n  _createClass(SupportedAlgorithms, [{\n    key: \"define\",\n\n    /**\n     * Define Algorithm\n     */\n    value: function define(alg, op, type) {\n      var registeredAlgorithms = this[op];\n      registeredAlgorithms[alg] = type;\n    }\n    /**\n     * Normalize\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(op, alg) {\n      if (typeof alg === 'string') {\n        return this.normalize(op, new KeyAlgorithm({\n          name: alg\n        }));\n      }\n\n      if (typeof alg === 'object') {\n        var registeredAlgorithms = this[op];\n        var initialAlg;\n\n        try {\n          initialAlg = new Algorithm(alg);\n        } catch (error) {\n          return error;\n        }\n\n        var algName = initialAlg.name;\n        algName = registeredAlgorithms.getCaseInsensitive(algName);\n\n        if (algName === undefined) {\n          return new NotSupportedError(alg.name);\n        }\n\n        var desiredType, normalizedAlgorithm;\n\n        try {\n          desiredType = require(registeredAlgorithms[algName]);\n          normalizedAlgorithm = new desiredType(alg);\n          normalizedAlgorithm.name = algName;\n        } catch (error) {\n          return error;\n        }\n\n        var dictionaries = desiredType.dictionaries;\n\n        for (var i = 0; i < dictionaries.length; i++) {\n          var dictionary = dictionaries[i];\n          var members = dictionary.members;\n\n          for (var key in members) {\n            var member = members[key];\n            var idlValue = normalizedAlgorithm[key];\n\n            try {\n              if (member === 'BufferSource' && idlValue !== undefined) {\n                normalizedAlgorithm[key] = idlValue.slice();\n              }\n\n              if (member === 'HashAlgorithmIdentifier') {\n                var hashAlgorithm = this.normalize('digest', idlValue);\n\n                if (hashAlgorithm instanceof Error) {\n                  return hashAlgorithm;\n                }\n\n                normalizedAlgorithm[key] = hashAlgorithm;\n              }\n\n              if (member === 'AlgorithmIdentifier') {\n                normalizedAlgorithm[key] = this.normalize(WTF, idlValue);\n              }\n            } catch (error) {\n              return error;\n            }\n          }\n        }\n\n        return normalizedAlgorithm;\n      }\n    }\n  }], [{\n    key: \"operations\",\n    get: function get() {\n      return operations;\n    }\n  }]);\n\n  return SupportedAlgorithms;\n}();\n/**\n * Export\n */\n\n\nmodule.exports = SupportedAlgorithms;","map":null,"metadata":{},"sourceType":"script"}