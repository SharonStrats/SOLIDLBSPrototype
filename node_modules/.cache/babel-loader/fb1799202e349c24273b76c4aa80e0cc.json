{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\src\\\\containers\\\\Profile\\\\components\\\\Image\\\\image.component.js\";\nimport React, { useState, useEffect } from 'react';\nimport data from '@solid/query-ldflex';\nimport { Uploader, useLiveUpdate } from '@inrupt/solid-react-components';\nimport { useTranslation } from 'react-i18next';\nimport { namedNode } from '@rdfjs/data-model';\nimport { ImageProfile } from \"../../../../components\";\nexport var Image = function Image(_ref) {\n  var webId = _ref.webId,\n      toastManager = _ref.toastManager,\n      defaultProfilePhoto = _ref.defaultProfilePhoto;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var latestUpdate = useLiveUpdate();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  useEffect(function () {\n    fetchPhoto();\n  }, [webId, latestUpdate]);\n  /**\n   * Fetch profile photo from card\n   */\n\n  var fetchPhoto =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var user, _image;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!webId) {\n                _context.next = 7;\n                break;\n              }\n\n              // We are fetching profile card document\n              user = data.user;\n              /**\n               * We access to document node using a node name\n               * hasPhoto is a new context that ldflex doesn't having\n               * we need to add it manually.\n               * if you want to know more about context please go to:\n               * https://github.com/digitalbazaar/jsonld.js\n               */\n\n              _context.next = 5;\n              return user.vcard_hasPhoto;\n\n            case 5:\n              _image = _context.sent;\n              setImage(_image && _image.value);\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              toastManager.add(['Error', _context.t0.message], {\n                appearance: 'error',\n                autoDismiss: false\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function fetchPhoto() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * updatedPhoto will update the photo url on vcard file\n   * this function will check if user has image or hasPhoto node if not\n   * will just update it, the idea is use image instead of hasPhoto\n   * @params{String} uri photo url\n   */\n\n\n  var updatePhoto =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(uri) {\n      var user;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              user = data.user;\n              _context2.next = 4;\n              return user.vcard_hasPhoto.set(namedNode(uri));\n\n            case 4:\n              toastManager.add(['', t('profile.uploadSuccess')], {\n                appearance: 'success'\n              });\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              toastManager.add(['Error', _context2.t0.message], {\n                appearance: 'error',\n                autoDismiss: false\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function updatePhoto(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var limit = 2100000;\n  return React.createElement(Uploader, Object.assign({\n    fileBase: webId && webId.split('/card')[0],\n    limitFiles: 1,\n    limitSize: limit,\n    accept: 'png,jpeg,jpg',\n    errorsText: {\n      sizeLimit: t('profile.errors.sizeLimit', {\n        limit: \"\".concat(limit / 1000000, \"Mbs\")\n      }),\n      unsupported: t('profile.errors.unsupported'),\n      maximumFiles: t('profile.errors.maximumFiles')\n    },\n    onError: function onError(error) {\n      if (error && error.statusText) {\n        toastManager.add(['', error.statusText], {\n          appearance: 'error'\n        });\n      }\n    },\n    onComplete: function onComplete(uploadedFiles) {\n      updatePhoto(uploadedFiles[uploadedFiles.length - 1].uri);\n    },\n    render: function render(props) {\n      return React.createElement(ImageProfile, Object.assign({}, _objectSpread({}, props, {\n        webId: webId,\n        photo: image || defaultProfilePhoto,\n        text: t('profile.upload'),\n        uploadingText: t('profile.uploadingText')\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }));\n    }\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["C:\\Users\\SoDiAl\\Documents\\WebDev2019\\SolidReactTest\\src\\containers\\Profile\\components\\Image\\image.component.js"],"names":["React","useState","useEffect","data","Uploader","useLiveUpdate","useTranslation","namedNode","ImageProfile","Image","webId","toastManager","defaultProfilePhoto","image","setImage","latestUpdate","t","fetchPhoto","user","vcard_hasPhoto","value","add","message","appearance","autoDismiss","updatePhoto","uri","set","limit","fileBase","split","limitFiles","limitSize","accept","errorsText","sizeLimit","unsupported","maximumFiles","onError","error","statusText","onComplete","uploadedFiles","length","render","props","photo","text","uploadingText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport data from '@solid/query-ldflex';\nimport { Uploader, useLiveUpdate } from '@inrupt/solid-react-components';\nimport { useTranslation } from 'react-i18next';\nimport { namedNode } from '@rdfjs/data-model';\nimport { ImageProfile } from '@components';\n\ntype Props = {\n    webId: String,\n    toastManager: String,\n};\n\nexport const Image = ({ webId, toastManager, defaultProfilePhoto }: Props) => {\n    const [image, setImage] = useState('');\n\n    const latestUpdate = useLiveUpdate();\n\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        fetchPhoto();\n    }, [webId, latestUpdate]);\n    /**\n     * Fetch profile photo from card\n     */\n    const fetchPhoto = async () => {\n        try {\n            if (webId) {\n                // We are fetching profile card document\n                const user = data.user;\n                /**\n                 * We access to document node using a node name\n                 * hasPhoto is a new context that ldflex doesn't having\n                 * we need to add it manually.\n                 * if you want to know more about context please go to:\n                 * https://github.com/digitalbazaar/jsonld.js\n                 */\n                const image = await user.vcard_hasPhoto;\n\n                setImage(image && image.value);\n            }\n        } catch (error) {\n            toastManager.add(['Error', error.message], {\n                appearance: 'error',\n                autoDismiss: false,\n            });\n        }\n    };\n    /**\n     * updatedPhoto will update the photo url on vcard file\n     * this function will check if user has image or hasPhoto node if not\n     * will just update it, the idea is use image instead of hasPhoto\n     * @params{String} uri photo url\n     */\n    const updatePhoto = async (uri: String) => {\n        try {\n            const { user } = data;\n\n            await user.vcard_hasPhoto.set(namedNode(uri));\n\n            toastManager.add(['', t('profile.uploadSuccess')], {\n                appearance: 'success',\n            });\n        } catch (error) {\n            toastManager.add(['Error', error.message], {\n                appearance: 'error',\n                autoDismiss: false,\n            });\n        }\n    };\n    const limit = 2100000;\n    return (\n        <Uploader\n            {...{\n                fileBase: webId && webId.split('/card')[0],\n                limitFiles: 1,\n                limitSize: limit,\n                accept: 'png,jpeg,jpg',\n                errorsText: {\n                    sizeLimit: t('profile.errors.sizeLimit', {\n                        limit: `${limit / 1000000}Mbs`,\n                    }),\n                    unsupported: t('profile.errors.unsupported'),\n                    maximumFiles: t('profile.errors.maximumFiles'),\n                },\n                onError: error => {\n                    if (error && error.statusText) {\n                        toastManager.add(['', error.statusText], {\n                            appearance: 'error',\n                        });\n                    }\n                },\n                onComplete: uploadedFiles => {\n                    updatePhoto(uploadedFiles[uploadedFiles.length - 1].uri);\n                },\n                render: props => (\n                    <ImageProfile\n                        {...{\n                            ...props,\n                            webId,\n                            photo: image || defaultProfilePhoto,\n                            text: t('profile.upload'),\n                            uploadingText: t('profile.uploadingText'),\n                        }}\n                    />\n                ),\n            }}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}