{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar api = {};\nmodule.exports = api;\n/**\n * Returns true if the given value is an Array.\n *\n * @param v the value to check.\n *\n * @return true if the value is an Array, false if not.\n */\n\napi.isArray = Array.isArray;\n/**\n * Returns true if the given value is a Boolean.\n *\n * @param v the value to check.\n *\n * @return true if the value is a Boolean, false if not.\n */\n\napi.isBoolean = function (v) {\n  return typeof v === 'boolean' || Object.prototype.toString.call(v) === '[object Boolean]';\n};\n/**\n * Returns true if the given value is a double.\n *\n * @param v the value to check.\n *\n * @return true if the value is a double, false if not.\n */\n\n\napi.isDouble = function (v) {\n  return api.isNumber(v) && String(v).indexOf('.') !== -1;\n};\n/**\n * Returns true if the given value is an empty Object.\n *\n * @param v the value to check.\n *\n * @return true if the value is an empty Object, false if not.\n */\n\n\napi.isEmptyObject = function (v) {\n  return api.isObject(v) && Object.keys(v).length === 0;\n};\n/**\n * Returns true if the given value is a Number.\n *\n * @param v the value to check.\n *\n * @return true if the value is a Number, false if not.\n */\n\n\napi.isNumber = function (v) {\n  return typeof v === 'number' || Object.prototype.toString.call(v) === '[object Number]';\n};\n/**\n * Returns true if the given value is numeric.\n *\n * @param v the value to check.\n *\n * @return true if the value is numeric, false if not.\n */\n\n\napi.isNumeric = function (v) {\n  return !isNaN(parseFloat(v)) && isFinite(v);\n};\n/**\n * Returns true if the given value is an Object.\n *\n * @param v the value to check.\n *\n * @return true if the value is an Object, false if not.\n */\n\n\napi.isObject = function (v) {\n  return Object.prototype.toString.call(v) === '[object Object]';\n};\n/**\n * Returns true if the given value is a String.\n *\n * @param v the value to check.\n *\n * @return true if the value is a String, false if not.\n */\n\n\napi.isString = function (v) {\n  return typeof v === 'string' || Object.prototype.toString.call(v) === '[object String]';\n};\n/**\n * Returns true if the given value is undefined.\n *\n * @param v the value to check.\n *\n * @return true if the value is undefined, false if not.\n */\n\n\napi.isUndefined = function (v) {\n  return typeof v === 'undefined';\n};","map":null,"metadata":{},"sourceType":"script"}