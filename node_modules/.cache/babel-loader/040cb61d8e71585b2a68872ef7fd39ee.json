{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar usm = require(\"./url-state-machine\");\n\nvar urlencoded = require(\"./urlencoded\");\n\nvar URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation =\n/*#__PURE__*/\nfunction () {\n  function URLImpl(constructorArgs) {\n    _classCallCheck(this, URLImpl);\n\n    var url = constructorArgs[0];\n    var base = constructorArgs[1];\n    var parsedBase = null;\n\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n\n      if (parsedBase === null) {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n\n    var parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n\n    if (parsedURL === null) {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    var query = parsedURL.query !== null ? parsedURL.query : \"\";\n    this._url = parsedURL; // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n\n    this._query = URLSearchParams.createImpl([query], {\n      doNotStripQMark: true\n    });\n    this._query._url = this;\n  }\n\n  _createClass(URLImpl, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.href;\n    }\n  }, {\n    key: \"href\",\n    get: function get() {\n      return usm.serializeURL(this._url);\n    },\n    set: function set(v) {\n      var parsedURL = usm.basicURLParse(v);\n\n      if (parsedURL === null) {\n        throw new TypeError(\"Invalid URL\");\n      }\n\n      this._url = parsedURL;\n\n      this._query._list.splice(0);\n\n      var query = parsedURL.query;\n\n      if (query !== null) {\n        this._query._list = urlencoded.parseUrlencoded(query);\n      }\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      return usm.serializeURLOrigin(this._url);\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      return this._url.scheme + \":\";\n    },\n    set: function set(v) {\n      usm.basicURLParse(v + \":\", {\n        url: this._url,\n        stateOverride: \"scheme start\"\n      });\n    }\n  }, {\n    key: \"username\",\n    get: function get() {\n      return this._url.username;\n    },\n    set: function set(v) {\n      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n        return;\n      }\n\n      usm.setTheUsername(this._url, v);\n    }\n  }, {\n    key: \"password\",\n    get: function get() {\n      return this._url.password;\n    },\n    set: function set(v) {\n      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n        return;\n      }\n\n      usm.setThePassword(this._url, v);\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      var url = this._url;\n\n      if (url.host === null) {\n        return \"\";\n      }\n\n      if (url.port === null) {\n        return usm.serializeHost(url.host);\n      }\n\n      return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n    },\n    set: function set(v) {\n      if (this._url.cannotBeABaseURL) {\n        return;\n      }\n\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"host\"\n      });\n    }\n  }, {\n    key: \"hostname\",\n    get: function get() {\n      if (this._url.host === null) {\n        return \"\";\n      }\n\n      return usm.serializeHost(this._url.host);\n    },\n    set: function set(v) {\n      if (this._url.cannotBeABaseURL) {\n        return;\n      }\n\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"hostname\"\n      });\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      if (this._url.port === null) {\n        return \"\";\n      }\n\n      return usm.serializeInteger(this._url.port);\n    },\n    set: function set(v) {\n      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n        return;\n      }\n\n      if (v === \"\") {\n        this._url.port = null;\n      } else {\n        usm.basicURLParse(v, {\n          url: this._url,\n          stateOverride: \"port\"\n        });\n      }\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      if (this._url.cannotBeABaseURL) {\n        return this._url.path[0];\n      }\n\n      if (this._url.path.length === 0) {\n        return \"\";\n      }\n\n      return \"/\" + this._url.path.join(\"/\");\n    },\n    set: function set(v) {\n      if (this._url.cannotBeABaseURL) {\n        return;\n      }\n\n      this._url.path = [];\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"path start\"\n      });\n    }\n  }, {\n    key: \"search\",\n    get: function get() {\n      if (this._url.query === null || this._url.query === \"\") {\n        return \"\";\n      }\n\n      return \"?\" + this._url.query;\n    },\n    set: function set(v) {\n      var url = this._url;\n\n      if (v === \"\") {\n        url.query = null;\n        this._query._list = [];\n        return;\n      }\n\n      var input = v[0] === \"?\" ? v.substring(1) : v;\n      url.query = \"\";\n      usm.basicURLParse(input, {\n        url: url,\n        stateOverride: \"query\"\n      });\n      this._query._list = urlencoded.parseUrlencoded(input);\n    }\n  }, {\n    key: \"searchParams\",\n    get: function get() {\n      return this._query;\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      if (this._url.fragment === null || this._url.fragment === \"\") {\n        return \"\";\n      }\n\n      return \"#\" + this._url.fragment;\n    },\n    set: function set(v) {\n      if (v === \"\") {\n        this._url.fragment = null;\n        return;\n      }\n\n      var input = v[0] === \"#\" ? v.substring(1) : v;\n      this._url.fragment = \"\";\n      usm.basicURLParse(input, {\n        url: this._url,\n        stateOverride: \"fragment\"\n      });\n    }\n  }]);\n\n  return URLImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}