{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\src\\\\components\\\\AuthNavBar\\\\auth-nav-bar.container.js\";\nimport React, { Component } from \"react\";\nimport { UpdateContext, withWebId } from \"@inrupt/solid-react-components\";\nimport { withTranslation } from \"react-i18next\";\nimport AuthNavBar from \"./auth-nav-bar.component\";\nimport data from \"@solid/query-ldflex\";\nimport { withToastManager } from \"react-toast-notifications\";\nvar beforeContext = {};\n\nvar AuthNavBarContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AuthNavBarContainer, _Component);\n\n  function AuthNavBarContainer(props) {\n    var _this;\n\n    _classCallCheck(this, AuthNavBarContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthNavBarContainer).call(this, props));\n    _this.getProfileData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var user, userName, userImage, name, image;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // fetching user card from pod. This makes a request and returns the data\n              user = data.user;\n              /*\n               * In the background LDFlex is using JSON-LD. Because of this, we need to\n               * make an async call. This will return a JSON-LD expanded object and expose the requested value(name).\n               * for more information please go to: https://github.com/digitalbazaar/jsonld.js\n               */\n\n              _context.next = 4;\n              return user.name;\n\n            case 4:\n              userName = _context.sent;\n              _context.next = 7;\n              return user.vcard_hasPhoto;\n\n            case 7:\n              userImage = _context.sent;\n              name = userName ? userName.value : \"\";\n              image = userImage ? userImage.value : \"/img/icon/empty-profile.svg\";\n\n              _this.setState({\n                name: name,\n                image: image\n              });\n\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n\n              _this.props.toastManager.add(['Error', _context.t0.message], {\n                appearance: 'error'\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 13]]);\n    }));\n    _this.state = {\n      image: null\n    };\n    return _this;\n  }\n\n  _createClass(AuthNavBarContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.webId) {\n        this.getProfileData();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(prevProps, prevState) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.props.webId && this.props.webId !== prevProps.webId) {\n                  this.getProfileData();\n                }\n\n                if (this.context && this.context.timestamp !== beforeContext.timestamp) {\n                  this.getProfileData();\n                  beforeContext = this.context;\n                }\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidUpdate(_x, _x2) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var image = this.state.image;\n      return React.createElement(AuthNavBar, Object.assign({\n        img: image\n      }, this.props, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AuthNavBarContainer;\n}(Component);\n\nAuthNavBarContainer.contextType = UpdateContext;\nexport default withTranslation()(withToastManager(withWebId(AuthNavBarContainer)));","map":{"version":3,"sources":["C:\\Users\\SoDiAl\\Documents\\WebDev2019\\SolidReactTest\\src\\components\\AuthNavBar\\auth-nav-bar.container.js"],"names":["React","Component","UpdateContext","withWebId","withTranslation","AuthNavBar","data","withToastManager","beforeContext","AuthNavBarContainer","props","getProfileData","user","name","userName","vcard_hasPhoto","userImage","value","image","setState","toastManager","add","message","appearance","state","webId","prevProps","prevState","context","timestamp","contextType"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,gCAAzC;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,UAAP;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,IAAIC,aAAa,GAAG,EAApB;;IAEMC,mB;;;;;AACJ,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6FAAMA,KAAN;AADiB,UAKnBC,cALmB;AAAA;AAAA;AAAA;AAAA,6BAKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb;AACMC,cAAAA,IAHO,GAGAN,IAAI,CAACM,IAHL;AAIb;;;;;;AAJa;AAAA,qBASUA,IAAI,CAACC,IATf;;AAAA;AASPC,cAAAA,QATO;AAAA;AAAA,qBAUWF,IAAI,CAACG,cAVhB;;AAAA;AAUPC,cAAAA,SAVO;AAWPH,cAAAA,IAXO,GAWAC,QAAQ,GAAGA,QAAQ,CAACG,KAAZ,GAAoB,EAX5B;AAYPC,cAAAA,KAZO,GAYCF,SAAS,GAAGA,SAAS,CAACC,KAAb,GAAqB,6BAZ/B;;AAab,oBAAKE,QAAL,CAAc;AACZN,gBAAAA,IAAI,EAAJA,IADY;AAEZK,gBAAAA,KAAK,EAALA;AAFY,eAAd;;AAba;AAAA;;AAAA;AAAA;AAAA;;AAkBb,oBAAKR,KAAL,CAAWU,YAAX,CAAwBC,GAAxB,CAA6B,CAAC,OAAD,EAAU,YAAMC,OAAhB,CAA7B,EAAuD;AACrDC,gBAAAA,UAAU,EAAE;AADyC,eAAvD;;AAlBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALE;AAEjB,UAAKC,KAAL,GAAa;AAAEN,MAAAA,KAAK,EAAE;AAAT,KAAb;AAFiB;AAGlB;;;;wCA0BmB;AAClB,UAAI,KAAKR,KAAL,CAAWe,KAAf,EAAsB;AACpB,aAAKd,cAAL;AACD;AACF;;;;;;iDAEwBe,S,EAAWC,S;;;;;AAClC,oBAAI,KAAKjB,KAAL,CAAWe,KAAX,IAAoB,KAAKf,KAAL,CAAWe,KAAX,KAAqBC,SAAS,CAACD,KAAvD,EAA8D;AAC5D,uBAAKd,cAAL;AACD;;AAED,oBAAI,KAAKiB,OAAL,IAAgB,KAAKA,OAAL,CAAaC,SAAb,KAA2BrB,aAAa,CAACqB,SAA7D,EAAwE;AACtE,uBAAKlB,cAAL;AAEAH,kBAAAA,aAAa,GAAG,KAAKoB,OAArB;AACD;;;;;;;;;;;;;;;;;;6BAGM;AAAA,UACCV,KADD,GACW,KAAKM,KADhB,CACCN,KADD;AAEP,aAAO,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAEA;AAAjB,SAA4B,KAAKR,KAAjC,EAA4C,KAAKc,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAnD+BvB,S;;AAqDlCQ,mBAAmB,CAACqB,WAApB,GAAkC5B,aAAlC;AAGA,eAAeE,eAAe,GAAGG,gBAAgB,CAACJ,SAAS,CAACM,mBAAD,CAAV,CAAnB,CAA9B","sourcesContent":["import React, { Component } from \"react\";\nimport { UpdateContext, withWebId } from \"@inrupt/solid-react-components\";\nimport { withTranslation } from \"react-i18next\";\nimport AuthNavBar from \"./auth-nav-bar.component\";\nimport data from \"@solid/query-ldflex\";\nimport { withToastManager } from \"react-toast-notifications\";\n\nlet beforeContext = {};\n\nclass AuthNavBarContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { image: null };\n  }\n\n  getProfileData = async () => {\n    try {\n      // fetching user card from pod. This makes a request and returns the data\n      const user = data.user;\n      /*\n       * In the background LDFlex is using JSON-LD. Because of this, we need to\n       * make an async call. This will return a JSON-LD expanded object and expose the requested value(name).\n       * for more information please go to: https://github.com/digitalbazaar/jsonld.js\n       */\n      const userName = await user.name;\n      const userImage = await user.vcard_hasPhoto;\n      const name = userName ? userName.value : \"\";\n      const image = userImage ? userImage.value : \"/img/icon/empty-profile.svg\";\n      this.setState({\n        name,\n        image\n      });\n    } catch (error) {\n      this.props.toastManager.add (['Error', error.message], {\n        appearance: 'error',\n      });\n    }\n  };\n\n  componentDidMount() {\n    if (this.props.webId) {\n      this.getProfileData();\n    }\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (this.props.webId && this.props.webId !== prevProps.webId) {\n      this.getProfileData();\n    }\n\n    if (this.context && this.context.timestamp !== beforeContext.timestamp) {\n      this.getProfileData();\n\n      beforeContext = this.context;\n    }\n  }\n\n  render() {\n    const { image } = this.state;\n    return <AuthNavBar img={image} {...this.props} {...this.state} />;\n  }\n}\nAuthNavBarContainer.contextType = UpdateContext;\n\n\nexport default withTranslation()(withToastManager(withWebId(AuthNavBarContainer)));\n"]},"metadata":{},"sourceType":"module"}