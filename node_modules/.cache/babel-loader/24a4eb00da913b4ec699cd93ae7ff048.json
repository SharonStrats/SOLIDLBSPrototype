{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n/* global Node, XMLSerializer */\n'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _require = require('./constants'),\n    RDF_LANGSTRING = _require.RDF_LANGSTRING,\n    RDF_PLAIN_LITERAL = _require.RDF_PLAIN_LITERAL,\n    RDF_OBJECT = _require.RDF_OBJECT,\n    RDF_XML_LITERAL = _require.RDF_XML_LITERAL,\n    XSD_STRING = _require.XSD_STRING;\n\nvar _Node;\n\nif (typeof Node !== 'undefined') {\n  _Node = Node;\n} else {\n  _Node = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function Rdfa() {\n    _classCallCheck(this, Rdfa);\n  }\n\n  _createClass(Rdfa, [{\n    key: \"parse\",\n\n    /**\n     * Parses the RDF dataset found via the data object from the RDFa API.\n     *\n     * @param data the RDFa API data object.\n     *\n     * @return the RDF dataset.\n     */\n    value: function parse(data) {\n      var dataset = {};\n      dataset['@default'] = [];\n      var subjects = data.getSubjects();\n\n      for (var si = 0; si < subjects.length; ++si) {\n        var subject = subjects[si];\n\n        if (subject === null) {\n          continue;\n        } // get all related triples\n\n\n        var triples = data.getSubjectTriples(subject);\n\n        if (triples === null) {\n          continue;\n        }\n\n        var predicates = triples.predicates;\n\n        for (var predicate in predicates) {\n          // iterate over objects\n          var objects = predicates[predicate].objects;\n\n          for (var oi = 0; oi < objects.length; ++oi) {\n            var object = objects[oi]; // create RDF triple\n\n            var triple = {}; // add subject\n\n            if (subject.indexOf('_:') === 0) {\n              triple.subject = {\n                type: 'blank node',\n                value: subject\n              };\n            } else {\n              triple.subject = {\n                type: 'IRI',\n                value: subject\n              };\n            } // add predicate\n\n\n            if (predicate.indexOf('_:') === 0) {\n              triple.predicate = {\n                type: 'blank node',\n                value: predicate\n              };\n            } else {\n              triple.predicate = {\n                type: 'IRI',\n                value: predicate\n              };\n            } // serialize XML literal\n\n\n            var value = object.value;\n\n            if (object.type === RDF_XML_LITERAL) {\n              // initialize XMLSerializer\n              var _XMLSerializer = getXMLSerializerClass();\n\n              var serializer = new _XMLSerializer();\n              value = '';\n\n              for (var x = 0; x < object.value.length; x++) {\n                if (object.value[x].nodeType === _Node.ELEMENT_NODE) {\n                  value += serializer.serializeToString(object.value[x]);\n                } else if (object.value[x].nodeType === _Node.TEXT_NODE) {\n                  value += object.value[x].nodeValue;\n                }\n              }\n            } // add object\n\n\n            triple.object = {}; // object is an IRI\n\n            if (object.type === RDF_OBJECT) {\n              if (object.value.indexOf('_:') === 0) {\n                triple.object.type = 'blank node';\n              } else {\n                triple.object.type = 'IRI';\n              }\n            } else {\n              // object is a literal\n              triple.object.type = 'literal';\n\n              if (object.type === RDF_PLAIN_LITERAL) {\n                if (object.language) {\n                  triple.object.datatype = RDF_LANGSTRING;\n                  triple.object.language = object.language;\n                } else {\n                  triple.object.datatype = XSD_STRING;\n                }\n              } else {\n                triple.object.datatype = object.type;\n              }\n            }\n\n            triple.object.value = value; // add triple to dataset in default graph\n\n            dataset['@default'].push(triple);\n          }\n        }\n      }\n\n      return dataset;\n    }\n  }]);\n\n  return Rdfa;\n}();\n\nfunction getXMLSerializerClass() {\n  if (typeof XMLSerializer === 'undefined') {\n    return require('xmldom').XMLSerializer;\n  }\n\n  return XMLSerializer;\n}","map":null,"metadata":{},"sourceType":"script"}