{"ast":null,"code":"import BlankNode from './blank-node';\nimport Collection from './collection';\nimport * as convert from './convert';\nimport DataFactory from './data-factory';\nimport Empty from './empty';\nimport Fetcher from './fetcher';\nimport Formula from './formula';\nimport Store from './store';\nimport jsonParser from './jsonparser';\nimport Literal from './literal';\nimport log from './log';\nimport N3Parser from './n3parser';\nimport NamedNode from './named-node';\nimport Namespace from './namespace';\nimport Node from './node';\nimport parse from './parse';\nimport { Query } from './query';\nimport queryToSPARQL from './query-to-sparql';\nimport RDFaProcessor from './rdfaparser';\nimport RDFParser from './rdfxmlparser';\nimport serialize from './serialize';\nimport Serializer from './serializer';\nimport SPARQLToQuery from './sparql-to-query';\nimport sparqlUpdateParser from './patch-parser';\nimport Statement from './statement';\nimport UpdateManager from './update-manager';\nimport { UpdatesSocket } from './updates-via';\nimport { UpdatesVia } from './updates-via';\nimport * as uri from './uri';\nimport * as Util from './util';\nimport Variable from './variable';\nvar NextId = BlankNode.nextId;\nvar fromNT = Formula.prototype.fromNT;\nvar fetcher = DataFactory.fetcher,\n    graph = DataFactory.graph,\n    lit = DataFactory.lit,\n    st = DataFactory.st,\n    namedNode = DataFactory.namedNode,\n    variable = DataFactory.variable,\n    blankNode = DataFactory.blankNode,\n    defaultGraph = DataFactory.defaultGraph,\n    literal = DataFactory.literal,\n    quad = DataFactory.quad,\n    triple = DataFactory.triple;\nvar term = Node.fromValue;\nexport { BlankNode, Collection, convert, DataFactory, Empty, Fetcher, Formula, Store, jsonParser, Literal, log, N3Parser, NamedNode, Namespace, Node, parse, Query, queryToSPARQL, RDFaProcessor, RDFParser, serialize, Serializer, SPARQLToQuery, sparqlUpdateParser, Statement, term, UpdateManager, UpdatesSocket, UpdatesVia, uri, Util, Variable, Store as IndexedFormula, // Alias\nNextId, fromNT, fetcher, graph, lit, st, namedNode as sym, // RDFJS DataFactory interface\nblankNode, defaultGraph, literal, namedNode, quad, triple, variable };","map":null,"metadata":{},"sourceType":"module"}