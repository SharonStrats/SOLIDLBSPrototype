{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar JsonLdError = require('./JsonLdError');\n\nvar _require = require('./types'),\n    _isArray = _require.isArray,\n    _isObject = _require.isObject,\n    _isEmptyObject = _require.isEmptyObject,\n    _isString = _require.isString,\n    _isUndefined = _require.isUndefined;\n\nvar _require2 = require('./graphTypes'),\n    _isList = _require2.isList,\n    _isValue = _require2.isValue,\n    _isGraph = _require2.isGraph;\n\nvar _require3 = require('./context'),\n    _expandIri = _require3.expandIri,\n    _getContextValue = _require3.getContextValue,\n    _isKeyword = _require3.isKeyword,\n    _processContext = _require3.process;\n\nvar _require4 = require('./url'),\n    _isAbsoluteIri = _require4.isAbsolute;\n\nvar _require5 = require('./util'),\n    _addValue = _require5.addValue,\n    _asArray = _require5.asArray,\n    _getValues = _require5.getValues,\n    _validateTypeValue = _require5.validateTypeValue;\n\nvar api = {};\nmodule.exports = api;\n/**\n * Recursively expands an element using the given context. Any context in\n * the element will be removed. All context URLs must have been retrieved\n * before calling this method.\n *\n * @param activeCtx the context to use.\n * @param activeProperty the property for the element, null for none.\n * @param element the element to expand.\n * @param options the expansion options.\n * @param insideList true if the element is a list, false if not.\n * @param insideIndex true if the element is inside an index container,\n *          false if not.\n * @param typeScopedContext an optional type-scoped active context for\n *          expanding values of nodes that were expressed according to\n *          a type-scoped context.\n * @param expansionMap(info) a function that can be used to custom map\n *          unmappable values (or to throw an error when they are detected);\n *          if this function returns `undefined` then the default behavior\n *          will be used.\n *\n * @return a Promise that resolves to the expanded value.\n */\n\napi.expand = function (_ref) {\n  var activeCtx = _ref.activeCtx,\n      _ref$activeProperty = _ref.activeProperty,\n      activeProperty = _ref$activeProperty === void 0 ? null : _ref$activeProperty,\n      element = _ref.element,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      _ref$insideList = _ref.insideList,\n      insideList = _ref$insideList === void 0 ? false : _ref$insideList,\n      _ref$insideIndex = _ref.insideIndex,\n      insideIndex = _ref$insideIndex === void 0 ? false : _ref$insideIndex,\n      _ref$typeScopedContex = _ref.typeScopedContext,\n      typeScopedContext = _ref$typeScopedContex === void 0 ? null : _ref$typeScopedContex,\n      _ref$expansionMap = _ref.expansionMap,\n      expansionMap = _ref$expansionMap === void 0 ? function () {\n    return undefined;\n  } : _ref$expansionMap;\n\n  // nothing to expand\n  if (element === null || element === undefined) {\n    return null;\n  } // disable framing if activeProperty is @default\n\n\n  if (activeProperty === '@default') {\n    options = Object.assign({}, options, {\n      isFrame: false\n    });\n  }\n\n  if (!_isArray(element) && !_isObject(element)) {\n    // drop free-floating scalars that are not in lists unless custom mapped\n    if (!insideList && (activeProperty === null || _expandIri(activeCtx, activeProperty, {\n      vocab: true\n    }, options) === '@graph')) {\n      // TODO: use `await` to support async\n      var mapped = expansionMap({\n        unmappedValue: element,\n        activeCtx: activeCtx,\n        activeProperty: activeProperty,\n        options: options,\n        insideList: insideList\n      });\n\n      if (mapped === undefined) {\n        return null;\n      }\n\n      return mapped;\n    } // expand element according to value expansion rules\n\n\n    return _expandValue({\n      activeCtx: activeCtx,\n      activeProperty: activeProperty,\n      value: element,\n      options: options\n    });\n  } // recursively expand array\n\n\n  if (_isArray(element)) {\n    var _rval = [];\n    var container = _getContextValue(activeCtx, activeProperty, '@container') || [];\n    insideList = insideList || container.includes('@list');\n\n    for (var i = 0; i < element.length; ++i) {\n      // expand element\n      var e = api.expand({\n        activeCtx: activeCtx,\n        activeProperty: activeProperty,\n        element: element[i],\n        options: options,\n        expansionMap: expansionMap,\n        insideIndex: insideIndex,\n        typeScopedContext: typeScopedContext\n      });\n\n      if (insideList && _isArray(e)) {\n        e = {\n          '@list': e\n        };\n      }\n\n      if (e === null) {\n        // TODO: add `await` for async support\n        e = expansionMap({\n          unmappedValue: element[i],\n          activeCtx: activeCtx,\n          activeProperty: activeProperty,\n          parent: element,\n          index: i,\n          options: options,\n          expandedParent: _rval,\n          insideList: insideList\n        });\n\n        if (e === undefined) {\n          continue;\n        }\n      }\n\n      if (_isArray(e)) {\n        _rval = _rval.concat(e);\n      } else {\n        _rval.push(e);\n      }\n    }\n\n    return _rval;\n  } // recursively expand object:\n  // first, expand the active property\n\n\n  var expandedActiveProperty = _expandIri(activeCtx, activeProperty, {\n    vocab: true\n  }, options); // second, determine if any type-scoped context should be reverted; it\n  // should only be reverted when the following are all true:\n  // 1. `element` is not a value or subject reference\n  // 2. `insideIndex` is false\n\n\n  typeScopedContext = typeScopedContext || (activeCtx.previousContext ? activeCtx : null);\n  var keys = Object.keys(element).sort();\n  var mustRevert = !insideIndex;\n\n  if (mustRevert && typeScopedContext && keys.length <= 2 && !keys.includes('@context')) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var key = _step.value;\n\n        var expandedProperty = _expandIri(typeScopedContext, key, {\n          vocab: true\n        }, options);\n\n        if (expandedProperty === '@value') {\n          // value found, ensure type-scoped context is used to expand it\n          mustRevert = false;\n          activeCtx = typeScopedContext;\n          break;\n        }\n\n        if (expandedProperty === '@id' && keys.length === 1) {\n          // subject reference found, do not revert\n          mustRevert = false;\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  if (mustRevert) {\n    // revert type scoped context\n    activeCtx = activeCtx.revertTypeScopedContext();\n  } // if element has a context, process it\n\n\n  if ('@context' in element) {\n    activeCtx = _processContext({\n      activeCtx: activeCtx,\n      localCtx: element['@context'],\n      options: options\n    });\n  } // look for scoped contexts on `@type`\n\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _key = _step2.value;\n\n      var _expandedProperty = _expandIri(activeCtx, _key, {\n        vocab: true\n      }, options);\n\n      if (_expandedProperty === '@type') {\n        // set scoped contexts from @type\n        // avoid sorting if possible\n        var value = element[_key];\n\n        var _types = Array.isArray(value) ? value.length > 1 ? value.slice().sort() : value : [value];\n\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = _types[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var type = _step3.value;\n\n            var ctx = _getContextValue(activeCtx.previousContext || activeCtx, type, '@context');\n\n            if (!_isUndefined(ctx)) {\n              activeCtx = _processContext({\n                activeCtx: activeCtx,\n                localCtx: ctx,\n                options: options,\n                isTypeScopedContext: true\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n    } // process each key and value in element, ignoring @nest content\n\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  var rval = {};\n\n  _expandObject({\n    activeCtx: activeCtx,\n    activeProperty: activeProperty,\n    expandedActiveProperty: expandedActiveProperty,\n    element: element,\n    expandedParent: rval,\n    options: options,\n    insideList: insideList,\n    typeScopedContext: typeScopedContext,\n    expansionMap: expansionMap\n  }); // get property count on expanded output\n\n\n  keys = Object.keys(rval);\n  var count = keys.length;\n\n  if ('@value' in rval) {\n    // @value must only have @language or @type\n    if ('@type' in rval && '@language' in rval) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an element containing \"@value\" may not ' + 'contain both \"@type\" and \"@language\".', 'jsonld.SyntaxError', {\n        code: 'invalid value object',\n        element: rval\n      });\n    }\n\n    var validCount = count - 1;\n\n    if ('@type' in rval) {\n      validCount -= 1;\n    }\n\n    if ('@index' in rval) {\n      validCount -= 1;\n    }\n\n    if ('@language' in rval) {\n      validCount -= 1;\n    }\n\n    if (validCount !== 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an element containing \"@value\" may only ' + 'have an \"@index\" property and at most one other property ' + 'which can be \"@type\" or \"@language\".', 'jsonld.SyntaxError', {\n        code: 'invalid value object',\n        element: rval\n      });\n    }\n\n    var values = rval['@value'] === null ? [] : _asArray(rval['@value']);\n\n    var types = _getValues(rval, '@type'); // drop null @values unless custom mapped\n\n\n    if (values.length === 0) {\n      // TODO: use `await` to support async\n      var _mapped = expansionMap({\n        unmappedValue: rval,\n        activeCtx: activeCtx,\n        activeProperty: activeProperty,\n        element: element,\n        options: options,\n        insideList: insideList\n      });\n\n      if (_mapped !== undefined) {\n        rval = _mapped;\n      } else {\n        rval = null;\n      }\n    } else if (!values.every(function (v) {\n      return _isString(v) || _isEmptyObject(v);\n    }) && '@language' in rval) {\n      // if @language is present, @value must be a string\n      throw new JsonLdError('Invalid JSON-LD syntax; only strings may be language-tagged.', 'jsonld.SyntaxError', {\n        code: 'invalid language-tagged value',\n        element: rval\n      });\n    } else if (!types.every(function (t) {\n      return _isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) || _isEmptyObject(t);\n    })) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an element containing \"@value\" and \"@type\" ' + 'must have an absolute IRI for the value of \"@type\".', 'jsonld.SyntaxError', {\n        code: 'invalid typed value',\n        element: rval\n      });\n    }\n  } else if ('@type' in rval && !_isArray(rval['@type'])) {\n    // convert @type to an array\n    rval['@type'] = [rval['@type']];\n  } else if ('@set' in rval || '@list' in rval) {\n    // handle @set and @list\n    if (count > 1 && !(count === 2 && '@index' in rval)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; if an element has the property \"@set\" ' + 'or \"@list\", then it can have at most one other property that is ' + '\"@index\".', 'jsonld.SyntaxError', {\n        code: 'invalid set or list object',\n        element: rval\n      });\n    } // optimize away @set\n\n\n    if ('@set' in rval) {\n      rval = rval['@set'];\n      keys = Object.keys(rval);\n      count = keys.length;\n    }\n  } else if (count === 1 && '@language' in rval) {\n    // drop objects with only @language unless custom mapped\n    // TODO: use `await` to support async\n    var _mapped2 = expansionMap(rval, {\n      unmappedValue: rval,\n      activeCtx: activeCtx,\n      activeProperty: activeProperty,\n      element: element,\n      options: options,\n      insideList: insideList\n    });\n\n    if (_mapped2 !== undefined) {\n      rval = _mapped2;\n    } else {\n      rval = null;\n    }\n  } // drop certain top-level objects that do not occur in lists, unless custom\n  // mapped\n\n\n  if (_isObject(rval) && !options.keepFreeFloatingNodes && !insideList && (activeProperty === null || expandedActiveProperty === '@graph')) {\n    // drop empty object, top-level @value/@list, or object with only @id\n    if (count === 0 || '@value' in rval || '@list' in rval || count === 1 && '@id' in rval) {\n      // TODO: use `await` to support async\n      var _mapped3 = expansionMap({\n        unmappedValue: rval,\n        activeCtx: activeCtx,\n        activeProperty: activeProperty,\n        element: element,\n        options: options,\n        insideList: insideList\n      });\n\n      if (_mapped3 !== undefined) {\n        rval = _mapped3;\n      } else {\n        rval = null;\n      }\n    }\n  }\n\n  return rval;\n};\n/**\n * Expand each key and value of element adding to result\n *\n * @param activeCtx the context to use.\n * @param activeProperty the property for the element.\n * @param expandedActiveProperty the expansion of activeProperty\n * @param element the element to expand.\n * @param expandedParent the expanded result into which to add values.\n * @param options the expansion options.\n * @param insideList true if the element is a list, false if not.\n * @param expansionMap(info) a function that can be used to custom map\n *          unmappable values (or to throw an error when they are detected);\n *          if this function returns `undefined` then the default behavior\n *          will be used.\n */\n\n\nfunction _expandObject(_ref2) {\n  var activeCtx = _ref2.activeCtx,\n      activeProperty = _ref2.activeProperty,\n      expandedActiveProperty = _ref2.expandedActiveProperty,\n      element = _ref2.element,\n      expandedParent = _ref2.expandedParent,\n      _ref2$options = _ref2.options,\n      options = _ref2$options === void 0 ? {} : _ref2$options,\n      insideList = _ref2.insideList,\n      expansionMap = _ref2.expansionMap;\n  var keys = Object.keys(element).sort();\n  var nests = [];\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var key = _step4.value;\n      var value = element[key];\n      var expandedValue = void 0; // skip @context\n\n      if (key === '@context') {\n        continue;\n      } // expand property\n\n\n      var expandedProperty = _expandIri(activeCtx, key, {\n        vocab: true\n      }, options); // drop non-absolute IRI keys that aren't keywords unless custom mapped\n\n\n      if (expandedProperty === null || !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {\n        // TODO: use `await` to support async\n        expandedProperty = expansionMap({\n          unmappedProperty: key,\n          activeCtx: activeCtx,\n          activeProperty: activeProperty,\n          parent: element,\n          options: options,\n          insideList: insideList,\n          value: value,\n          expandedParent: expandedParent\n        });\n\n        if (expandedProperty === undefined) {\n          continue;\n        }\n      }\n\n      if (_isKeyword(expandedProperty)) {\n        if (expandedActiveProperty === '@reverse') {\n          throw new JsonLdError('Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' + 'property.', 'jsonld.SyntaxError', {\n            code: 'invalid reverse property map',\n            value: value\n          });\n        }\n\n        if (expandedProperty in expandedParent) {\n          throw new JsonLdError('Invalid JSON-LD syntax; colliding keywords detected.', 'jsonld.SyntaxError', {\n            code: 'colliding keywords',\n            keyword: expandedProperty\n          });\n        }\n      } // syntax error if @id is not a string\n\n\n      if (expandedProperty === '@id') {\n        if (!_isString(value)) {\n          if (!options.isFrame) {\n            throw new JsonLdError('Invalid JSON-LD syntax; \"@id\" value must a string.', 'jsonld.SyntaxError', {\n              code: 'invalid @id value',\n              value: value\n            });\n          }\n\n          if (_isObject(value)) {\n            // empty object is a wildcard\n            if (!_isEmptyObject(value)) {\n              throw new JsonLdError('Invalid JSON-LD syntax; \"@id\" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {\n                code: 'invalid @id value',\n                value: value\n              });\n            }\n          } else if (_isArray(value)) {\n            if (!value.every(function (v) {\n              return _isString(v);\n            })) {\n              throw new JsonLdError('Invalid JSON-LD syntax; \"@id\" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {\n                code: 'invalid @id value',\n                value: value\n              });\n            }\n          } else {\n            throw new JsonLdError('Invalid JSON-LD syntax; \"@id\" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {\n              code: 'invalid @id value',\n              value: value\n            });\n          }\n        }\n\n        _addValue(expandedParent, '@id', _asArray(value).map(function (v) {\n          return _isString(v) ? _expandIri(activeCtx, v, {\n            base: true\n          }, options) : v;\n        }), {\n          propertyIsArray: options.isFrame\n        });\n\n        continue;\n      }\n\n      if (expandedProperty === '@type') {\n        _validateTypeValue(value);\n\n        _addValue(expandedParent, '@type', _asArray(value).map(function (v) {\n          return _isString(v) ? _expandIri(activeCtx.previousContext || activeCtx, v, {\n            base: true,\n            vocab: true\n          }, options) : v;\n        }), {\n          propertyIsArray: options.isFrame\n        });\n\n        continue;\n      } // @graph must be an array or an object\n\n\n      if (expandedProperty === '@graph' && !(_isObject(value) || _isArray(value))) {\n        throw new JsonLdError('Invalid JSON-LD syntax; \"@graph\" value must not be an ' + 'object or an array.', 'jsonld.SyntaxError', {\n          code: 'invalid @graph value',\n          value: value\n        });\n      } // @value must not be an object or an array (unless framing)\n\n\n      if (expandedProperty === '@value') {\n        if ((_isObject(value) || _isArray(value)) && !options.isFrame) {\n          throw new JsonLdError('Invalid JSON-LD syntax; \"@value\" value must not be an ' + 'object or an array.', 'jsonld.SyntaxError', {\n            code: 'invalid value object value',\n            value: value\n          });\n        }\n\n        _addValue(expandedParent, '@value', value, {\n          propertyIsArray: options.isFrame\n        });\n\n        continue;\n      } // @language must be a string\n\n\n      if (expandedProperty === '@language') {\n        if (value === null) {\n          // drop null @language values, they expand as if they didn't exist\n          continue;\n        }\n\n        if (!_isString(value) && !options.isFrame) {\n          throw new JsonLdError('Invalid JSON-LD syntax; \"@language\" value must be a string.', 'jsonld.SyntaxError', {\n            code: 'invalid language-tagged string',\n            value: value\n          });\n        } // ensure language value is lowercase\n\n\n        value = _asArray(value).map(function (v) {\n          return _isString(v) ? v.toLowerCase() : v;\n        });\n\n        _addValue(expandedParent, '@language', value, {\n          propertyIsArray: options.isFrame\n        });\n\n        continue;\n      } // @index must be a string\n\n\n      if (expandedProperty === '@index') {\n        if (!_isString(value)) {\n          throw new JsonLdError('Invalid JSON-LD syntax; \"@index\" value must be a string.', 'jsonld.SyntaxError', {\n            code: 'invalid @index value',\n            value: value\n          });\n        }\n\n        _addValue(expandedParent, '@index', value);\n\n        continue;\n      } // @reverse must be an object\n\n\n      if (expandedProperty === '@reverse') {\n        if (!_isObject(value)) {\n          throw new JsonLdError('Invalid JSON-LD syntax; \"@reverse\" value must be an object.', 'jsonld.SyntaxError', {\n            code: 'invalid @reverse value',\n            value: value\n          });\n        }\n\n        expandedValue = api.expand({\n          activeCtx: activeCtx,\n          activeProperty: '@reverse',\n          element: value,\n          options: options,\n          expansionMap: expansionMap\n        }); // properties double-reversed\n\n        if ('@reverse' in expandedValue) {\n          for (var property in expandedValue['@reverse']) {\n            _addValue(expandedParent, property, expandedValue['@reverse'][property], {\n              propertyIsArray: true\n            });\n          }\n        } // FIXME: can this be merged with code below to simplify?\n        // merge in all reversed properties\n\n\n        var reverseMap = expandedParent['@reverse'] || null;\n\n        for (var _property in expandedValue) {\n          if (_property === '@reverse') {\n            continue;\n          }\n\n          if (reverseMap === null) {\n            reverseMap = expandedParent['@reverse'] = {};\n          }\n\n          _addValue(reverseMap, _property, [], {\n            propertyIsArray: true\n          });\n\n          var items = expandedValue[_property];\n\n          for (var ii = 0; ii < items.length; ++ii) {\n            var item = items[ii];\n\n            if (_isValue(item) || _isList(item)) {\n              throw new JsonLdError('Invalid JSON-LD syntax; \"@reverse\" value must not be a ' + '@value or an @list.', 'jsonld.SyntaxError', {\n                code: 'invalid reverse property value',\n                value: expandedValue\n              });\n            }\n\n            _addValue(reverseMap, _property, item, {\n              propertyIsArray: true\n            });\n          }\n        }\n\n        continue;\n      } // nested keys\n\n\n      if (expandedProperty === '@nest') {\n        nests.push(key);\n        continue;\n      } // use potential scoped context for key\n\n\n      var termCtx = activeCtx;\n\n      var ctx = _getContextValue(activeCtx, key, '@context');\n\n      if (!_isUndefined(ctx)) {\n        // Note: spec's `from term` var is named `isPropertyTermScopedContext`\n        termCtx = _processContext({\n          activeCtx: activeCtx,\n          localCtx: ctx,\n          isPropertyTermScopedContext: true,\n          options: options\n        });\n      }\n\n      var container = _getContextValue(termCtx, key, '@container') || [];\n\n      if (container.includes('@language') && _isObject(value)) {\n        // handle language map container (skip if value is not an object)\n        expandedValue = _expandLanguageMap(termCtx, value, options);\n      } else if (container.includes('@index') && _isObject(value)) {\n        // handle index container (skip if value is not an object)\n        var asGraph = container.includes('@graph');\n        expandedValue = _expandIndexMap({\n          activeCtx: termCtx,\n          options: options,\n          activeProperty: key,\n          value: value,\n          expansionMap: expansionMap,\n          asGraph: asGraph,\n          indexKey: '@index'\n        });\n      } else if (container.includes('@id') && _isObject(value)) {\n        // handle id container (skip if value is not an object)\n        var _asGraph = container.includes('@graph');\n\n        expandedValue = _expandIndexMap({\n          activeCtx: termCtx,\n          options: options,\n          activeProperty: key,\n          value: value,\n          expansionMap: expansionMap,\n          asGraph: _asGraph,\n          indexKey: '@id'\n        });\n      } else if (container.includes('@type') && _isObject(value)) {\n        // handle type container (skip if value is not an object)\n        expandedValue = _expandIndexMap({\n          // since container is `@type`, revert type scoped context when expanding\n          activeCtx: termCtx.revertTypeScopedContext(),\n          options: options,\n          activeProperty: key,\n          value: value,\n          expansionMap: expansionMap,\n          asGraph: false,\n          indexKey: '@type'\n        });\n      } else {\n        // recurse into @list or @set\n        var isList = expandedProperty === '@list';\n\n        if (isList || expandedProperty === '@set') {\n          var nextActiveProperty = activeProperty;\n\n          if (isList && expandedActiveProperty === '@graph') {\n            nextActiveProperty = null;\n          }\n\n          expandedValue = api.expand({\n            activeCtx: termCtx,\n            activeProperty: nextActiveProperty,\n            element: value,\n            options: options,\n            insideList: isList,\n            expansionMap: expansionMap\n          });\n        } else {\n          // recursively expand value with key as new active property\n          expandedValue = api.expand({\n            activeCtx: termCtx,\n            activeProperty: key,\n            element: value,\n            options: options,\n            insideList: false,\n            expansionMap: expansionMap\n          });\n        }\n      } // drop null values if property is not @value\n\n\n      if (expandedValue === null && expandedProperty !== '@value') {\n        // TODO: use `await` to support async\n        expandedValue = expansionMap({\n          unmappedValue: value,\n          expandedProperty: expandedProperty,\n          activeCtx: termCtx,\n          activeProperty: activeProperty,\n          parent: element,\n          options: options,\n          insideList: insideList,\n          key: key,\n          expandedParent: expandedParent\n        });\n\n        if (expandedValue === undefined) {\n          continue;\n        }\n      } // convert expanded value to @list if container specifies it\n\n\n      if (expandedProperty !== '@list' && !_isList(expandedValue) && container.includes('@list')) {\n        // ensure expanded value in @list is an array\n        expandedValue = {\n          '@list': _asArray(expandedValue)\n        };\n      } // convert expanded value to @graph if container specifies it\n      // and value is not, itself, a graph\n      // index cases handled above\n\n\n      if (container.includes('@graph') && !container.some(function (key) {\n        return key === '@id' || key === '@index';\n      })) {\n        // ensure expanded values are arrays\n        expandedValue = _asArray(expandedValue).map(function (v) {\n          return _isGraph(v) ? v : {\n            '@graph': _asArray(v)\n          };\n        });\n      } // FIXME: can this be merged with code above to simplify?\n      // merge in reverse properties\n\n\n      if (termCtx.mappings.has(key) && termCtx.mappings.get(key).reverse) {\n        var _reverseMap = expandedParent['@reverse'] = expandedParent['@reverse'] || {};\n\n        expandedValue = _asArray(expandedValue);\n\n        for (var _ii = 0; _ii < expandedValue.length; ++_ii) {\n          var _item = expandedValue[_ii];\n\n          if (_isValue(_item) || _isList(_item)) {\n            throw new JsonLdError('Invalid JSON-LD syntax; \"@reverse\" value must not be a ' + '@value or an @list.', 'jsonld.SyntaxError', {\n              code: 'invalid reverse property value',\n              value: expandedValue\n            });\n          }\n\n          _addValue(_reverseMap, expandedProperty, _item, {\n            propertyIsArray: true\n          });\n        }\n\n        continue;\n      } // add value for property\n      // use an array except for certain keywords\n\n\n      var useArray = !['@index', '@id', '@type', '@value', '@language'].includes(expandedProperty);\n\n      _addValue(expandedParent, expandedProperty, expandedValue, {\n        propertyIsArray: useArray\n      });\n    } // expand each nested key\n\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  for (var _i = 0, _nests = nests; _i < _nests.length; _i++) {\n    var _key2 = _nests[_i];\n    var nestedValues = _isArray(element[_key2]) ? element[_key2] : [element[_key2]];\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n      for (var _iterator5 = nestedValues[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n        var nv = _step5.value;\n\n        if (!_isObject(nv) || Object.keys(nv).some(function (k) {\n          return _expandIri(activeCtx, k, {\n            vocab: true\n          }, options) === '@value';\n        })) {\n          throw new JsonLdError('Invalid JSON-LD syntax; nested value must be a node object.', 'jsonld.SyntaxError', {\n            code: 'invalid @nest value',\n            value: nv\n          });\n        }\n\n        _expandObject({\n          activeCtx: activeCtx,\n          activeProperty: activeProperty,\n          expandedActiveProperty: expandedActiveProperty,\n          element: nv,\n          expandedParent: expandedParent,\n          options: options,\n          insideList: insideList,\n          expansionMap: expansionMap\n        });\n      }\n    } catch (err) {\n      _didIteratorError5 = true;\n      _iteratorError5 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n          _iterator5.return();\n        }\n      } finally {\n        if (_didIteratorError5) {\n          throw _iteratorError5;\n        }\n      }\n    }\n  }\n}\n/**\n * Expands the given value by using the coercion and keyword rules in the\n * given context.\n *\n * @param activeCtx the active context to use.\n * @param activeProperty the active property the value is associated with.\n * @param value the value to expand.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\n\n\nfunction _expandValue(_ref3) {\n  var activeCtx = _ref3.activeCtx,\n      activeProperty = _ref3.activeProperty,\n      value = _ref3.value,\n      options = _ref3.options;\n\n  // nothing to expand\n  if (value === null || value === undefined) {\n    return null;\n  } // special-case expand @id and @type (skips '@id' expansion)\n\n\n  var expandedProperty = _expandIri(activeCtx, activeProperty, {\n    vocab: true\n  }, options);\n\n  if (expandedProperty === '@id') {\n    return _expandIri(activeCtx, value, {\n      base: true\n    }, options);\n  } else if (expandedProperty === '@type') {\n    return _expandIri(activeCtx, value, {\n      vocab: true,\n      base: true\n    }, options);\n  } // get type definition from context\n\n\n  var type = _getContextValue(activeCtx, activeProperty, '@type'); // do @id expansion (automatic for @graph)\n\n\n  if ((type === '@id' || expandedProperty === '@graph') && _isString(value)) {\n    return {\n      '@id': _expandIri(activeCtx, value, {\n        base: true\n      }, options)\n    };\n  } // do @id expansion w/vocab\n\n\n  if (type === '@vocab' && _isString(value)) {\n    return {\n      '@id': _expandIri(activeCtx, value, {\n        vocab: true,\n        base: true\n      }, options)\n    };\n  } // do not expand keyword values\n\n\n  if (_isKeyword(expandedProperty)) {\n    return value;\n  }\n\n  var rval = {};\n\n  if (type && !['@id', '@vocab'].includes(type)) {\n    // other type\n    rval['@type'] = type;\n  } else if (_isString(value)) {\n    // check for language tagging for strings\n    var language = _getContextValue(activeCtx, activeProperty, '@language');\n\n    if (language !== null) {\n      rval['@language'] = language;\n    }\n  } // do conversion of values that aren't basic JSON types to strings\n\n\n  if (!['boolean', 'number', 'string'].includes(typeof value)) {\n    value = value.toString();\n  }\n\n  rval['@value'] = value;\n  return rval;\n}\n/**\n * Expands a language map.\n *\n * @param activeCtx the active context to use.\n * @param languageMap the language map to expand.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded language map.\n */\n\n\nfunction _expandLanguageMap(activeCtx, languageMap, options) {\n  var rval = [];\n  var keys = Object.keys(languageMap).sort();\n  var _iteratorNormalCompletion6 = true;\n  var _didIteratorError6 = false;\n  var _iteratorError6 = undefined;\n\n  try {\n    for (var _iterator6 = keys[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n      var key = _step6.value;\n\n      var expandedKey = _expandIri(activeCtx, key, {\n        vocab: true\n      }, options);\n\n      var val = languageMap[key];\n\n      if (!_isArray(val)) {\n        val = [val];\n      }\n\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = val[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var item = _step7.value;\n\n          if (item === null) {\n            // null values are allowed (8.5) but ignored (3.1)\n            continue;\n          }\n\n          if (!_isString(item)) {\n            throw new JsonLdError('Invalid JSON-LD syntax; language map values must be strings.', 'jsonld.SyntaxError', {\n              code: 'invalid language map value',\n              languageMap: languageMap\n            });\n          }\n\n          var _val = {\n            '@value': item\n          };\n\n          if (expandedKey !== '@none') {\n            _val['@language'] = key.toLowerCase();\n          }\n\n          rval.push(_val);\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError6 = true;\n    _iteratorError6 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n        _iterator6.return();\n      }\n    } finally {\n      if (_didIteratorError6) {\n        throw _iteratorError6;\n      }\n    }\n  }\n\n  return rval;\n}\n\nfunction _expandIndexMap(_ref4) {\n  var activeCtx = _ref4.activeCtx,\n      options = _ref4.options,\n      activeProperty = _ref4.activeProperty,\n      value = _ref4.value,\n      expansionMap = _ref4.expansionMap,\n      asGraph = _ref4.asGraph,\n      indexKey = _ref4.indexKey;\n  var rval = [];\n  var keys = Object.keys(value).sort();\n  var isTypeIndex = indexKey === '@type';\n  var _iteratorNormalCompletion8 = true;\n  var _didIteratorError8 = false;\n  var _iteratorError8 = undefined;\n\n  try {\n    for (var _iterator8 = keys[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n      var key = _step8.value;\n\n      // if indexKey is @type, there may be a context defined for it\n      if (isTypeIndex) {\n        var ctx = _getContextValue(activeCtx, key, '@context');\n\n        if (!_isUndefined(ctx)) {\n          activeCtx = _processContext({\n            activeCtx: activeCtx,\n            localCtx: ctx,\n            isTypeScopedContext: true,\n            options: options\n          });\n        }\n      }\n\n      var val = value[key];\n\n      if (!_isArray(val)) {\n        val = [val];\n      } // expand for @type, but also for @none\n\n\n      var expandedKey = _expandIri(activeCtx, key, {\n        vocab: true\n      }, options);\n\n      if (indexKey === '@id') {\n        // expand document relative\n        key = _expandIri(activeCtx, key, {\n          base: true\n        }, options);\n      } else if (isTypeIndex) {\n        key = expandedKey;\n      }\n\n      val = api.expand({\n        activeCtx: activeCtx,\n        activeProperty: activeProperty,\n        element: val,\n        options: options,\n        insideList: false,\n        insideIndex: true,\n        expansionMap: expansionMap\n      });\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = val[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var item = _step9.value;\n\n          // If this is also a @graph container, turn items into graphs\n          if (asGraph && !_isGraph(item)) {\n            item = {\n              '@graph': [item]\n            };\n          }\n\n          if (indexKey === '@type') {\n            if (expandedKey === '@none') {// ignore @none\n            } else if (item['@type']) {\n              item['@type'] = [key].concat(item['@type']);\n            } else {\n              item['@type'] = [key];\n            }\n          } else if (expandedKey !== '@none' && !(indexKey in item)) {\n            item[indexKey] = key;\n          }\n\n          rval.push(item);\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError8 = true;\n    _iteratorError8 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n        _iterator8.return();\n      }\n    } finally {\n      if (_didIteratorError8) {\n        throw _iteratorError8;\n      }\n    }\n  }\n\n  return rval;\n}","map":null,"metadata":{},"sourceType":"script"}