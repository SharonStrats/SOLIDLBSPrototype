{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\src\\\\containers\\\\RestaurantSearch\\\\restaurantSearch.container.js\";\nimport React, { Fragment } from 'react';\nimport RestaurantSearchContent from \"./restaurantSearch.component\"; //import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { withToastManager } from 'react-toast-notifications';\nimport { useWebId } from '@inrupt/solid-react-components';\nimport { Header, RestaurantSearchContainer, RestaurantSearchWrapper } from \"./restaurantSearch.style\";\nimport * as $rdf from 'rdflib';\n\nvar loadFromUrl = function loadFromUrl(url, store) {\n  return new Promise(function (resolve, reject) {\n    var fetcher = new $rdf.Fetcher(store);\n\n    try {\n      fetcher.load(url).then(function (response) {\n        resolve(response.responseText);\n        console.log(response.responseText); // $rdf.parse(response.responseText, store, $rdf.sym(url).uri,\"application/rdf\");\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n}; // RG - 2019-02-28\n// Prepares a query by converting SPARQL into a Solid query\n\n\nvar prepare = function prepare(qryStr, store) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var query = $rdf.SPARQLToQuery(qryStr, false, store);\n      resolve(query);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}; // RG - 2019-02-28\n// Executes a query on the local store\n\n\nvar execute = function execute(qry, store) {\n  return new Promise(function (resolve, reject) {\n    // console.debug(\"here\");\n    var wanted = qry.vars;\n    var resultAry = [];\n    store.query(qry, function (results) {\n      // console.debug(\"here1\");\n      if (typeof results === \"undefined\") {\n        reject(\"No results.\");\n      } else {\n        var row = rowHandler(wanted, results); // console.debug(row);\n\n        if (row) resultAry.push(row);\n      }\n    }, {}, function () {\n      resolve(resultAry);\n    });\n  });\n}; // RG - 2019-02-28\n// Puts query results into an array according to the projection\n\n\nvar rowHandler = function rowHandler(wanted, results) {\n  var row = {};\n\n  for (var r in results) {\n    var found = false;\n    var got = r.replace(/^\\?/, \"\");\n\n    if (wanted.length) {\n      for (var w in wanted) {\n        if (got === wanted[w].label) {\n          found = true;\n          continue;\n        }\n      }\n\n      if (!found) continue;\n    }\n\n    row[got] = results[r].value;\n  }\n\n  return row;\n};\n\nfunction getData(_x) {\n  return _getData.apply(this, arguments);\n}\n/**\r\n * We are using ldflex to fetch profile data from a solid pod.\r\n * ldflex libary is using json-LD for this reason you will see async calls\r\n * when we want to get a field value, why ? becuase they are expanded the data\r\n * this means the result will have a better format to read on Javascript.\r\n * for more information please go to: https://github.com/solid/query-ldflex\r\n */\n\n\nfunction _getData() {\n  _getData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(CUPurl) {\n    var query, store, fetcher;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // loading new events\n            query = '';\n            store = $rdf.graph();\n            fetcher = new $rdf.Fetcher(store);\n            console.log(store);\n            console.log(fetcher);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getData.apply(this, arguments);\n}\n\nvar RestaurantSearch = function RestaurantSearch(_ref) {\n  var ToastManager = _ref.ToastManager;\n  //                       webId={this.props.webId}\n  var webId = useWebId();\n  console.log(webId); //console.log(props.city.toString())\n\n  if (webId !== undefined) {\n    //var CUPurl = webId.replace('profile/card#me', '') + 'private/events#';\n    var CUPurl = webId;\n  }\n\n  getData(CUPurl);\n  var image = '';\n  var isLoading = false;\n  var name = 'sharon';\n  var selectedDate = null;\n  return React.createElement(RestaurantSearchWrapper, {\n    \"data-testid\": \"restaurant-component\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(RestaurantSearchContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, webId && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(RestaurantSearchContent, {\n    city: \"Melbourne\",\n    state: \"Victoria\",\n    name: name,\n    image: image,\n    isLoading: isLoading,\n    selectedDate: selectedDate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))));\n};\n\nexport default withToastManager(RestaurantSearch);","map":{"version":3,"sources":["C:\\Users\\SoDiAl\\Documents\\WebDev2019\\SolidReactTest\\src\\containers\\RestaurantSearch\\restaurantSearch.container.js"],"names":["React","Fragment","RestaurantSearchContent","withToastManager","useWebId","Header","RestaurantSearchContainer","RestaurantSearchWrapper","$rdf","loadFromUrl","url","store","Promise","resolve","reject","fetcher","Fetcher","load","then","response","responseText","console","log","err","prepare","qryStr","query","SPARQLToQuery","execute","qry","wanted","vars","resultAry","results","row","rowHandler","push","r","found","got","replace","length","w","label","value","getData","CUPurl","graph","RestaurantSearch","ToastManager","webId","undefined","image","isLoading","name","selectedDate"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,uBAAP,qC,CACA;;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,SACIC,MADJ,EAEIC,yBAFJ,EAGIC,uBAHJ;AAKA,OAAO,KAAKC,IAAZ,MAAsB,QAAtB;;AAGA,IAAMC,WAAW,GAAI,SAAfA,WAAe,CAACC,GAAD,EAAMC,KAAN,EAAgB;AACnC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,OAAO,GAAG,IAAIP,IAAI,CAACQ,OAAT,CAAiBL,KAAjB,CAAd;;AACA,QAAI;AACFI,MAAAA,OAAO,CAACE,IAAR,CAAaP,GAAb,EAAkBQ,IAAlB,CAAuB,UAAAC,QAAQ,EAAI;AACjCN,QAAAA,OAAO,CAACM,QAAQ,CAACC,YAAV,CAAP;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,YAArB,EAFiC,CAGjC;AACD,OAJD;AAKD,KAND,CAME,OAAOG,GAAP,EAAY;AACZT,MAAAA,MAAM,CAACS,GAAD,CAAN;AACD;AACF,GAXM,CAAP;AAYD,CAbD,C,CAeA;AACA;;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAASd,KAAT,EAAmB;AACjC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI;AACF,UAAIY,KAAK,GAAGlB,IAAI,CAACmB,aAAL,CAAmBF,MAAnB,EAA2B,KAA3B,EAAkCd,KAAlC,CAAZ;AACAE,MAAAA,OAAO,CAACa,KAAD,CAAP;AACD,KAHD,CAGE,OAAOH,GAAP,EAAY;AACZT,MAAAA,MAAM,CAACS,GAAD,CAAN;AACD;AACF,GAPM,CAAP;AAQD,CATD,C,CAWA;AACA;;;AAEA,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMlB,KAAN,EAAgB;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,QAAMgB,MAAM,GAAGD,GAAG,CAACE,IAAnB;AACA,QAAMC,SAAS,GAAG,EAAlB;AACArB,IAAAA,KAAK,CAACe,KAAN,CACEG,GADF,EAEE,UAAAI,OAAO,EAAI;AACT;AACA,UAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AAClCnB,QAAAA,MAAM,CAAC,aAAD,CAAN;AACD,OAFD,MAEO;AACL,YAAIoB,GAAG,GAAGC,UAAU,CAACL,MAAD,EAASG,OAAT,CAApB,CADK,CAEL;;AACA,YAAIC,GAAJ,EAASF,SAAS,CAACI,IAAV,CAAeF,GAAf;AACV;AACF,KAXH,EAYE,EAZF,EAaE,YAAM;AACJrB,MAAAA,OAAO,CAACmB,SAAD,CAAP;AACD,KAfH;AAiBD,GArBM,CAAP;AAsBD,CAvBD,C,CAyBA;AACA;;;AAEA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACL,MAAD,EAASG,OAAT,EAAqB;AACtC,MAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIG,CAAT,IAAcJ,OAAd,EAAuB;AACrB,QAAIK,KAAK,GAAG,KAAZ;AACA,QAAIC,GAAG,GAAGF,CAAC,CAACG,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAAV;;AACA,QAAIV,MAAM,CAACW,MAAX,EAAmB;AACjB,WAAK,IAAIC,CAAT,IAAcZ,MAAd,EAAsB;AACpB,YAAIS,GAAG,KAAKT,MAAM,CAACY,CAAD,CAAN,CAAUC,KAAtB,EAA6B;AAC3BL,UAAAA,KAAK,GAAG,IAAR;AACA;AACD;AACF;;AACD,UAAI,CAACA,KAAL,EAAY;AACb;;AACDJ,IAAAA,GAAG,CAACK,GAAD,CAAH,GAAWN,OAAO,CAACI,CAAD,CAAP,CAAWO,KAAtB;AACD;;AACD,SAAOV,GAAP;AACD,CAjBD;;SAmBeW,O;;;AAUf;;;;;;;;;;;;2BAVA,iBAAuBC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AACIpB,YAAAA,KAFN,GAEc,EAFd;AAGMf,YAAAA,KAHN,GAGcH,IAAI,CAACuC,KAAL,EAHd;AAIMhC,YAAAA,OAJN,GAIgB,IAAIP,IAAI,CAACQ,OAAT,CAAiBL,KAAjB,CAJhB;AAKEU,YAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACAU,YAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBC,IAAMiC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAsB;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAE5C;AAEA,MAAMC,KAAK,GAAG9C,QAAQ,EAAtB;AACAiB,EAAAA,OAAO,CAACC,GAAR,CAAY4B,KAAZ,EAL4C,CAM5C;;AACA,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AACrB;AACA,QAAIL,MAAM,GAAGI,KAAb;AACH;;AACDL,EAAAA,OAAO,CAACC,MAAD,CAAP;AACA,MAAMM,KAAK,GAAG,EAAd;AACA,MAAMC,SAAS,GAAG,KAAlB;AACA,MAAMC,IAAI,GAAG,QAAb;AACA,MAAMC,YAAY,GAAG,IAArB;AACI,SACI,oBAAC,uBAAD;AAAyB,mBAAY,sBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,KAAK,IACF,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGA,oBAAC,uBAAD;AACI,IAAA,IAAI,EAAC,WADT;AAEI,IAAA,KAAK,EAAC,UAFV;AAGI,IAAA,IAAI,EAAEI,IAHV;AAII,IAAA,KAAK,EAAEF,KAJX;AAKI,IAAA,SAAS,EAAEC,SALf;AAMI,IAAA,YAAY,EAAEE,YANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CAFR,CADJ,CADJ;AAsBP,CAtCA;;AAwCD,eAAepD,gBAAgB,CAAC6C,gBAAD,CAA/B","sourcesContent":["import React, { Fragment } from 'react';\r\nimport RestaurantSearchContent from './restaurantSearch.component';\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { withToastManager } from 'react-toast-notifications';\r\nimport { useWebId } from '@inrupt/solid-react-components';\r\nimport {\r\n    Header,\r\n    RestaurantSearchContainer,\r\n    RestaurantSearchWrapper\r\n} from './restaurantSearch.style';\r\nimport * as $rdf from 'rdflib';\r\n\r\n\r\nconst loadFromUrl =  (url, store) => {\r\n  return new Promise((resolve, reject) => {\r\n    let fetcher = new $rdf.Fetcher(store);\r\n    try {\r\n      fetcher.load(url).then(response => {\r\n        resolve(response.responseText);\r\n        console.log(response.responseText);\r\n        // $rdf.parse(response.responseText, store, $rdf.sym(url).uri,\"application/rdf\");\r\n      });\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n  });\r\n}; \r\n\r\n// RG - 2019-02-28\r\n// Prepares a query by converting SPARQL into a Solid query\r\n\r\nconst prepare = (qryStr, store) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      let query = $rdf.SPARQLToQuery(qryStr, false, store);\r\n      resolve(query);\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n  });\r\n};\r\n\r\n// RG - 2019-02-28\r\n// Executes a query on the local store\r\n\r\nconst execute = (qry, store) => {\r\n  return new Promise((resolve, reject) => {\r\n    // console.debug(\"here\");\r\n    const wanted = qry.vars;\r\n    const resultAry = [];\r\n    store.query(\r\n      qry,\r\n      results => {\r\n        // console.debug(\"here1\");\r\n        if (typeof results === \"undefined\") {\r\n          reject(\"No results.\");\r\n        } else {\r\n          let row = rowHandler(wanted, results);\r\n          // console.debug(row);\r\n          if (row) resultAry.push(row);\r\n        }\r\n      },\r\n      {},\r\n      () => {\r\n        resolve(resultAry);\r\n      }\r\n    );\r\n  });\r\n}; \r\n\r\n// RG - 2019-02-28\r\n// Puts query results into an array according to the projection\r\n \r\nconst rowHandler = (wanted, results) => {\r\n  const row = {};\r\n  for (var r in results) {\r\n    let found = false;\r\n    let got = r.replace(/^\\?/, \"\");\r\n    if (wanted.length) {\r\n      for (var w in wanted) {\r\n        if (got === wanted[w].label) {\r\n          found = true;\r\n          continue;\r\n        }\r\n      }\r\n      if (!found) continue;\r\n    }\r\n    row[got] = results[r].value;\r\n  }\r\n  return row;\r\n}; \r\n\r\nasync function getData(CUPurl) {\r\n  // loading new events\r\n  let query = '';\r\n  let store = $rdf.graph();\r\n  let fetcher = new $rdf.Fetcher(store);\r\n  console.log(store);\r\n  console.log(fetcher);\r\n} \r\n\r\n\r\n/**\r\n * We are using ldflex to fetch profile data from a solid pod.\r\n * ldflex libary is using json-LD for this reason you will see async calls\r\n * when we want to get a field value, why ? becuase they are expanded the data\r\n * this means the result will have a better format to read on Javascript.\r\n * for more information please go to: https://github.com/solid/query-ldflex\r\n */\r\n const RestaurantSearch = ({ ToastManager }) => {\r\n   \r\n    //                       webId={this.props.webId}\r\n   \r\n    const webId = useWebId();\r\n    console.log(webId);\r\n    //console.log(props.city.toString())\r\n    if (webId !== undefined) {\r\n        //var CUPurl = webId.replace('profile/card#me', '') + 'private/events#';\r\n        var CUPurl = webId;\r\n    }\r\n    getData(CUPurl);\r\n    const image = '';\r\n    const isLoading = false;\r\n    const name = 'sharon';\r\n    const selectedDate = null;\r\n        return (\r\n            <RestaurantSearchWrapper data-testid=\"restaurant-component\">\r\n                <RestaurantSearchContainer>\r\n                    {webId && (\r\n                        <Fragment>\r\n                            <Header>\r\n                            </Header>\r\n                        <RestaurantSearchContent\r\n                            city=\"Melbourne\"\r\n                            state=\"Victoria\"\r\n                            name={name}\r\n                            image={image}\r\n                            isLoading={isLoading}\r\n                            selectedDate={selectedDate}\r\n                        />\r\n                        </Fragment>\r\n\r\n                    )}\r\n                </RestaurantSearchContainer>\r\n            </RestaurantSearchWrapper>\r\n        );\r\n    \r\n};\r\n\r\nexport default withToastManager(RestaurantSearch);\r\n"]},"metadata":{},"sourceType":"module"}