{"ast":null,"code":"'use strict';\n\nimport BlankNode from './blank-node';\nimport Collection from './collection';\nimport DefaultGraph from './default-graph';\nimport Fetcher from './fetcher';\nimport IndexedFormula from './store';\nimport Literal from './literal';\nimport NamedNode from './named-node';\nimport Statement from './statement';\nimport Variable from './variable';\nvar DataFactory = {\n  blankNode: blankNode,\n  defaultGraph: defaultGraph,\n  fetcher: fetcher,\n  graph: graph,\n  lit: lit,\n  literal: literal,\n  namedNode: namedNode,\n  quad: quad,\n  st: st,\n  triple: triple,\n  variable: variable\n};\nexport default DataFactory;\n\nfunction blankNode(value) {\n  return new BlankNode(value);\n}\n\nfunction collection(elements) {\n  return new Collection(elements);\n}\n\nfunction defaultGraph() {\n  return new DefaultGraph();\n}\n\nfunction fetcher(store, options) {\n  return new Fetcher(store, options);\n}\n\nfunction graph() {\n  return new IndexedFormula();\n}\n\nfunction lit(val, lang, dt) {\n  return new Literal('' + val, lang, dt);\n}\n\nfunction literal(value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype);\n    } else {\n      return new Literal(value, null, namedNode(languageOrDatatype));\n    }\n  } else {\n    return new Literal(value, null, languageOrDatatype);\n  }\n}\n\nfunction namedNode(value) {\n  return new NamedNode(value);\n}\n\nfunction quad(subject, predicate, object, graph) {\n  graph = graph || new DefaultGraph();\n  return new Statement(subject, predicate, object, graph);\n}\n\nfunction st(subject, predicate, object, graph) {\n  return new Statement(subject, predicate, object, graph);\n}\n\nfunction triple(subject, predicate, object) {\n  return quad(subject, predicate, object);\n}\n\nfunction variable(name) {\n  return new Variable(name);\n}","map":null,"metadata":{},"sourceType":"module"}