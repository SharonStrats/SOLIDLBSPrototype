{"ast":null,"code":"import * as convert from './convert';\nimport Serializer from './serializer';\n/**\n * Serialize to the appropriate format\n * @@ Currently NQuads and JSON/LD are deal with extrelemently inefficiently\n * through mutiple conversions.\n */\n\nexport default function serialize(target, kb, base, contentType, callback, options) {\n  base = base || target.uri;\n  options = options || {};\n  contentType = contentType || 'text/turtle'; // text/n3 if complex?\n\n  var documentString = null;\n\n  try {\n    var sz = Serializer(kb);\n    if (options.flags) sz.setFlags(options.flags);\n    var newSts = kb.statementsMatching(undefined, undefined, undefined, target);\n    var n3String;\n    sz.suggestNamespaces(kb.namespaces);\n    sz.setBase(base);\n\n    switch (contentType) {\n      case 'application/rdf+xml':\n        documentString = sz.statementsToXML(newSts);\n        return executeCallback(null, documentString);\n\n      case 'text/n3':\n      case 'application/n3':\n        // Legacy\n        documentString = sz.statementsToN3(newSts);\n        return executeCallback(null, documentString);\n\n      case 'text/turtle':\n      case 'application/x-turtle':\n        // Legacy\n        sz.setFlags('si'); // Suppress = for sameAs and => for implies\n\n        documentString = sz.statementsToN3(newSts);\n        return executeCallback(null, documentString);\n\n      case 'application/n-triples':\n        sz.setFlags('deinprstux'); // Suppress nice parts of N3 to make ntriples\n\n        documentString = sz.statementsToNTriples(newSts);\n        return executeCallback(null, documentString);\n\n      case 'application/ld+json':\n        sz.setFlags('deinprstux'); // Use adapters to connect to incmpatible parser\n\n        n3String = sz.statementsToNTriples(newSts); // n3String = sz.statementsToN3(newSts)\n\n        convert.convertToJson(n3String, callback);\n        break;\n\n      case 'application/n-quads':\n      case 'application/nquads':\n        // @@@ just outpout the quads? Does not work for collections\n        sz.setFlags('deinprstux q'); // Suppress nice parts of N3 to make ntriples\n\n        documentString = sz.statementsToNTriples(newSts); // q in flag means actually quads\n\n        return executeCallback(null, documentString); // n3String = sz.statementsToN3(newSts)\n        // documentString = convert.convertToNQuads(n3String, callback)\n\n        break;\n\n      default:\n        throw new Error('Serialize: Content-type ' + contentType + ' not supported for data write.');\n    }\n  } catch (err) {\n    if (callback) {\n      return callback(err);\n    }\n\n    throw err; // Don't hide problems from caller in sync mode\n  }\n\n  function executeCallback(err, result) {\n    if (callback) {\n      callback(err, result);\n      return;\n    } else {\n      return result;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}