{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nvar xsd = namespaces.xsd;\nvar fromCharCode = String.fromCharCode; // Regular expression and replacement string to escape N3 strings.\n// Note how we catch invalid unicode sequences separately (they will trigger an error).\n\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n  '\\\\': '\\\\',\n  \"'\": \"'\",\n  '\"': '\"',\n  'n': '\\n',\n  'r': '\\r',\n  't': '\\t',\n  'f': '\\f',\n  'b': '\\b',\n  '_': '_',\n  '~': '~',\n  '.': '.',\n  '-': '-',\n  '!': '!',\n  '$': '$',\n  '&': '&',\n  '(': '(',\n  ')': ')',\n  '*': '*',\n  '+': '+',\n  ',': ',',\n  ';': ';',\n  '=': '=',\n  '/': '/',\n  '?': '?',\n  '#': '#',\n  '@': '@',\n  '%': '%'\n};\nvar illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nvar lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _unescapedQuote: true,\n  _singleQuote: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true\n};\nvar invalidRegExp = /$0^/; // ## Constructor\n\nvar N3Lexer =\n/*#__PURE__*/\nfunction () {\n  function N3Lexer(options) {\n    _classCallCheck(this, N3Lexer);\n\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n\n    this._unescapedQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\n\n    this._unescapedApos = /^'([^'\\\\\\r\\n]+)'/;\n    this._singleQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\n    this._singleApos = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\n    this._tripleQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\n    this._tripleApos = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<]))/;\n    this._number = /^[\\-+]?(?:\\d+\\.?\\d*([eE](?:[\\-\\+])?\\d+)|\\d*\\.?\\d+)(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s()\\[\\]\\{\\}\"'<])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {}; // In line mode (N-Triples or N-Quads), only simple features may be parsed\n\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false; // Don't tokenize special literals\n\n      for (var key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp) this[key] = invalidRegExp;\n      }\n    } // When not in line mode, enable N3 functionality by default\n    else {\n        this._n3Mode = options.n3 !== false;\n      } // Don't output comment tokens by default\n\n\n    this._comments = !!options.comments;\n  } // ## Private methods\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n\n\n  _createClass(N3Lexer, [{\n    key: \"_tokenizeToEnd\",\n    value: function _tokenizeToEnd(callback, inputFinished) {\n      // Continue parsing as far as possible; the loop will return eventually\n      var input = this._input,\n          outputComments = this._comments;\n\n      while (true) {\n        // Count and skip whitespace lines\n        var whiteSpaceMatch, comment;\n\n        while (whiteSpaceMatch = this._newline.exec(input)) {\n          // Try to find a comment\n          if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0]))) callback(null, {\n            line: this._line,\n            type: 'comment',\n            value: comment[1],\n            prefix: ''\n          }); // Advance the input\n\n          input = input.substr(whiteSpaceMatch[0].length, input.length);\n          this._line++;\n        } // Skip whitespace on current line\n\n\n        if (whiteSpaceMatch = this._whitespace.exec(input)) input = input.substr(whiteSpaceMatch[0].length, input.length); // Stop for now if we're at the end\n\n        if (this._endOfFile.test(input)) {\n          // If the input is finished, emit EOF\n          if (inputFinished) {\n            // Try to find a final comment\n            if (outputComments && (comment = this._comment.exec(input))) callback(null, {\n              line: this._line,\n              type: 'comment',\n              value: comment[1],\n              prefix: ''\n            });\n            callback(input = null, {\n              line: this._line,\n              type: 'eof',\n              value: '',\n              prefix: ''\n            });\n          }\n\n          return this._input = input;\n        } // Look for specific token types based on the first character\n\n\n        var line = this._line,\n            type = '',\n            value = '',\n            prefix = '',\n            firstChar = input[0],\n            match = null,\n            matchLength = 0,\n            inconclusive = false;\n\n        switch (firstChar) {\n          case '^':\n            // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n            if (input.length < 3) break; // Try to match a type\n            else if (input[1] === '^') {\n                this._previousMarker = '^^'; // Move to type IRI or prefixed name\n\n                input = input.substr(2);\n\n                if (input[0] !== '<') {\n                  inconclusive = true;\n                  break;\n                }\n              } // If no type, it must be a path expression\n              else {\n                  if (this._n3Mode) {\n                    matchLength = 1;\n                    type = '^';\n                  }\n\n                  break;\n                }\n          // Fall through in case the type is an IRI\n\n          case '<':\n            // Try to find a full IRI without escape sequences\n            if (match = this._unescapedIri.exec(input)) type = 'IRI', value = match[1]; // Try to find a full IRI with escape sequences\n            else if (match = this._iri.exec(input)) {\n                value = this._unescape(match[1]);\n                if (value === null || illegalIriChars.test(value)) return reportSyntaxError(this);\n                type = 'IRI';\n              } // Try to find a backwards implication arrow\n              else if (this._n3Mode && input.length > 1 && input[1] === '=') type = 'inverse', matchLength = 2, value = '>';\n            break;\n\n          case '_':\n            // Try to find a blank node. Since it can contain (but not end with) a dot,\n            // we always need a non-dot character before deciding it is a blank node.\n            // Therefore, try inserting a space if we're at the end of the input.\n            if ((match = this._blank.exec(input)) || inputFinished && (match = this._blank.exec(input + ' '))) type = 'blank', prefix = '_', value = match[1];\n            break;\n\n          case '\"':\n            // Try to find a literal without escape sequences\n            if (match = this._unescapedQuote.exec(input)) value = match[1]; // Before attempting more complex string patterns, try to detect a closing quote\n            else if (input.indexOf('\"', 1) > 0) {\n                // Try to find any other literal wrapped in a pair of quotes\n                if (match = this._singleQuote.exec(input)) value = this._unescape(match[1]); // Try to find a literal wrapped in three pairs of quotes\n                else if (match = this._tripleQuote.exec(input)) {\n                    value = match[1]; // Advance line counter\n\n                    this._line += value.split(/\\r\\n|\\r|\\n/).length - 1;\n                    value = this._unescape(value);\n                  }\n                if (value === null) return reportSyntaxError(this);\n              }\n            if (match !== null) type = 'literal';\n            break;\n\n          case \"'\":\n            // Try to find a literal without escape sequences\n            if (match = this._unescapedApos.exec(input)) value = match[1]; // Before attempting more complex string patterns, try to detect a closing apostrophe\n            else if (input.indexOf(\"'\", 1) > 0) {\n                // Try to find any other literal wrapped in a pair of apostrophes\n                if (match = this._singleApos.exec(input)) value = this._unescape(match[1]); // Try to find a literal wrapped in three pairs of apostrophes\n                else if (match = this._tripleApos.exec(input)) {\n                    value = match[1]; // Advance line counter\n\n                    this._line += value.split(/\\r\\n|\\r|\\n/).length - 1;\n                    value = this._unescape(value);\n                  }\n                if (value === null) return reportSyntaxError(this);\n              }\n            if (match !== null) type = 'literal';\n            break;\n\n          case '?':\n            // Try to find a variable\n            if (this._n3Mode && (match = this._variable.exec(input))) type = 'var', value = match[0];\n            break;\n\n          case '@':\n            // Try to find a language code\n            if (this._previousMarker === 'literal' && (match = this._langcode.exec(input))) type = 'langcode', value = match[1]; // Try to find a keyword\n            else if (match = this._keyword.exec(input)) type = match[0];\n            break;\n\n          case '.':\n            // Try to find a dot as punctuation\n            if (input.length === 1 ? inputFinished : input[1] < '0' || input[1] > '9') {\n              type = '.';\n              matchLength = 1;\n              break;\n            }\n\n          // Fall through to numerical case (could be a decimal dot)\n\n          case '0':\n          case '1':\n          case '2':\n          case '3':\n          case '4':\n          case '5':\n          case '6':\n          case '7':\n          case '8':\n          case '9':\n          case '+':\n          case '-':\n            // Try to find a number. Since it can contain (but not end with) a dot,\n            // we always need a non-dot character before deciding it is a number.\n            // Therefore, try inserting a space if we're at the end of the input.\n            if (match = this._number.exec(input) || inputFinished && (match = this._number.exec(input + ' '))) {\n              type = 'literal', value = match[0];\n              prefix = match[1] ? xsd.double : /^[+\\-]?\\d+$/.test(match[0]) ? xsd.integer : xsd.decimal;\n            }\n\n            break;\n\n          case 'B':\n          case 'b':\n          case 'p':\n          case 'P':\n          case 'G':\n          case 'g':\n            // Try to find a SPARQL-style keyword\n            if (match = this._sparqlKeyword.exec(input)) type = match[0].toUpperCase();else inconclusive = true;\n            break;\n\n          case 'f':\n          case 't':\n            // Try to match a boolean\n            if (match = this._boolean.exec(input)) type = 'literal', value = match[0], prefix = xsd.boolean;else inconclusive = true;\n            break;\n\n          case 'a':\n            // Try to find an abbreviated predicate\n            if (match = this._shortPredicates.exec(input)) type = 'abbreviation', value = 'a';else inconclusive = true;\n            break;\n\n          case '=':\n            // Try to find an implication arrow or equals sign\n            if (this._n3Mode && input.length > 1) {\n              type = 'abbreviation';\n              if (input[1] !== '>') matchLength = 1, value = '=';else matchLength = 2, value = '>';\n            }\n\n            break;\n\n          case '!':\n            if (!this._n3Mode) break;\n\n          case ',':\n          case ';':\n          case '[':\n          case ']':\n          case '(':\n          case ')':\n          case '{':\n          case '}':\n            if (!this._lineMode) {\n              matchLength = 1;\n              type = firstChar;\n            }\n\n            break;\n\n          default:\n            inconclusive = true;\n        } // Some first characters do not allow an immediate decision, so inspect more\n\n\n        if (inconclusive) {\n          // Try to find a prefix\n          if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') && (match = this._prefix.exec(input))) type = 'prefix', value = match[1] || ''; // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n          // we always need a non-dot character before deciding it is a prefixed name.\n          // Therefore, try inserting a space if we're at the end of the input.\n          else if ((match = this._prefixed.exec(input)) || inputFinished && (match = this._prefixed.exec(input + ' '))) type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n        } // A type token is special: it can only be emitted after an IRI or prefixed name is read\n\n\n        if (this._previousMarker === '^^') {\n          switch (type) {\n            case 'prefixed':\n              type = 'type';\n              break;\n\n            case 'IRI':\n              type = 'typeIRI';\n              break;\n\n            default:\n              type = '';\n          }\n        } // What if nothing of the above was found?\n\n\n        if (!type) {\n          // We could be in streaming mode, and then we just wait for more input to arrive.\n          // Otherwise, a syntax error has occurred in the input.\n          // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n          if (inputFinished || !/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)) return reportSyntaxError(this);else return this._input = input;\n        } // Emit the parsed token\n\n\n        var token = {\n          line: line,\n          type: type,\n          value: value,\n          prefix: prefix\n        };\n        callback(null, token);\n        this.previousToken = token;\n        this._previousMarker = type; // Advance to next part to tokenize\n\n        input = input.substr(matchLength || match[0].length, input.length);\n      } // Signals the syntax error through the callback\n\n\n      function reportSyntaxError(self) {\n        callback(self._syntaxError(/^\\S*/.exec(input)[0]));\n      }\n    } // ### `_unescape` replaces N3 escape codes by their corresponding characters\n\n  }, {\n    key: \"_unescape\",\n    value: function _unescape(item) {\n      try {\n        return item.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {\n          var charCode;\n\n          if (unicode4) {\n            charCode = parseInt(unicode4, 16);\n            if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n\n            return fromCharCode(charCode);\n          } else if (unicode8) {\n            charCode = parseInt(unicode8, 16);\n            if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n\n            if (charCode <= 0xFFFF) return fromCharCode(charCode);\n            return fromCharCode(0xD800 + (charCode -= 0x10000) / 0x400, 0xDC00 + (charCode & 0x3FF));\n          } else {\n            var replacement = escapeReplacements[escapedChar];\n            if (!replacement) throw new Error();\n            return replacement;\n          }\n        });\n      } catch (error) {\n        return null;\n      }\n    } // ### `_syntaxError` creates a syntax error for the given issue\n\n  }, {\n    key: \"_syntaxError\",\n    value: function _syntaxError(issue) {\n      this._input = null;\n      var err = new Error('Unexpected \"' + issue + '\" on line ' + this._line + '.');\n      err.context = {\n        token: undefined,\n        line: this._line,\n        previousToken: this.previousToken\n      };\n      return err;\n    } // ## Public methods\n    // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n    // The input can be a string or a stream.\n\n  }, {\n    key: \"tokenize\",\n    value: function tokenize(input, callback) {\n      var self = this;\n      this._line = 1; // If the input is a string, continuously emit tokens through the callback until the end\n\n      if (typeof input === 'string') {\n        this._input = input; // If a callback was passed, asynchronously call it\n\n        if (typeof callback === 'function') setImmediate(function () {\n          self._tokenizeToEnd(callback, true);\n        }); // If no callback was passed, tokenize synchronously and return\n        else {\n            var tokens = [],\n                error;\n\n            this._tokenizeToEnd(function (e, t) {\n              e ? error = e : tokens.push(t);\n            }, true);\n\n            if (error) throw error;\n            return tokens;\n          }\n      } // Otherwise, the input must be a stream\n      else {\n          this._input = '';\n          this._pendingBuffer = null;\n          if (typeof input.setEncoding === 'function') input.setEncoding('utf8'); // Adds the data chunk to the buffer and parses as far as possible\n\n          input.on('data', function (data) {\n            if (self._input !== null && data.length !== 0) {\n              // Prepend any previous pending writes\n              if (self._pendingBuffer) {\n                data = Buffer.concat([self._pendingBuffer, data]);\n                self._pendingBuffer = null;\n              } // Hold if the buffer ends in an incomplete unicode sequence\n\n\n              if (data[data.length - 1] & 0x80) {\n                self._pendingBuffer = data;\n              } // Otherwise, tokenize as far as possible\n              else {\n                  self._input += data;\n\n                  self._tokenizeToEnd(callback, false);\n                }\n            }\n          }); // Parses until the end\n\n          input.on('end', function () {\n            if (self._input !== null) self._tokenizeToEnd(callback, true);\n          });\n          input.on('error', callback);\n        }\n    }\n  }]);\n\n  return N3Lexer;\n}();\n\nexport { N3Lexer as default };","map":null,"metadata":{},"sourceType":"module"}