{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar punycode = require(\"punycode\");\n\nvar regexes = require(\"./lib/regexes.js\");\n\nvar mappingTable = require(\"./lib/mappingTable.json\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/.test(str);\n}\n\nfunction findStatus(val, _ref) {\n  var useSTD3ASCIIRules = _ref.useSTD3ASCIIRules;\n  var start = 0;\n  var end = mappingTable.length - 1;\n\n  while (start <= end) {\n    var mid = Math.floor((start + end) / 2);\n    var target = mappingTable[mid];\n\n    if (target[0][0] <= val && target[0][1] >= val) {\n      if (target[1].startsWith(\"disallowed_STD3_\")) {\n        var newStatus = useSTD3ASCIIRules ? \"disallowed\" : target[1].slice(16);\n        return [newStatus].concat(_toConsumableArray(target.slice(2)));\n      }\n\n      return target.slice(1);\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, _ref2) {\n  var useSTD3ASCIIRules = _ref2.useSTD3ASCIIRules,\n      processingOption = _ref2.processingOption;\n  var hasError = false;\n  var processed = \"\";\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = domainName[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var ch = _step.value;\n\n      var _findStatus = findStatus(ch.codePointAt(0), {\n        useSTD3ASCIIRules: useSTD3ASCIIRules\n      }),\n          _findStatus2 = _slicedToArray(_findStatus, 2),\n          status = _findStatus2[0],\n          mapping = _findStatus2[1];\n\n      switch (status) {\n        case \"disallowed\":\n          hasError = true;\n          processed += ch;\n          break;\n\n        case \"ignored\":\n          break;\n\n        case \"mapped\":\n          processed += mapping;\n          break;\n\n        case \"deviation\":\n          if (processingOption === \"transitional\") {\n            processed += mapping;\n          } else {\n            processed += ch;\n          }\n\n          break;\n\n        case \"valid\":\n          processed += ch;\n          break;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, _ref3) {\n  var checkHyphens = _ref3.checkHyphens,\n      checkBidi = _ref3.checkBidi,\n      checkJoiners = _ref3.checkJoiners,\n      processingOption = _ref3.processingOption,\n      useSTD3ASCIIRules = _ref3.useSTD3ASCIIRules;\n\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  var codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n\n  for (var _i = 0, _codePoints = codePoints; _i < _codePoints.length; _i++) {\n    var ch = _codePoints[_i];\n\n    var _findStatus3 = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules: useSTD3ASCIIRules\n    }),\n        _findStatus4 = _slicedToArray(_findStatus3, 1),\n        status = _findStatus4[0];\n\n    if (processingOption === \"transitional\" && status !== \"valid\" || processingOption === \"nontransitional\" && status !== \"valid\" && status !== \"deviation\") {\n      return false;\n    }\n  } // https://tools.ietf.org/html/rfc5892#appendix-A\n\n\n  if (checkJoiners) {\n    var last = 0;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = codePoints.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            i = _step2$value[0],\n            ch = _step2$value[1];\n\n        if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n          if (i > 0) {\n            if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n              continue;\n            }\n\n            if (ch === \"\\u200C\") {\n              // TODO: make this more efficient\n              var next = codePoints.indexOf(\"\\u200C\", i + 1);\n              var test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n\n              if (regexes.validZWNJ.test(test.join(\"\"))) {\n                last = i + 1;\n                continue;\n              }\n            }\n          }\n\n          return false;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  } // https://tools.ietf.org/html/rfc5893#section-2\n\n\n  if (checkBidi) {\n    var rtl; // 1\n\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n      // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  var domain = labels.map(function (label) {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  var processingOption = options.processingOption; // 1. Map.\n\n  var _mapChars = mapChars(domainName, options),\n      string = _mapChars.string,\n      error = _mapChars.error; // 2. Normalize.\n\n\n  string = string.normalize(\"NFC\"); // 3. Break.\n\n  var labels = string.split(\".\");\n  var isBidi = isBidiDomain(labels); // 4. Convert/Validate.\n\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = labels.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          i = _step3$value[0],\n          origLabel = _step3$value[1];\n\n      var label = origLabel;\n      var curProcessing = processingOption;\n\n      if (label.startsWith(\"xn--\")) {\n        try {\n          label = punycode.decode(label.substring(4));\n          labels[i] = label;\n        } catch (err) {\n          error = true;\n          continue;\n        }\n\n        curProcessing = \"nontransitional\";\n      } // No need to validate if we already know there is an error.\n\n\n      if (error) {\n        continue;\n      }\n\n      var validation = validateLabel(label, Object.assign({}, options, {\n        processingOption: curProcessing,\n        checkBidi: options.checkBidi && isBidi\n      }));\n\n      if (!validation) {\n        error = true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error: error\n  };\n}\n\nfunction toASCII(domainName) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$checkHyphens = _ref4.checkHyphens,\n      checkHyphens = _ref4$checkHyphens === void 0 ? false : _ref4$checkHyphens,\n      _ref4$checkBidi = _ref4.checkBidi,\n      checkBidi = _ref4$checkBidi === void 0 ? false : _ref4$checkBidi,\n      _ref4$checkJoiners = _ref4.checkJoiners,\n      checkJoiners = _ref4$checkJoiners === void 0 ? false : _ref4$checkJoiners,\n      _ref4$useSTD3ASCIIRul = _ref4.useSTD3ASCIIRules,\n      useSTD3ASCIIRules = _ref4$useSTD3ASCIIRul === void 0 ? false : _ref4$useSTD3ASCIIRul,\n      _ref4$processingOptio = _ref4.processingOption,\n      processingOption = _ref4$processingOptio === void 0 ? \"nontransitional\" : _ref4$processingOptio,\n      _ref4$verifyDNSLength = _ref4.verifyDNSLength,\n      verifyDNSLength = _ref4$verifyDNSLength === void 0 ? false : _ref4$verifyDNSLength;\n\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  var result = processing(domainName, {\n    processingOption: processingOption,\n    checkHyphens: checkHyphens,\n    checkBidi: checkBidi,\n    checkJoiners: checkJoiners,\n    useSTD3ASCIIRules: useSTD3ASCIIRules\n  });\n  var labels = result.string.split(\".\");\n  labels = labels.map(function (l) {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\" + punycode.encode(l);\n      } catch (e) {\n        result.error = true;\n      }\n    }\n\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    var total = labels.join(\".\").length;\n\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (var i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref5$checkHyphens = _ref5.checkHyphens,\n      checkHyphens = _ref5$checkHyphens === void 0 ? false : _ref5$checkHyphens,\n      _ref5$checkBidi = _ref5.checkBidi,\n      checkBidi = _ref5$checkBidi === void 0 ? false : _ref5$checkBidi,\n      _ref5$checkJoiners = _ref5.checkJoiners,\n      checkJoiners = _ref5$checkJoiners === void 0 ? false : _ref5$checkJoiners,\n      _ref5$useSTD3ASCIIRul = _ref5.useSTD3ASCIIRules,\n      useSTD3ASCIIRules = _ref5$useSTD3ASCIIRul === void 0 ? false : _ref5$useSTD3ASCIIRul;\n\n  var result = processing(domainName, {\n    processingOption: \"nontransitional\",\n    checkHyphens: checkHyphens,\n    checkBidi: checkBidi,\n    checkJoiners: checkJoiners,\n    useSTD3ASCIIRules: useSTD3ASCIIRules\n  });\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII: toASCII,\n  toUnicode: toUnicode\n};","map":null,"metadata":{},"sourceType":"script"}