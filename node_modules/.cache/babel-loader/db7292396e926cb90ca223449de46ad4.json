{"ast":null,"code":"'use strict';\n\nvar fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar NODE_VERSION_MAJOR_WITH_BIGINT = 10;\nvar NODE_VERSION_MINOR_WITH_BIGINT = 5;\nvar NODE_VERSION_PATCH_WITH_BIGINT = 0;\nvar nodeVersion = process.versions.node.split('.');\nvar nodeVersionMajor = Number.parseInt(nodeVersion[0], 10);\nvar nodeVersionMinor = Number.parseInt(nodeVersion[1], 10);\nvar nodeVersionPatch = Number.parseInt(nodeVersion[2], 10);\n\nfunction nodeSupportsBigInt() {\n  if (nodeVersionMajor > NODE_VERSION_MAJOR_WITH_BIGINT) {\n    return true;\n  } else if (nodeVersionMajor === NODE_VERSION_MAJOR_WITH_BIGINT) {\n    if (nodeVersionMinor > NODE_VERSION_MINOR_WITH_BIGINT) {\n      return true;\n    } else if (nodeVersionMinor === NODE_VERSION_MINOR_WITH_BIGINT) {\n      if (nodeVersionPatch >= NODE_VERSION_PATCH_WITH_BIGINT) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction getStats(src, dest, cb) {\n  if (nodeSupportsBigInt()) {\n    fs.stat(src, {\n      bigint: true\n    }, function (err, srcStat) {\n      if (err) return cb(err);\n      fs.stat(dest, {\n        bigint: true\n      }, function (err, destStat) {\n        if (err) {\n          if (err.code === 'ENOENT') return cb(null, {\n            srcStat: srcStat,\n            destStat: null\n          });\n          return cb(err);\n        }\n\n        return cb(null, {\n          srcStat: srcStat,\n          destStat: destStat\n        });\n      });\n    });\n  } else {\n    fs.stat(src, function (err, srcStat) {\n      if (err) return cb(err);\n      fs.stat(dest, function (err, destStat) {\n        if (err) {\n          if (err.code === 'ENOENT') return cb(null, {\n            srcStat: srcStat,\n            destStat: null\n          });\n          return cb(err);\n        }\n\n        return cb(null, {\n          srcStat: srcStat,\n          destStat: destStat\n        });\n      });\n    });\n  }\n}\n\nfunction getStatsSync(src, dest) {\n  var srcStat, destStat;\n\n  if (nodeSupportsBigInt()) {\n    srcStat = fs.statSync(src, {\n      bigint: true\n    });\n  } else {\n    srcStat = fs.statSync(src);\n  }\n\n  try {\n    if (nodeSupportsBigInt()) {\n      destStat = fs.statSync(dest, {\n        bigint: true\n      });\n    } else {\n      destStat = fs.statSync(dest);\n    }\n  } catch (err) {\n    if (err.code === 'ENOENT') return {\n      srcStat: srcStat,\n      destStat: null\n    };\n    throw err;\n  }\n\n  return {\n    srcStat: srcStat,\n    destStat: destStat\n  };\n}\n\nfunction checkPaths(src, dest, funcName, cb) {\n  getStats(src, dest, function (err, stats) {\n    if (err) return cb(err);\n    var srcStat = stats.srcStat,\n        destStat = stats.destStat;\n\n    if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n      return cb(new Error('Source and destination must not be the same.'));\n    }\n\n    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n      return cb(new Error(errMsg(src, dest, funcName)));\n    }\n\n    return cb(null, {\n      srcStat: srcStat,\n      destStat: destStat\n    });\n  });\n}\n\nfunction checkPathsSync(src, dest, funcName) {\n  var _getStatsSync = getStatsSync(src, dest),\n      srcStat = _getStatsSync.srcStat,\n      destStat = _getStatsSync.destStat;\n\n  if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n    throw new Error('Source and destination must not be the same.');\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n\n  return {\n    srcStat: srcStat,\n    destStat: destStat\n  };\n} // recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\n\n\nfunction checkParentPaths(src, srcStat, dest, funcName, cb) {\n  var srcParent = path.resolve(path.dirname(src));\n  var destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return cb();\n\n  if (nodeSupportsBigInt()) {\n    fs.stat(destParent, {\n      bigint: true\n    }, function (err, destStat) {\n      if (err) {\n        if (err.code === 'ENOENT') return cb();\n        return cb(err);\n      }\n\n      if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n        return cb(new Error(errMsg(src, dest, funcName)));\n      }\n\n      return checkParentPaths(src, srcStat, destParent, funcName, cb);\n    });\n  } else {\n    fs.stat(destParent, function (err, destStat) {\n      if (err) {\n        if (err.code === 'ENOENT') return cb();\n        return cb(err);\n      }\n\n      if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n        return cb(new Error(errMsg(src, dest, funcName)));\n      }\n\n      return checkParentPaths(src, srcStat, destParent, funcName, cb);\n    });\n  }\n}\n\nfunction checkParentPathsSync(src, srcStat, dest, funcName) {\n  var srcParent = path.resolve(path.dirname(src));\n  var destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return;\n  var destStat;\n\n  try {\n    if (nodeSupportsBigInt()) {\n      destStat = fs.statSync(destParent, {\n        bigint: true\n      });\n    } else {\n      destStat = fs.statSync(destParent);\n    }\n  } catch (err) {\n    if (err.code === 'ENOENT') return;\n    throw err;\n  }\n\n  if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n\n  return checkParentPathsSync(src, srcStat, destParent, funcName);\n} // return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\n\n\nfunction isSrcSubdir(src, dest) {\n  var srcArr = path.resolve(src).split(path.sep).filter(function (i) {\n    return i;\n  });\n  var destArr = path.resolve(dest).split(path.sep).filter(function (i) {\n    return i;\n  });\n  return srcArr.reduce(function (acc, cur, i) {\n    return acc && destArr[i] === cur;\n  }, true);\n}\n\nfunction errMsg(src, dest, funcName) {\n  return \"Cannot \".concat(funcName, \" '\").concat(src, \"' to a subdirectory of itself, '\").concat(dest, \"'.\");\n}\n\nmodule.exports = {\n  checkPaths: checkPaths,\n  checkPathsSync: checkPathsSync,\n  checkParentPaths: checkParentPaths,\n  checkParentPathsSync: checkParentPathsSync,\n  isSrcSubdir: isSrcSubdir\n};","map":null,"metadata":{},"sourceType":"script"}