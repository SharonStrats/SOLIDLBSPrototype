{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrayExpression = exports.ArrayExpression = ArrayExpression;\nexports.assignmentExpression = exports.AssignmentExpression = AssignmentExpression;\nexports.binaryExpression = exports.BinaryExpression = BinaryExpression;\nexports.interpreterDirective = exports.InterpreterDirective = InterpreterDirective;\nexports.directive = exports.Directive = Directive;\nexports.directiveLiteral = exports.DirectiveLiteral = DirectiveLiteral;\nexports.blockStatement = exports.BlockStatement = BlockStatement;\nexports.breakStatement = exports.BreakStatement = BreakStatement;\nexports.callExpression = exports.CallExpression = CallExpression;\nexports.catchClause = exports.CatchClause = CatchClause;\nexports.conditionalExpression = exports.ConditionalExpression = ConditionalExpression;\nexports.continueStatement = exports.ContinueStatement = ContinueStatement;\nexports.debuggerStatement = exports.DebuggerStatement = DebuggerStatement;\nexports.doWhileStatement = exports.DoWhileStatement = DoWhileStatement;\nexports.emptyStatement = exports.EmptyStatement = EmptyStatement;\nexports.expressionStatement = exports.ExpressionStatement = ExpressionStatement;\nexports.file = exports.File = File;\nexports.forInStatement = exports.ForInStatement = ForInStatement;\nexports.forStatement = exports.ForStatement = ForStatement;\nexports.functionDeclaration = exports.FunctionDeclaration = FunctionDeclaration;\nexports.functionExpression = exports.FunctionExpression = FunctionExpression;\nexports.identifier = exports.Identifier = Identifier;\nexports.ifStatement = exports.IfStatement = IfStatement;\nexports.labeledStatement = exports.LabeledStatement = LabeledStatement;\nexports.stringLiteral = exports.StringLiteral = StringLiteral;\nexports.numericLiteral = exports.NumericLiteral = NumericLiteral;\nexports.nullLiteral = exports.NullLiteral = NullLiteral;\nexports.booleanLiteral = exports.BooleanLiteral = BooleanLiteral;\nexports.regExpLiteral = exports.RegExpLiteral = RegExpLiteral;\nexports.logicalExpression = exports.LogicalExpression = LogicalExpression;\nexports.memberExpression = exports.MemberExpression = MemberExpression;\nexports.newExpression = exports.NewExpression = NewExpression;\nexports.program = exports.Program = Program;\nexports.objectExpression = exports.ObjectExpression = ObjectExpression;\nexports.objectMethod = exports.ObjectMethod = ObjectMethod;\nexports.objectProperty = exports.ObjectProperty = ObjectProperty;\nexports.restElement = exports.RestElement = RestElement;\nexports.returnStatement = exports.ReturnStatement = ReturnStatement;\nexports.sequenceExpression = exports.SequenceExpression = SequenceExpression;\nexports.parenthesizedExpression = exports.ParenthesizedExpression = ParenthesizedExpression;\nexports.switchCase = exports.SwitchCase = SwitchCase;\nexports.switchStatement = exports.SwitchStatement = SwitchStatement;\nexports.thisExpression = exports.ThisExpression = ThisExpression;\nexports.throwStatement = exports.ThrowStatement = ThrowStatement;\nexports.tryStatement = exports.TryStatement = TryStatement;\nexports.unaryExpression = exports.UnaryExpression = UnaryExpression;\nexports.updateExpression = exports.UpdateExpression = UpdateExpression;\nexports.variableDeclaration = exports.VariableDeclaration = VariableDeclaration;\nexports.variableDeclarator = exports.VariableDeclarator = VariableDeclarator;\nexports.whileStatement = exports.WhileStatement = WhileStatement;\nexports.withStatement = exports.WithStatement = WithStatement;\nexports.assignmentPattern = exports.AssignmentPattern = AssignmentPattern;\nexports.arrayPattern = exports.ArrayPattern = ArrayPattern;\nexports.arrowFunctionExpression = exports.ArrowFunctionExpression = ArrowFunctionExpression;\nexports.classBody = exports.ClassBody = ClassBody;\nexports.classDeclaration = exports.ClassDeclaration = ClassDeclaration;\nexports.classExpression = exports.ClassExpression = ClassExpression;\nexports.exportAllDeclaration = exports.ExportAllDeclaration = ExportAllDeclaration;\nexports.exportDefaultDeclaration = exports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.exportNamedDeclaration = exports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.exportSpecifier = exports.ExportSpecifier = ExportSpecifier;\nexports.forOfStatement = exports.ForOfStatement = ForOfStatement;\nexports.importDeclaration = exports.ImportDeclaration = ImportDeclaration;\nexports.importDefaultSpecifier = exports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.importNamespaceSpecifier = exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\nexports.importSpecifier = exports.ImportSpecifier = ImportSpecifier;\nexports.metaProperty = exports.MetaProperty = MetaProperty;\nexports.classMethod = exports.ClassMethod = ClassMethod;\nexports.objectPattern = exports.ObjectPattern = ObjectPattern;\nexports.spreadElement = exports.SpreadElement = SpreadElement;\nexports.super = exports.Super = Super;\nexports.taggedTemplateExpression = exports.TaggedTemplateExpression = TaggedTemplateExpression;\nexports.templateElement = exports.TemplateElement = TemplateElement;\nexports.templateLiteral = exports.TemplateLiteral = TemplateLiteral;\nexports.yieldExpression = exports.YieldExpression = YieldExpression;\nexports.anyTypeAnnotation = exports.AnyTypeAnnotation = AnyTypeAnnotation;\nexports.arrayTypeAnnotation = exports.ArrayTypeAnnotation = ArrayTypeAnnotation;\nexports.booleanTypeAnnotation = exports.BooleanTypeAnnotation = BooleanTypeAnnotation;\nexports.booleanLiteralTypeAnnotation = exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;\nexports.nullLiteralTypeAnnotation = exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;\nexports.classImplements = exports.ClassImplements = ClassImplements;\nexports.declareClass = exports.DeclareClass = DeclareClass;\nexports.declareFunction = exports.DeclareFunction = DeclareFunction;\nexports.declareInterface = exports.DeclareInterface = DeclareInterface;\nexports.declareModule = exports.DeclareModule = DeclareModule;\nexports.declareModuleExports = exports.DeclareModuleExports = DeclareModuleExports;\nexports.declareTypeAlias = exports.DeclareTypeAlias = DeclareTypeAlias;\nexports.declareOpaqueType = exports.DeclareOpaqueType = DeclareOpaqueType;\nexports.declareVariable = exports.DeclareVariable = DeclareVariable;\nexports.declareExportDeclaration = exports.DeclareExportDeclaration = DeclareExportDeclaration;\nexports.declareExportAllDeclaration = exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;\nexports.declaredPredicate = exports.DeclaredPredicate = DeclaredPredicate;\nexports.existsTypeAnnotation = exports.ExistsTypeAnnotation = ExistsTypeAnnotation;\nexports.functionTypeAnnotation = exports.FunctionTypeAnnotation = FunctionTypeAnnotation;\nexports.functionTypeParam = exports.FunctionTypeParam = FunctionTypeParam;\nexports.genericTypeAnnotation = exports.GenericTypeAnnotation = GenericTypeAnnotation;\nexports.inferredPredicate = exports.InferredPredicate = InferredPredicate;\nexports.interfaceExtends = exports.InterfaceExtends = InterfaceExtends;\nexports.interfaceDeclaration = exports.InterfaceDeclaration = InterfaceDeclaration;\nexports.interfaceTypeAnnotation = exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;\nexports.intersectionTypeAnnotation = exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;\nexports.mixedTypeAnnotation = exports.MixedTypeAnnotation = MixedTypeAnnotation;\nexports.emptyTypeAnnotation = exports.EmptyTypeAnnotation = EmptyTypeAnnotation;\nexports.nullableTypeAnnotation = exports.NullableTypeAnnotation = NullableTypeAnnotation;\nexports.numberLiteralTypeAnnotation = exports.NumberLiteralTypeAnnotation = NumberLiteralTypeAnnotation;\nexports.numberTypeAnnotation = exports.NumberTypeAnnotation = NumberTypeAnnotation;\nexports.objectTypeAnnotation = exports.ObjectTypeAnnotation = ObjectTypeAnnotation;\nexports.objectTypeInternalSlot = exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;\nexports.objectTypeCallProperty = exports.ObjectTypeCallProperty = ObjectTypeCallProperty;\nexports.objectTypeIndexer = exports.ObjectTypeIndexer = ObjectTypeIndexer;\nexports.objectTypeProperty = exports.ObjectTypeProperty = ObjectTypeProperty;\nexports.objectTypeSpreadProperty = exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;\nexports.opaqueType = exports.OpaqueType = OpaqueType;\nexports.qualifiedTypeIdentifier = exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;\nexports.stringLiteralTypeAnnotation = exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;\nexports.stringTypeAnnotation = exports.StringTypeAnnotation = StringTypeAnnotation;\nexports.thisTypeAnnotation = exports.ThisTypeAnnotation = ThisTypeAnnotation;\nexports.tupleTypeAnnotation = exports.TupleTypeAnnotation = TupleTypeAnnotation;\nexports.typeofTypeAnnotation = exports.TypeofTypeAnnotation = TypeofTypeAnnotation;\nexports.typeAlias = exports.TypeAlias = TypeAlias;\nexports.typeAnnotation = exports.TypeAnnotation = TypeAnnotation;\nexports.typeCastExpression = exports.TypeCastExpression = TypeCastExpression;\nexports.typeParameter = exports.TypeParameter = TypeParameter;\nexports.typeParameterDeclaration = exports.TypeParameterDeclaration = TypeParameterDeclaration;\nexports.typeParameterInstantiation = exports.TypeParameterInstantiation = TypeParameterInstantiation;\nexports.unionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;\nexports.variance = exports.Variance = Variance;\nexports.voidTypeAnnotation = exports.VoidTypeAnnotation = VoidTypeAnnotation;\nexports.jSXAttribute = exports.jsxAttribute = exports.JSXAttribute = JSXAttribute;\nexports.jSXClosingElement = exports.jsxClosingElement = exports.JSXClosingElement = JSXClosingElement;\nexports.jSXElement = exports.jsxElement = exports.JSXElement = JSXElement;\nexports.jSXEmptyExpression = exports.jsxEmptyExpression = exports.JSXEmptyExpression = JSXEmptyExpression;\nexports.jSXExpressionContainer = exports.jsxExpressionContainer = exports.JSXExpressionContainer = JSXExpressionContainer;\nexports.jSXSpreadChild = exports.jsxSpreadChild = exports.JSXSpreadChild = JSXSpreadChild;\nexports.jSXIdentifier = exports.jsxIdentifier = exports.JSXIdentifier = JSXIdentifier;\nexports.jSXMemberExpression = exports.jsxMemberExpression = exports.JSXMemberExpression = JSXMemberExpression;\nexports.jSXNamespacedName = exports.jsxNamespacedName = exports.JSXNamespacedName = JSXNamespacedName;\nexports.jSXOpeningElement = exports.jsxOpeningElement = exports.JSXOpeningElement = JSXOpeningElement;\nexports.jSXSpreadAttribute = exports.jsxSpreadAttribute = exports.JSXSpreadAttribute = JSXSpreadAttribute;\nexports.jSXText = exports.jsxText = exports.JSXText = JSXText;\nexports.jSXFragment = exports.jsxFragment = exports.JSXFragment = JSXFragment;\nexports.jSXOpeningFragment = exports.jsxOpeningFragment = exports.JSXOpeningFragment = JSXOpeningFragment;\nexports.jSXClosingFragment = exports.jsxClosingFragment = exports.JSXClosingFragment = JSXClosingFragment;\nexports.noop = exports.Noop = Noop;\nexports.placeholder = exports.Placeholder = Placeholder;\nexports.argumentPlaceholder = exports.ArgumentPlaceholder = ArgumentPlaceholder;\nexports.awaitExpression = exports.AwaitExpression = AwaitExpression;\nexports.bindExpression = exports.BindExpression = BindExpression;\nexports.classProperty = exports.ClassProperty = ClassProperty;\nexports.optionalMemberExpression = exports.OptionalMemberExpression = OptionalMemberExpression;\nexports.pipelineTopicExpression = exports.PipelineTopicExpression = PipelineTopicExpression;\nexports.pipelineBareFunction = exports.PipelineBareFunction = PipelineBareFunction;\nexports.pipelinePrimaryTopicReference = exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;\nexports.optionalCallExpression = exports.OptionalCallExpression = OptionalCallExpression;\nexports.classPrivateProperty = exports.ClassPrivateProperty = ClassPrivateProperty;\nexports.classPrivateMethod = exports.ClassPrivateMethod = ClassPrivateMethod;\nexports.import = exports.Import = Import;\nexports.decorator = exports.Decorator = Decorator;\nexports.doExpression = exports.DoExpression = DoExpression;\nexports.exportDefaultSpecifier = exports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.exportNamespaceSpecifier = exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.privateName = exports.PrivateName = PrivateName;\nexports.bigIntLiteral = exports.BigIntLiteral = BigIntLiteral;\nexports.tSParameterProperty = exports.tsParameterProperty = exports.TSParameterProperty = TSParameterProperty;\nexports.tSDeclareFunction = exports.tsDeclareFunction = exports.TSDeclareFunction = TSDeclareFunction;\nexports.tSDeclareMethod = exports.tsDeclareMethod = exports.TSDeclareMethod = TSDeclareMethod;\nexports.tSQualifiedName = exports.tsQualifiedName = exports.TSQualifiedName = TSQualifiedName;\nexports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.tSPropertySignature = exports.tsPropertySignature = exports.TSPropertySignature = TSPropertySignature;\nexports.tSMethodSignature = exports.tsMethodSignature = exports.TSMethodSignature = TSMethodSignature;\nexports.tSIndexSignature = exports.tsIndexSignature = exports.TSIndexSignature = TSIndexSignature;\nexports.tSAnyKeyword = exports.tsAnyKeyword = exports.TSAnyKeyword = TSAnyKeyword;\nexports.tSUnknownKeyword = exports.tsUnknownKeyword = exports.TSUnknownKeyword = TSUnknownKeyword;\nexports.tSNumberKeyword = exports.tsNumberKeyword = exports.TSNumberKeyword = TSNumberKeyword;\nexports.tSObjectKeyword = exports.tsObjectKeyword = exports.TSObjectKeyword = TSObjectKeyword;\nexports.tSBooleanKeyword = exports.tsBooleanKeyword = exports.TSBooleanKeyword = TSBooleanKeyword;\nexports.tSStringKeyword = exports.tsStringKeyword = exports.TSStringKeyword = TSStringKeyword;\nexports.tSSymbolKeyword = exports.tsSymbolKeyword = exports.TSSymbolKeyword = TSSymbolKeyword;\nexports.tSVoidKeyword = exports.tsVoidKeyword = exports.TSVoidKeyword = TSVoidKeyword;\nexports.tSUndefinedKeyword = exports.tsUndefinedKeyword = exports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.tSNullKeyword = exports.tsNullKeyword = exports.TSNullKeyword = TSNullKeyword;\nexports.tSNeverKeyword = exports.tsNeverKeyword = exports.TSNeverKeyword = TSNeverKeyword;\nexports.tSThisType = exports.tsThisType = exports.TSThisType = TSThisType;\nexports.tSFunctionType = exports.tsFunctionType = exports.TSFunctionType = TSFunctionType;\nexports.tSConstructorType = exports.tsConstructorType = exports.TSConstructorType = TSConstructorType;\nexports.tSTypeReference = exports.tsTypeReference = exports.TSTypeReference = TSTypeReference;\nexports.tSTypePredicate = exports.tsTypePredicate = exports.TSTypePredicate = TSTypePredicate;\nexports.tSTypeQuery = exports.tsTypeQuery = exports.TSTypeQuery = TSTypeQuery;\nexports.tSTypeLiteral = exports.tsTypeLiteral = exports.TSTypeLiteral = TSTypeLiteral;\nexports.tSArrayType = exports.tsArrayType = exports.TSArrayType = TSArrayType;\nexports.tSTupleType = exports.tsTupleType = exports.TSTupleType = TSTupleType;\nexports.tSOptionalType = exports.tsOptionalType = exports.TSOptionalType = TSOptionalType;\nexports.tSRestType = exports.tsRestType = exports.TSRestType = TSRestType;\nexports.tSUnionType = exports.tsUnionType = exports.TSUnionType = TSUnionType;\nexports.tSIntersectionType = exports.tsIntersectionType = exports.TSIntersectionType = TSIntersectionType;\nexports.tSConditionalType = exports.tsConditionalType = exports.TSConditionalType = TSConditionalType;\nexports.tSInferType = exports.tsInferType = exports.TSInferType = TSInferType;\nexports.tSParenthesizedType = exports.tsParenthesizedType = exports.TSParenthesizedType = TSParenthesizedType;\nexports.tSTypeOperator = exports.tsTypeOperator = exports.TSTypeOperator = TSTypeOperator;\nexports.tSIndexedAccessType = exports.tsIndexedAccessType = exports.TSIndexedAccessType = TSIndexedAccessType;\nexports.tSMappedType = exports.tsMappedType = exports.TSMappedType = TSMappedType;\nexports.tSLiteralType = exports.tsLiteralType = exports.TSLiteralType = TSLiteralType;\nexports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = exports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.tSInterfaceBody = exports.tsInterfaceBody = exports.TSInterfaceBody = TSInterfaceBody;\nexports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.tSAsExpression = exports.tsAsExpression = exports.TSAsExpression = TSAsExpression;\nexports.tSTypeAssertion = exports.tsTypeAssertion = exports.TSTypeAssertion = TSTypeAssertion;\nexports.tSEnumDeclaration = exports.tsEnumDeclaration = exports.TSEnumDeclaration = TSEnumDeclaration;\nexports.tSEnumMember = exports.tsEnumMember = exports.TSEnumMember = TSEnumMember;\nexports.tSModuleDeclaration = exports.tsModuleDeclaration = exports.TSModuleDeclaration = TSModuleDeclaration;\nexports.tSModuleBlock = exports.tsModuleBlock = exports.TSModuleBlock = TSModuleBlock;\nexports.tSImportType = exports.tsImportType = exports.TSImportType = TSImportType;\nexports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.tSExternalModuleReference = exports.tsExternalModuleReference = exports.TSExternalModuleReference = TSExternalModuleReference;\nexports.tSNonNullExpression = exports.tsNonNullExpression = exports.TSNonNullExpression = TSNonNullExpression;\nexports.tSExportAssignment = exports.tsExportAssignment = exports.TSExportAssignment = TSExportAssignment;\nexports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.tSTypeAnnotation = exports.tsTypeAnnotation = exports.TSTypeAnnotation = TSTypeAnnotation;\nexports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = exports.TSTypeParameterDeclaration = TSTypeParameterDeclaration;\nexports.tSTypeParameter = exports.tsTypeParameter = exports.TSTypeParameter = TSTypeParameter;\nexports.numberLiteral = exports.NumberLiteral = NumberLiteral;\nexports.regexLiteral = exports.RegexLiteral = RegexLiteral;\nexports.restProperty = exports.RestProperty = RestProperty;\nexports.spreadProperty = exports.SpreadProperty = SpreadProperty;\n\nvar _builder = _interopRequireDefault(require(\"../builder\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ArrayExpression() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ArrayExpression\"].concat(args));\n}\n\nfunction AssignmentExpression() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"AssignmentExpression\"].concat(args));\n}\n\nfunction BinaryExpression() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"BinaryExpression\"].concat(args));\n}\n\nfunction InterpreterDirective() {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"InterpreterDirective\"].concat(args));\n}\n\nfunction Directive() {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Directive\"].concat(args));\n}\n\nfunction DirectiveLiteral() {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DirectiveLiteral\"].concat(args));\n}\n\nfunction BlockStatement() {\n  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    args[_key7] = arguments[_key7];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"BlockStatement\"].concat(args));\n}\n\nfunction BreakStatement() {\n  for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    args[_key8] = arguments[_key8];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"BreakStatement\"].concat(args));\n}\n\nfunction CallExpression() {\n  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    args[_key9] = arguments[_key9];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"CallExpression\"].concat(args));\n}\n\nfunction CatchClause() {\n  for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    args[_key10] = arguments[_key10];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"CatchClause\"].concat(args));\n}\n\nfunction ConditionalExpression() {\n  for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n    args[_key11] = arguments[_key11];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ConditionalExpression\"].concat(args));\n}\n\nfunction ContinueStatement() {\n  for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n    args[_key12] = arguments[_key12];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ContinueStatement\"].concat(args));\n}\n\nfunction DebuggerStatement() {\n  for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n    args[_key13] = arguments[_key13];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DebuggerStatement\"].concat(args));\n}\n\nfunction DoWhileStatement() {\n  for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n    args[_key14] = arguments[_key14];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DoWhileStatement\"].concat(args));\n}\n\nfunction EmptyStatement() {\n  for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n    args[_key15] = arguments[_key15];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"EmptyStatement\"].concat(args));\n}\n\nfunction ExpressionStatement() {\n  for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n    args[_key16] = arguments[_key16];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ExpressionStatement\"].concat(args));\n}\n\nfunction File() {\n  for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n    args[_key17] = arguments[_key17];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"File\"].concat(args));\n}\n\nfunction ForInStatement() {\n  for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n    args[_key18] = arguments[_key18];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ForInStatement\"].concat(args));\n}\n\nfunction ForStatement() {\n  for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n    args[_key19] = arguments[_key19];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ForStatement\"].concat(args));\n}\n\nfunction FunctionDeclaration() {\n  for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n    args[_key20] = arguments[_key20];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"FunctionDeclaration\"].concat(args));\n}\n\nfunction FunctionExpression() {\n  for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {\n    args[_key21] = arguments[_key21];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"FunctionExpression\"].concat(args));\n}\n\nfunction Identifier() {\n  for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n    args[_key22] = arguments[_key22];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Identifier\"].concat(args));\n}\n\nfunction IfStatement() {\n  for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n    args[_key23] = arguments[_key23];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"IfStatement\"].concat(args));\n}\n\nfunction LabeledStatement() {\n  for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n    args[_key24] = arguments[_key24];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"LabeledStatement\"].concat(args));\n}\n\nfunction StringLiteral() {\n  for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n    args[_key25] = arguments[_key25];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"StringLiteral\"].concat(args));\n}\n\nfunction NumericLiteral() {\n  for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n    args[_key26] = arguments[_key26];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"NumericLiteral\"].concat(args));\n}\n\nfunction NullLiteral() {\n  for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {\n    args[_key27] = arguments[_key27];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"NullLiteral\"].concat(args));\n}\n\nfunction BooleanLiteral() {\n  for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {\n    args[_key28] = arguments[_key28];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"BooleanLiteral\"].concat(args));\n}\n\nfunction RegExpLiteral() {\n  for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {\n    args[_key29] = arguments[_key29];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"RegExpLiteral\"].concat(args));\n}\n\nfunction LogicalExpression() {\n  for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {\n    args[_key30] = arguments[_key30];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"LogicalExpression\"].concat(args));\n}\n\nfunction MemberExpression() {\n  for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {\n    args[_key31] = arguments[_key31];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"MemberExpression\"].concat(args));\n}\n\nfunction NewExpression() {\n  for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {\n    args[_key32] = arguments[_key32];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"NewExpression\"].concat(args));\n}\n\nfunction Program() {\n  for (var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++) {\n    args[_key33] = arguments[_key33];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Program\"].concat(args));\n}\n\nfunction ObjectExpression() {\n  for (var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++) {\n    args[_key34] = arguments[_key34];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectExpression\"].concat(args));\n}\n\nfunction ObjectMethod() {\n  for (var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {\n    args[_key35] = arguments[_key35];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectMethod\"].concat(args));\n}\n\nfunction ObjectProperty() {\n  for (var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++) {\n    args[_key36] = arguments[_key36];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectProperty\"].concat(args));\n}\n\nfunction RestElement() {\n  for (var _len37 = arguments.length, args = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++) {\n    args[_key37] = arguments[_key37];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"RestElement\"].concat(args));\n}\n\nfunction ReturnStatement() {\n  for (var _len38 = arguments.length, args = new Array(_len38), _key38 = 0; _key38 < _len38; _key38++) {\n    args[_key38] = arguments[_key38];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ReturnStatement\"].concat(args));\n}\n\nfunction SequenceExpression() {\n  for (var _len39 = arguments.length, args = new Array(_len39), _key39 = 0; _key39 < _len39; _key39++) {\n    args[_key39] = arguments[_key39];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"SequenceExpression\"].concat(args));\n}\n\nfunction ParenthesizedExpression() {\n  for (var _len40 = arguments.length, args = new Array(_len40), _key40 = 0; _key40 < _len40; _key40++) {\n    args[_key40] = arguments[_key40];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ParenthesizedExpression\"].concat(args));\n}\n\nfunction SwitchCase() {\n  for (var _len41 = arguments.length, args = new Array(_len41), _key41 = 0; _key41 < _len41; _key41++) {\n    args[_key41] = arguments[_key41];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"SwitchCase\"].concat(args));\n}\n\nfunction SwitchStatement() {\n  for (var _len42 = arguments.length, args = new Array(_len42), _key42 = 0; _key42 < _len42; _key42++) {\n    args[_key42] = arguments[_key42];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"SwitchStatement\"].concat(args));\n}\n\nfunction ThisExpression() {\n  for (var _len43 = arguments.length, args = new Array(_len43), _key43 = 0; _key43 < _len43; _key43++) {\n    args[_key43] = arguments[_key43];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ThisExpression\"].concat(args));\n}\n\nfunction ThrowStatement() {\n  for (var _len44 = arguments.length, args = new Array(_len44), _key44 = 0; _key44 < _len44; _key44++) {\n    args[_key44] = arguments[_key44];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ThrowStatement\"].concat(args));\n}\n\nfunction TryStatement() {\n  for (var _len45 = arguments.length, args = new Array(_len45), _key45 = 0; _key45 < _len45; _key45++) {\n    args[_key45] = arguments[_key45];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TryStatement\"].concat(args));\n}\n\nfunction UnaryExpression() {\n  for (var _len46 = arguments.length, args = new Array(_len46), _key46 = 0; _key46 < _len46; _key46++) {\n    args[_key46] = arguments[_key46];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"UnaryExpression\"].concat(args));\n}\n\nfunction UpdateExpression() {\n  for (var _len47 = arguments.length, args = new Array(_len47), _key47 = 0; _key47 < _len47; _key47++) {\n    args[_key47] = arguments[_key47];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"UpdateExpression\"].concat(args));\n}\n\nfunction VariableDeclaration() {\n  for (var _len48 = arguments.length, args = new Array(_len48), _key48 = 0; _key48 < _len48; _key48++) {\n    args[_key48] = arguments[_key48];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"VariableDeclaration\"].concat(args));\n}\n\nfunction VariableDeclarator() {\n  for (var _len49 = arguments.length, args = new Array(_len49), _key49 = 0; _key49 < _len49; _key49++) {\n    args[_key49] = arguments[_key49];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"VariableDeclarator\"].concat(args));\n}\n\nfunction WhileStatement() {\n  for (var _len50 = arguments.length, args = new Array(_len50), _key50 = 0; _key50 < _len50; _key50++) {\n    args[_key50] = arguments[_key50];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"WhileStatement\"].concat(args));\n}\n\nfunction WithStatement() {\n  for (var _len51 = arguments.length, args = new Array(_len51), _key51 = 0; _key51 < _len51; _key51++) {\n    args[_key51] = arguments[_key51];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"WithStatement\"].concat(args));\n}\n\nfunction AssignmentPattern() {\n  for (var _len52 = arguments.length, args = new Array(_len52), _key52 = 0; _key52 < _len52; _key52++) {\n    args[_key52] = arguments[_key52];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"AssignmentPattern\"].concat(args));\n}\n\nfunction ArrayPattern() {\n  for (var _len53 = arguments.length, args = new Array(_len53), _key53 = 0; _key53 < _len53; _key53++) {\n    args[_key53] = arguments[_key53];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ArrayPattern\"].concat(args));\n}\n\nfunction ArrowFunctionExpression() {\n  for (var _len54 = arguments.length, args = new Array(_len54), _key54 = 0; _key54 < _len54; _key54++) {\n    args[_key54] = arguments[_key54];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ArrowFunctionExpression\"].concat(args));\n}\n\nfunction ClassBody() {\n  for (var _len55 = arguments.length, args = new Array(_len55), _key55 = 0; _key55 < _len55; _key55++) {\n    args[_key55] = arguments[_key55];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ClassBody\"].concat(args));\n}\n\nfunction ClassDeclaration() {\n  for (var _len56 = arguments.length, args = new Array(_len56), _key56 = 0; _key56 < _len56; _key56++) {\n    args[_key56] = arguments[_key56];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ClassDeclaration\"].concat(args));\n}\n\nfunction ClassExpression() {\n  for (var _len57 = arguments.length, args = new Array(_len57), _key57 = 0; _key57 < _len57; _key57++) {\n    args[_key57] = arguments[_key57];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ClassExpression\"].concat(args));\n}\n\nfunction ExportAllDeclaration() {\n  for (var _len58 = arguments.length, args = new Array(_len58), _key58 = 0; _key58 < _len58; _key58++) {\n    args[_key58] = arguments[_key58];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ExportAllDeclaration\"].concat(args));\n}\n\nfunction ExportDefaultDeclaration() {\n  for (var _len59 = arguments.length, args = new Array(_len59), _key59 = 0; _key59 < _len59; _key59++) {\n    args[_key59] = arguments[_key59];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ExportDefaultDeclaration\"].concat(args));\n}\n\nfunction ExportNamedDeclaration() {\n  for (var _len60 = arguments.length, args = new Array(_len60), _key60 = 0; _key60 < _len60; _key60++) {\n    args[_key60] = arguments[_key60];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ExportNamedDeclaration\"].concat(args));\n}\n\nfunction ExportSpecifier() {\n  for (var _len61 = arguments.length, args = new Array(_len61), _key61 = 0; _key61 < _len61; _key61++) {\n    args[_key61] = arguments[_key61];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ExportSpecifier\"].concat(args));\n}\n\nfunction ForOfStatement() {\n  for (var _len62 = arguments.length, args = new Array(_len62), _key62 = 0; _key62 < _len62; _key62++) {\n    args[_key62] = arguments[_key62];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ForOfStatement\"].concat(args));\n}\n\nfunction ImportDeclaration() {\n  for (var _len63 = arguments.length, args = new Array(_len63), _key63 = 0; _key63 < _len63; _key63++) {\n    args[_key63] = arguments[_key63];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ImportDeclaration\"].concat(args));\n}\n\nfunction ImportDefaultSpecifier() {\n  for (var _len64 = arguments.length, args = new Array(_len64), _key64 = 0; _key64 < _len64; _key64++) {\n    args[_key64] = arguments[_key64];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ImportDefaultSpecifier\"].concat(args));\n}\n\nfunction ImportNamespaceSpecifier() {\n  for (var _len65 = arguments.length, args = new Array(_len65), _key65 = 0; _key65 < _len65; _key65++) {\n    args[_key65] = arguments[_key65];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ImportNamespaceSpecifier\"].concat(args));\n}\n\nfunction ImportSpecifier() {\n  for (var _len66 = arguments.length, args = new Array(_len66), _key66 = 0; _key66 < _len66; _key66++) {\n    args[_key66] = arguments[_key66];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ImportSpecifier\"].concat(args));\n}\n\nfunction MetaProperty() {\n  for (var _len67 = arguments.length, args = new Array(_len67), _key67 = 0; _key67 < _len67; _key67++) {\n    args[_key67] = arguments[_key67];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"MetaProperty\"].concat(args));\n}\n\nfunction ClassMethod() {\n  for (var _len68 = arguments.length, args = new Array(_len68), _key68 = 0; _key68 < _len68; _key68++) {\n    args[_key68] = arguments[_key68];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ClassMethod\"].concat(args));\n}\n\nfunction ObjectPattern() {\n  for (var _len69 = arguments.length, args = new Array(_len69), _key69 = 0; _key69 < _len69; _key69++) {\n    args[_key69] = arguments[_key69];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectPattern\"].concat(args));\n}\n\nfunction SpreadElement() {\n  for (var _len70 = arguments.length, args = new Array(_len70), _key70 = 0; _key70 < _len70; _key70++) {\n    args[_key70] = arguments[_key70];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"SpreadElement\"].concat(args));\n}\n\nfunction Super() {\n  for (var _len71 = arguments.length, args = new Array(_len71), _key71 = 0; _key71 < _len71; _key71++) {\n    args[_key71] = arguments[_key71];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Super\"].concat(args));\n}\n\nfunction TaggedTemplateExpression() {\n  for (var _len72 = arguments.length, args = new Array(_len72), _key72 = 0; _key72 < _len72; _key72++) {\n    args[_key72] = arguments[_key72];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TaggedTemplateExpression\"].concat(args));\n}\n\nfunction TemplateElement() {\n  for (var _len73 = arguments.length, args = new Array(_len73), _key73 = 0; _key73 < _len73; _key73++) {\n    args[_key73] = arguments[_key73];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TemplateElement\"].concat(args));\n}\n\nfunction TemplateLiteral() {\n  for (var _len74 = arguments.length, args = new Array(_len74), _key74 = 0; _key74 < _len74; _key74++) {\n    args[_key74] = arguments[_key74];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TemplateLiteral\"].concat(args));\n}\n\nfunction YieldExpression() {\n  for (var _len75 = arguments.length, args = new Array(_len75), _key75 = 0; _key75 < _len75; _key75++) {\n    args[_key75] = arguments[_key75];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"YieldExpression\"].concat(args));\n}\n\nfunction AnyTypeAnnotation() {\n  for (var _len76 = arguments.length, args = new Array(_len76), _key76 = 0; _key76 < _len76; _key76++) {\n    args[_key76] = arguments[_key76];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"AnyTypeAnnotation\"].concat(args));\n}\n\nfunction ArrayTypeAnnotation() {\n  for (var _len77 = arguments.length, args = new Array(_len77), _key77 = 0; _key77 < _len77; _key77++) {\n    args[_key77] = arguments[_key77];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ArrayTypeAnnotation\"].concat(args));\n}\n\nfunction BooleanTypeAnnotation() {\n  for (var _len78 = arguments.length, args = new Array(_len78), _key78 = 0; _key78 < _len78; _key78++) {\n    args[_key78] = arguments[_key78];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"BooleanTypeAnnotation\"].concat(args));\n}\n\nfunction BooleanLiteralTypeAnnotation() {\n  for (var _len79 = arguments.length, args = new Array(_len79), _key79 = 0; _key79 < _len79; _key79++) {\n    args[_key79] = arguments[_key79];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"BooleanLiteralTypeAnnotation\"].concat(args));\n}\n\nfunction NullLiteralTypeAnnotation() {\n  for (var _len80 = arguments.length, args = new Array(_len80), _key80 = 0; _key80 < _len80; _key80++) {\n    args[_key80] = arguments[_key80];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"NullLiteralTypeAnnotation\"].concat(args));\n}\n\nfunction ClassImplements() {\n  for (var _len81 = arguments.length, args = new Array(_len81), _key81 = 0; _key81 < _len81; _key81++) {\n    args[_key81] = arguments[_key81];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ClassImplements\"].concat(args));\n}\n\nfunction DeclareClass() {\n  for (var _len82 = arguments.length, args = new Array(_len82), _key82 = 0; _key82 < _len82; _key82++) {\n    args[_key82] = arguments[_key82];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareClass\"].concat(args));\n}\n\nfunction DeclareFunction() {\n  for (var _len83 = arguments.length, args = new Array(_len83), _key83 = 0; _key83 < _len83; _key83++) {\n    args[_key83] = arguments[_key83];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareFunction\"].concat(args));\n}\n\nfunction DeclareInterface() {\n  for (var _len84 = arguments.length, args = new Array(_len84), _key84 = 0; _key84 < _len84; _key84++) {\n    args[_key84] = arguments[_key84];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareInterface\"].concat(args));\n}\n\nfunction DeclareModule() {\n  for (var _len85 = arguments.length, args = new Array(_len85), _key85 = 0; _key85 < _len85; _key85++) {\n    args[_key85] = arguments[_key85];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareModule\"].concat(args));\n}\n\nfunction DeclareModuleExports() {\n  for (var _len86 = arguments.length, args = new Array(_len86), _key86 = 0; _key86 < _len86; _key86++) {\n    args[_key86] = arguments[_key86];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareModuleExports\"].concat(args));\n}\n\nfunction DeclareTypeAlias() {\n  for (var _len87 = arguments.length, args = new Array(_len87), _key87 = 0; _key87 < _len87; _key87++) {\n    args[_key87] = arguments[_key87];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareTypeAlias\"].concat(args));\n}\n\nfunction DeclareOpaqueType() {\n  for (var _len88 = arguments.length, args = new Array(_len88), _key88 = 0; _key88 < _len88; _key88++) {\n    args[_key88] = arguments[_key88];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareOpaqueType\"].concat(args));\n}\n\nfunction DeclareVariable() {\n  for (var _len89 = arguments.length, args = new Array(_len89), _key89 = 0; _key89 < _len89; _key89++) {\n    args[_key89] = arguments[_key89];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareVariable\"].concat(args));\n}\n\nfunction DeclareExportDeclaration() {\n  for (var _len90 = arguments.length, args = new Array(_len90), _key90 = 0; _key90 < _len90; _key90++) {\n    args[_key90] = arguments[_key90];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareExportDeclaration\"].concat(args));\n}\n\nfunction DeclareExportAllDeclaration() {\n  for (var _len91 = arguments.length, args = new Array(_len91), _key91 = 0; _key91 < _len91; _key91++) {\n    args[_key91] = arguments[_key91];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclareExportAllDeclaration\"].concat(args));\n}\n\nfunction DeclaredPredicate() {\n  for (var _len92 = arguments.length, args = new Array(_len92), _key92 = 0; _key92 < _len92; _key92++) {\n    args[_key92] = arguments[_key92];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DeclaredPredicate\"].concat(args));\n}\n\nfunction ExistsTypeAnnotation() {\n  for (var _len93 = arguments.length, args = new Array(_len93), _key93 = 0; _key93 < _len93; _key93++) {\n    args[_key93] = arguments[_key93];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ExistsTypeAnnotation\"].concat(args));\n}\n\nfunction FunctionTypeAnnotation() {\n  for (var _len94 = arguments.length, args = new Array(_len94), _key94 = 0; _key94 < _len94; _key94++) {\n    args[_key94] = arguments[_key94];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"FunctionTypeAnnotation\"].concat(args));\n}\n\nfunction FunctionTypeParam() {\n  for (var _len95 = arguments.length, args = new Array(_len95), _key95 = 0; _key95 < _len95; _key95++) {\n    args[_key95] = arguments[_key95];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"FunctionTypeParam\"].concat(args));\n}\n\nfunction GenericTypeAnnotation() {\n  for (var _len96 = arguments.length, args = new Array(_len96), _key96 = 0; _key96 < _len96; _key96++) {\n    args[_key96] = arguments[_key96];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"GenericTypeAnnotation\"].concat(args));\n}\n\nfunction InferredPredicate() {\n  for (var _len97 = arguments.length, args = new Array(_len97), _key97 = 0; _key97 < _len97; _key97++) {\n    args[_key97] = arguments[_key97];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"InferredPredicate\"].concat(args));\n}\n\nfunction InterfaceExtends() {\n  for (var _len98 = arguments.length, args = new Array(_len98), _key98 = 0; _key98 < _len98; _key98++) {\n    args[_key98] = arguments[_key98];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"InterfaceExtends\"].concat(args));\n}\n\nfunction InterfaceDeclaration() {\n  for (var _len99 = arguments.length, args = new Array(_len99), _key99 = 0; _key99 < _len99; _key99++) {\n    args[_key99] = arguments[_key99];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"InterfaceDeclaration\"].concat(args));\n}\n\nfunction InterfaceTypeAnnotation() {\n  for (var _len100 = arguments.length, args = new Array(_len100), _key100 = 0; _key100 < _len100; _key100++) {\n    args[_key100] = arguments[_key100];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"InterfaceTypeAnnotation\"].concat(args));\n}\n\nfunction IntersectionTypeAnnotation() {\n  for (var _len101 = arguments.length, args = new Array(_len101), _key101 = 0; _key101 < _len101; _key101++) {\n    args[_key101] = arguments[_key101];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"IntersectionTypeAnnotation\"].concat(args));\n}\n\nfunction MixedTypeAnnotation() {\n  for (var _len102 = arguments.length, args = new Array(_len102), _key102 = 0; _key102 < _len102; _key102++) {\n    args[_key102] = arguments[_key102];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"MixedTypeAnnotation\"].concat(args));\n}\n\nfunction EmptyTypeAnnotation() {\n  for (var _len103 = arguments.length, args = new Array(_len103), _key103 = 0; _key103 < _len103; _key103++) {\n    args[_key103] = arguments[_key103];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"EmptyTypeAnnotation\"].concat(args));\n}\n\nfunction NullableTypeAnnotation() {\n  for (var _len104 = arguments.length, args = new Array(_len104), _key104 = 0; _key104 < _len104; _key104++) {\n    args[_key104] = arguments[_key104];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"NullableTypeAnnotation\"].concat(args));\n}\n\nfunction NumberLiteralTypeAnnotation() {\n  for (var _len105 = arguments.length, args = new Array(_len105), _key105 = 0; _key105 < _len105; _key105++) {\n    args[_key105] = arguments[_key105];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"NumberLiteralTypeAnnotation\"].concat(args));\n}\n\nfunction NumberTypeAnnotation() {\n  for (var _len106 = arguments.length, args = new Array(_len106), _key106 = 0; _key106 < _len106; _key106++) {\n    args[_key106] = arguments[_key106];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"NumberTypeAnnotation\"].concat(args));\n}\n\nfunction ObjectTypeAnnotation() {\n  for (var _len107 = arguments.length, args = new Array(_len107), _key107 = 0; _key107 < _len107; _key107++) {\n    args[_key107] = arguments[_key107];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectTypeAnnotation\"].concat(args));\n}\n\nfunction ObjectTypeInternalSlot() {\n  for (var _len108 = arguments.length, args = new Array(_len108), _key108 = 0; _key108 < _len108; _key108++) {\n    args[_key108] = arguments[_key108];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectTypeInternalSlot\"].concat(args));\n}\n\nfunction ObjectTypeCallProperty() {\n  for (var _len109 = arguments.length, args = new Array(_len109), _key109 = 0; _key109 < _len109; _key109++) {\n    args[_key109] = arguments[_key109];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectTypeCallProperty\"].concat(args));\n}\n\nfunction ObjectTypeIndexer() {\n  for (var _len110 = arguments.length, args = new Array(_len110), _key110 = 0; _key110 < _len110; _key110++) {\n    args[_key110] = arguments[_key110];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectTypeIndexer\"].concat(args));\n}\n\nfunction ObjectTypeProperty() {\n  for (var _len111 = arguments.length, args = new Array(_len111), _key111 = 0; _key111 < _len111; _key111++) {\n    args[_key111] = arguments[_key111];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectTypeProperty\"].concat(args));\n}\n\nfunction ObjectTypeSpreadProperty() {\n  for (var _len112 = arguments.length, args = new Array(_len112), _key112 = 0; _key112 < _len112; _key112++) {\n    args[_key112] = arguments[_key112];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ObjectTypeSpreadProperty\"].concat(args));\n}\n\nfunction OpaqueType() {\n  for (var _len113 = arguments.length, args = new Array(_len113), _key113 = 0; _key113 < _len113; _key113++) {\n    args[_key113] = arguments[_key113];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"OpaqueType\"].concat(args));\n}\n\nfunction QualifiedTypeIdentifier() {\n  for (var _len114 = arguments.length, args = new Array(_len114), _key114 = 0; _key114 < _len114; _key114++) {\n    args[_key114] = arguments[_key114];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"QualifiedTypeIdentifier\"].concat(args));\n}\n\nfunction StringLiteralTypeAnnotation() {\n  for (var _len115 = arguments.length, args = new Array(_len115), _key115 = 0; _key115 < _len115; _key115++) {\n    args[_key115] = arguments[_key115];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"StringLiteralTypeAnnotation\"].concat(args));\n}\n\nfunction StringTypeAnnotation() {\n  for (var _len116 = arguments.length, args = new Array(_len116), _key116 = 0; _key116 < _len116; _key116++) {\n    args[_key116] = arguments[_key116];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"StringTypeAnnotation\"].concat(args));\n}\n\nfunction ThisTypeAnnotation() {\n  for (var _len117 = arguments.length, args = new Array(_len117), _key117 = 0; _key117 < _len117; _key117++) {\n    args[_key117] = arguments[_key117];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ThisTypeAnnotation\"].concat(args));\n}\n\nfunction TupleTypeAnnotation() {\n  for (var _len118 = arguments.length, args = new Array(_len118), _key118 = 0; _key118 < _len118; _key118++) {\n    args[_key118] = arguments[_key118];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TupleTypeAnnotation\"].concat(args));\n}\n\nfunction TypeofTypeAnnotation() {\n  for (var _len119 = arguments.length, args = new Array(_len119), _key119 = 0; _key119 < _len119; _key119++) {\n    args[_key119] = arguments[_key119];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TypeofTypeAnnotation\"].concat(args));\n}\n\nfunction TypeAlias() {\n  for (var _len120 = arguments.length, args = new Array(_len120), _key120 = 0; _key120 < _len120; _key120++) {\n    args[_key120] = arguments[_key120];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TypeAlias\"].concat(args));\n}\n\nfunction TypeAnnotation() {\n  for (var _len121 = arguments.length, args = new Array(_len121), _key121 = 0; _key121 < _len121; _key121++) {\n    args[_key121] = arguments[_key121];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TypeAnnotation\"].concat(args));\n}\n\nfunction TypeCastExpression() {\n  for (var _len122 = arguments.length, args = new Array(_len122), _key122 = 0; _key122 < _len122; _key122++) {\n    args[_key122] = arguments[_key122];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TypeCastExpression\"].concat(args));\n}\n\nfunction TypeParameter() {\n  for (var _len123 = arguments.length, args = new Array(_len123), _key123 = 0; _key123 < _len123; _key123++) {\n    args[_key123] = arguments[_key123];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TypeParameter\"].concat(args));\n}\n\nfunction TypeParameterDeclaration() {\n  for (var _len124 = arguments.length, args = new Array(_len124), _key124 = 0; _key124 < _len124; _key124++) {\n    args[_key124] = arguments[_key124];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TypeParameterDeclaration\"].concat(args));\n}\n\nfunction TypeParameterInstantiation() {\n  for (var _len125 = arguments.length, args = new Array(_len125), _key125 = 0; _key125 < _len125; _key125++) {\n    args[_key125] = arguments[_key125];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TypeParameterInstantiation\"].concat(args));\n}\n\nfunction UnionTypeAnnotation() {\n  for (var _len126 = arguments.length, args = new Array(_len126), _key126 = 0; _key126 < _len126; _key126++) {\n    args[_key126] = arguments[_key126];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"UnionTypeAnnotation\"].concat(args));\n}\n\nfunction Variance() {\n  for (var _len127 = arguments.length, args = new Array(_len127), _key127 = 0; _key127 < _len127; _key127++) {\n    args[_key127] = arguments[_key127];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Variance\"].concat(args));\n}\n\nfunction VoidTypeAnnotation() {\n  for (var _len128 = arguments.length, args = new Array(_len128), _key128 = 0; _key128 < _len128; _key128++) {\n    args[_key128] = arguments[_key128];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"VoidTypeAnnotation\"].concat(args));\n}\n\nfunction JSXAttribute() {\n  for (var _len129 = arguments.length, args = new Array(_len129), _key129 = 0; _key129 < _len129; _key129++) {\n    args[_key129] = arguments[_key129];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXAttribute\"].concat(args));\n}\n\nfunction JSXClosingElement() {\n  for (var _len130 = arguments.length, args = new Array(_len130), _key130 = 0; _key130 < _len130; _key130++) {\n    args[_key130] = arguments[_key130];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXClosingElement\"].concat(args));\n}\n\nfunction JSXElement() {\n  for (var _len131 = arguments.length, args = new Array(_len131), _key131 = 0; _key131 < _len131; _key131++) {\n    args[_key131] = arguments[_key131];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXElement\"].concat(args));\n}\n\nfunction JSXEmptyExpression() {\n  for (var _len132 = arguments.length, args = new Array(_len132), _key132 = 0; _key132 < _len132; _key132++) {\n    args[_key132] = arguments[_key132];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXEmptyExpression\"].concat(args));\n}\n\nfunction JSXExpressionContainer() {\n  for (var _len133 = arguments.length, args = new Array(_len133), _key133 = 0; _key133 < _len133; _key133++) {\n    args[_key133] = arguments[_key133];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXExpressionContainer\"].concat(args));\n}\n\nfunction JSXSpreadChild() {\n  for (var _len134 = arguments.length, args = new Array(_len134), _key134 = 0; _key134 < _len134; _key134++) {\n    args[_key134] = arguments[_key134];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXSpreadChild\"].concat(args));\n}\n\nfunction JSXIdentifier() {\n  for (var _len135 = arguments.length, args = new Array(_len135), _key135 = 0; _key135 < _len135; _key135++) {\n    args[_key135] = arguments[_key135];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXIdentifier\"].concat(args));\n}\n\nfunction JSXMemberExpression() {\n  for (var _len136 = arguments.length, args = new Array(_len136), _key136 = 0; _key136 < _len136; _key136++) {\n    args[_key136] = arguments[_key136];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXMemberExpression\"].concat(args));\n}\n\nfunction JSXNamespacedName() {\n  for (var _len137 = arguments.length, args = new Array(_len137), _key137 = 0; _key137 < _len137; _key137++) {\n    args[_key137] = arguments[_key137];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXNamespacedName\"].concat(args));\n}\n\nfunction JSXOpeningElement() {\n  for (var _len138 = arguments.length, args = new Array(_len138), _key138 = 0; _key138 < _len138; _key138++) {\n    args[_key138] = arguments[_key138];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXOpeningElement\"].concat(args));\n}\n\nfunction JSXSpreadAttribute() {\n  for (var _len139 = arguments.length, args = new Array(_len139), _key139 = 0; _key139 < _len139; _key139++) {\n    args[_key139] = arguments[_key139];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXSpreadAttribute\"].concat(args));\n}\n\nfunction JSXText() {\n  for (var _len140 = arguments.length, args = new Array(_len140), _key140 = 0; _key140 < _len140; _key140++) {\n    args[_key140] = arguments[_key140];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXText\"].concat(args));\n}\n\nfunction JSXFragment() {\n  for (var _len141 = arguments.length, args = new Array(_len141), _key141 = 0; _key141 < _len141; _key141++) {\n    args[_key141] = arguments[_key141];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXFragment\"].concat(args));\n}\n\nfunction JSXOpeningFragment() {\n  for (var _len142 = arguments.length, args = new Array(_len142), _key142 = 0; _key142 < _len142; _key142++) {\n    args[_key142] = arguments[_key142];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXOpeningFragment\"].concat(args));\n}\n\nfunction JSXClosingFragment() {\n  for (var _len143 = arguments.length, args = new Array(_len143), _key143 = 0; _key143 < _len143; _key143++) {\n    args[_key143] = arguments[_key143];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"JSXClosingFragment\"].concat(args));\n}\n\nfunction Noop() {\n  for (var _len144 = arguments.length, args = new Array(_len144), _key144 = 0; _key144 < _len144; _key144++) {\n    args[_key144] = arguments[_key144];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Noop\"].concat(args));\n}\n\nfunction Placeholder() {\n  for (var _len145 = arguments.length, args = new Array(_len145), _key145 = 0; _key145 < _len145; _key145++) {\n    args[_key145] = arguments[_key145];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Placeholder\"].concat(args));\n}\n\nfunction ArgumentPlaceholder() {\n  for (var _len146 = arguments.length, args = new Array(_len146), _key146 = 0; _key146 < _len146; _key146++) {\n    args[_key146] = arguments[_key146];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ArgumentPlaceholder\"].concat(args));\n}\n\nfunction AwaitExpression() {\n  for (var _len147 = arguments.length, args = new Array(_len147), _key147 = 0; _key147 < _len147; _key147++) {\n    args[_key147] = arguments[_key147];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"AwaitExpression\"].concat(args));\n}\n\nfunction BindExpression() {\n  for (var _len148 = arguments.length, args = new Array(_len148), _key148 = 0; _key148 < _len148; _key148++) {\n    args[_key148] = arguments[_key148];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"BindExpression\"].concat(args));\n}\n\nfunction ClassProperty() {\n  for (var _len149 = arguments.length, args = new Array(_len149), _key149 = 0; _key149 < _len149; _key149++) {\n    args[_key149] = arguments[_key149];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ClassProperty\"].concat(args));\n}\n\nfunction OptionalMemberExpression() {\n  for (var _len150 = arguments.length, args = new Array(_len150), _key150 = 0; _key150 < _len150; _key150++) {\n    args[_key150] = arguments[_key150];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"OptionalMemberExpression\"].concat(args));\n}\n\nfunction PipelineTopicExpression() {\n  for (var _len151 = arguments.length, args = new Array(_len151), _key151 = 0; _key151 < _len151; _key151++) {\n    args[_key151] = arguments[_key151];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"PipelineTopicExpression\"].concat(args));\n}\n\nfunction PipelineBareFunction() {\n  for (var _len152 = arguments.length, args = new Array(_len152), _key152 = 0; _key152 < _len152; _key152++) {\n    args[_key152] = arguments[_key152];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"PipelineBareFunction\"].concat(args));\n}\n\nfunction PipelinePrimaryTopicReference() {\n  for (var _len153 = arguments.length, args = new Array(_len153), _key153 = 0; _key153 < _len153; _key153++) {\n    args[_key153] = arguments[_key153];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"PipelinePrimaryTopicReference\"].concat(args));\n}\n\nfunction OptionalCallExpression() {\n  for (var _len154 = arguments.length, args = new Array(_len154), _key154 = 0; _key154 < _len154; _key154++) {\n    args[_key154] = arguments[_key154];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"OptionalCallExpression\"].concat(args));\n}\n\nfunction ClassPrivateProperty() {\n  for (var _len155 = arguments.length, args = new Array(_len155), _key155 = 0; _key155 < _len155; _key155++) {\n    args[_key155] = arguments[_key155];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ClassPrivateProperty\"].concat(args));\n}\n\nfunction ClassPrivateMethod() {\n  for (var _len156 = arguments.length, args = new Array(_len156), _key156 = 0; _key156 < _len156; _key156++) {\n    args[_key156] = arguments[_key156];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ClassPrivateMethod\"].concat(args));\n}\n\nfunction Import() {\n  for (var _len157 = arguments.length, args = new Array(_len157), _key157 = 0; _key157 < _len157; _key157++) {\n    args[_key157] = arguments[_key157];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Import\"].concat(args));\n}\n\nfunction Decorator() {\n  for (var _len158 = arguments.length, args = new Array(_len158), _key158 = 0; _key158 < _len158; _key158++) {\n    args[_key158] = arguments[_key158];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"Decorator\"].concat(args));\n}\n\nfunction DoExpression() {\n  for (var _len159 = arguments.length, args = new Array(_len159), _key159 = 0; _key159 < _len159; _key159++) {\n    args[_key159] = arguments[_key159];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"DoExpression\"].concat(args));\n}\n\nfunction ExportDefaultSpecifier() {\n  for (var _len160 = arguments.length, args = new Array(_len160), _key160 = 0; _key160 < _len160; _key160++) {\n    args[_key160] = arguments[_key160];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ExportDefaultSpecifier\"].concat(args));\n}\n\nfunction ExportNamespaceSpecifier() {\n  for (var _len161 = arguments.length, args = new Array(_len161), _key161 = 0; _key161 < _len161; _key161++) {\n    args[_key161] = arguments[_key161];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"ExportNamespaceSpecifier\"].concat(args));\n}\n\nfunction PrivateName() {\n  for (var _len162 = arguments.length, args = new Array(_len162), _key162 = 0; _key162 < _len162; _key162++) {\n    args[_key162] = arguments[_key162];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"PrivateName\"].concat(args));\n}\n\nfunction BigIntLiteral() {\n  for (var _len163 = arguments.length, args = new Array(_len163), _key163 = 0; _key163 < _len163; _key163++) {\n    args[_key163] = arguments[_key163];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"BigIntLiteral\"].concat(args));\n}\n\nfunction TSParameterProperty() {\n  for (var _len164 = arguments.length, args = new Array(_len164), _key164 = 0; _key164 < _len164; _key164++) {\n    args[_key164] = arguments[_key164];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSParameterProperty\"].concat(args));\n}\n\nfunction TSDeclareFunction() {\n  for (var _len165 = arguments.length, args = new Array(_len165), _key165 = 0; _key165 < _len165; _key165++) {\n    args[_key165] = arguments[_key165];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSDeclareFunction\"].concat(args));\n}\n\nfunction TSDeclareMethod() {\n  for (var _len166 = arguments.length, args = new Array(_len166), _key166 = 0; _key166 < _len166; _key166++) {\n    args[_key166] = arguments[_key166];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSDeclareMethod\"].concat(args));\n}\n\nfunction TSQualifiedName() {\n  for (var _len167 = arguments.length, args = new Array(_len167), _key167 = 0; _key167 < _len167; _key167++) {\n    args[_key167] = arguments[_key167];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSQualifiedName\"].concat(args));\n}\n\nfunction TSCallSignatureDeclaration() {\n  for (var _len168 = arguments.length, args = new Array(_len168), _key168 = 0; _key168 < _len168; _key168++) {\n    args[_key168] = arguments[_key168];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSCallSignatureDeclaration\"].concat(args));\n}\n\nfunction TSConstructSignatureDeclaration() {\n  for (var _len169 = arguments.length, args = new Array(_len169), _key169 = 0; _key169 < _len169; _key169++) {\n    args[_key169] = arguments[_key169];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSConstructSignatureDeclaration\"].concat(args));\n}\n\nfunction TSPropertySignature() {\n  for (var _len170 = arguments.length, args = new Array(_len170), _key170 = 0; _key170 < _len170; _key170++) {\n    args[_key170] = arguments[_key170];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSPropertySignature\"].concat(args));\n}\n\nfunction TSMethodSignature() {\n  for (var _len171 = arguments.length, args = new Array(_len171), _key171 = 0; _key171 < _len171; _key171++) {\n    args[_key171] = arguments[_key171];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSMethodSignature\"].concat(args));\n}\n\nfunction TSIndexSignature() {\n  for (var _len172 = arguments.length, args = new Array(_len172), _key172 = 0; _key172 < _len172; _key172++) {\n    args[_key172] = arguments[_key172];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSIndexSignature\"].concat(args));\n}\n\nfunction TSAnyKeyword() {\n  for (var _len173 = arguments.length, args = new Array(_len173), _key173 = 0; _key173 < _len173; _key173++) {\n    args[_key173] = arguments[_key173];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSAnyKeyword\"].concat(args));\n}\n\nfunction TSUnknownKeyword() {\n  for (var _len174 = arguments.length, args = new Array(_len174), _key174 = 0; _key174 < _len174; _key174++) {\n    args[_key174] = arguments[_key174];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSUnknownKeyword\"].concat(args));\n}\n\nfunction TSNumberKeyword() {\n  for (var _len175 = arguments.length, args = new Array(_len175), _key175 = 0; _key175 < _len175; _key175++) {\n    args[_key175] = arguments[_key175];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSNumberKeyword\"].concat(args));\n}\n\nfunction TSObjectKeyword() {\n  for (var _len176 = arguments.length, args = new Array(_len176), _key176 = 0; _key176 < _len176; _key176++) {\n    args[_key176] = arguments[_key176];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSObjectKeyword\"].concat(args));\n}\n\nfunction TSBooleanKeyword() {\n  for (var _len177 = arguments.length, args = new Array(_len177), _key177 = 0; _key177 < _len177; _key177++) {\n    args[_key177] = arguments[_key177];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSBooleanKeyword\"].concat(args));\n}\n\nfunction TSStringKeyword() {\n  for (var _len178 = arguments.length, args = new Array(_len178), _key178 = 0; _key178 < _len178; _key178++) {\n    args[_key178] = arguments[_key178];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSStringKeyword\"].concat(args));\n}\n\nfunction TSSymbolKeyword() {\n  for (var _len179 = arguments.length, args = new Array(_len179), _key179 = 0; _key179 < _len179; _key179++) {\n    args[_key179] = arguments[_key179];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSSymbolKeyword\"].concat(args));\n}\n\nfunction TSVoidKeyword() {\n  for (var _len180 = arguments.length, args = new Array(_len180), _key180 = 0; _key180 < _len180; _key180++) {\n    args[_key180] = arguments[_key180];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSVoidKeyword\"].concat(args));\n}\n\nfunction TSUndefinedKeyword() {\n  for (var _len181 = arguments.length, args = new Array(_len181), _key181 = 0; _key181 < _len181; _key181++) {\n    args[_key181] = arguments[_key181];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSUndefinedKeyword\"].concat(args));\n}\n\nfunction TSNullKeyword() {\n  for (var _len182 = arguments.length, args = new Array(_len182), _key182 = 0; _key182 < _len182; _key182++) {\n    args[_key182] = arguments[_key182];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSNullKeyword\"].concat(args));\n}\n\nfunction TSNeverKeyword() {\n  for (var _len183 = arguments.length, args = new Array(_len183), _key183 = 0; _key183 < _len183; _key183++) {\n    args[_key183] = arguments[_key183];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSNeverKeyword\"].concat(args));\n}\n\nfunction TSThisType() {\n  for (var _len184 = arguments.length, args = new Array(_len184), _key184 = 0; _key184 < _len184; _key184++) {\n    args[_key184] = arguments[_key184];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSThisType\"].concat(args));\n}\n\nfunction TSFunctionType() {\n  for (var _len185 = arguments.length, args = new Array(_len185), _key185 = 0; _key185 < _len185; _key185++) {\n    args[_key185] = arguments[_key185];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSFunctionType\"].concat(args));\n}\n\nfunction TSConstructorType() {\n  for (var _len186 = arguments.length, args = new Array(_len186), _key186 = 0; _key186 < _len186; _key186++) {\n    args[_key186] = arguments[_key186];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSConstructorType\"].concat(args));\n}\n\nfunction TSTypeReference() {\n  for (var _len187 = arguments.length, args = new Array(_len187), _key187 = 0; _key187 < _len187; _key187++) {\n    args[_key187] = arguments[_key187];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeReference\"].concat(args));\n}\n\nfunction TSTypePredicate() {\n  for (var _len188 = arguments.length, args = new Array(_len188), _key188 = 0; _key188 < _len188; _key188++) {\n    args[_key188] = arguments[_key188];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypePredicate\"].concat(args));\n}\n\nfunction TSTypeQuery() {\n  for (var _len189 = arguments.length, args = new Array(_len189), _key189 = 0; _key189 < _len189; _key189++) {\n    args[_key189] = arguments[_key189];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeQuery\"].concat(args));\n}\n\nfunction TSTypeLiteral() {\n  for (var _len190 = arguments.length, args = new Array(_len190), _key190 = 0; _key190 < _len190; _key190++) {\n    args[_key190] = arguments[_key190];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeLiteral\"].concat(args));\n}\n\nfunction TSArrayType() {\n  for (var _len191 = arguments.length, args = new Array(_len191), _key191 = 0; _key191 < _len191; _key191++) {\n    args[_key191] = arguments[_key191];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSArrayType\"].concat(args));\n}\n\nfunction TSTupleType() {\n  for (var _len192 = arguments.length, args = new Array(_len192), _key192 = 0; _key192 < _len192; _key192++) {\n    args[_key192] = arguments[_key192];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTupleType\"].concat(args));\n}\n\nfunction TSOptionalType() {\n  for (var _len193 = arguments.length, args = new Array(_len193), _key193 = 0; _key193 < _len193; _key193++) {\n    args[_key193] = arguments[_key193];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSOptionalType\"].concat(args));\n}\n\nfunction TSRestType() {\n  for (var _len194 = arguments.length, args = new Array(_len194), _key194 = 0; _key194 < _len194; _key194++) {\n    args[_key194] = arguments[_key194];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSRestType\"].concat(args));\n}\n\nfunction TSUnionType() {\n  for (var _len195 = arguments.length, args = new Array(_len195), _key195 = 0; _key195 < _len195; _key195++) {\n    args[_key195] = arguments[_key195];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSUnionType\"].concat(args));\n}\n\nfunction TSIntersectionType() {\n  for (var _len196 = arguments.length, args = new Array(_len196), _key196 = 0; _key196 < _len196; _key196++) {\n    args[_key196] = arguments[_key196];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSIntersectionType\"].concat(args));\n}\n\nfunction TSConditionalType() {\n  for (var _len197 = arguments.length, args = new Array(_len197), _key197 = 0; _key197 < _len197; _key197++) {\n    args[_key197] = arguments[_key197];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSConditionalType\"].concat(args));\n}\n\nfunction TSInferType() {\n  for (var _len198 = arguments.length, args = new Array(_len198), _key198 = 0; _key198 < _len198; _key198++) {\n    args[_key198] = arguments[_key198];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSInferType\"].concat(args));\n}\n\nfunction TSParenthesizedType() {\n  for (var _len199 = arguments.length, args = new Array(_len199), _key199 = 0; _key199 < _len199; _key199++) {\n    args[_key199] = arguments[_key199];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSParenthesizedType\"].concat(args));\n}\n\nfunction TSTypeOperator() {\n  for (var _len200 = arguments.length, args = new Array(_len200), _key200 = 0; _key200 < _len200; _key200++) {\n    args[_key200] = arguments[_key200];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeOperator\"].concat(args));\n}\n\nfunction TSIndexedAccessType() {\n  for (var _len201 = arguments.length, args = new Array(_len201), _key201 = 0; _key201 < _len201; _key201++) {\n    args[_key201] = arguments[_key201];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSIndexedAccessType\"].concat(args));\n}\n\nfunction TSMappedType() {\n  for (var _len202 = arguments.length, args = new Array(_len202), _key202 = 0; _key202 < _len202; _key202++) {\n    args[_key202] = arguments[_key202];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSMappedType\"].concat(args));\n}\n\nfunction TSLiteralType() {\n  for (var _len203 = arguments.length, args = new Array(_len203), _key203 = 0; _key203 < _len203; _key203++) {\n    args[_key203] = arguments[_key203];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSLiteralType\"].concat(args));\n}\n\nfunction TSExpressionWithTypeArguments() {\n  for (var _len204 = arguments.length, args = new Array(_len204), _key204 = 0; _key204 < _len204; _key204++) {\n    args[_key204] = arguments[_key204];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSExpressionWithTypeArguments\"].concat(args));\n}\n\nfunction TSInterfaceDeclaration() {\n  for (var _len205 = arguments.length, args = new Array(_len205), _key205 = 0; _key205 < _len205; _key205++) {\n    args[_key205] = arguments[_key205];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSInterfaceDeclaration\"].concat(args));\n}\n\nfunction TSInterfaceBody() {\n  for (var _len206 = arguments.length, args = new Array(_len206), _key206 = 0; _key206 < _len206; _key206++) {\n    args[_key206] = arguments[_key206];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSInterfaceBody\"].concat(args));\n}\n\nfunction TSTypeAliasDeclaration() {\n  for (var _len207 = arguments.length, args = new Array(_len207), _key207 = 0; _key207 < _len207; _key207++) {\n    args[_key207] = arguments[_key207];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeAliasDeclaration\"].concat(args));\n}\n\nfunction TSAsExpression() {\n  for (var _len208 = arguments.length, args = new Array(_len208), _key208 = 0; _key208 < _len208; _key208++) {\n    args[_key208] = arguments[_key208];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSAsExpression\"].concat(args));\n}\n\nfunction TSTypeAssertion() {\n  for (var _len209 = arguments.length, args = new Array(_len209), _key209 = 0; _key209 < _len209; _key209++) {\n    args[_key209] = arguments[_key209];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeAssertion\"].concat(args));\n}\n\nfunction TSEnumDeclaration() {\n  for (var _len210 = arguments.length, args = new Array(_len210), _key210 = 0; _key210 < _len210; _key210++) {\n    args[_key210] = arguments[_key210];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSEnumDeclaration\"].concat(args));\n}\n\nfunction TSEnumMember() {\n  for (var _len211 = arguments.length, args = new Array(_len211), _key211 = 0; _key211 < _len211; _key211++) {\n    args[_key211] = arguments[_key211];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSEnumMember\"].concat(args));\n}\n\nfunction TSModuleDeclaration() {\n  for (var _len212 = arguments.length, args = new Array(_len212), _key212 = 0; _key212 < _len212; _key212++) {\n    args[_key212] = arguments[_key212];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSModuleDeclaration\"].concat(args));\n}\n\nfunction TSModuleBlock() {\n  for (var _len213 = arguments.length, args = new Array(_len213), _key213 = 0; _key213 < _len213; _key213++) {\n    args[_key213] = arguments[_key213];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSModuleBlock\"].concat(args));\n}\n\nfunction TSImportType() {\n  for (var _len214 = arguments.length, args = new Array(_len214), _key214 = 0; _key214 < _len214; _key214++) {\n    args[_key214] = arguments[_key214];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSImportType\"].concat(args));\n}\n\nfunction TSImportEqualsDeclaration() {\n  for (var _len215 = arguments.length, args = new Array(_len215), _key215 = 0; _key215 < _len215; _key215++) {\n    args[_key215] = arguments[_key215];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSImportEqualsDeclaration\"].concat(args));\n}\n\nfunction TSExternalModuleReference() {\n  for (var _len216 = arguments.length, args = new Array(_len216), _key216 = 0; _key216 < _len216; _key216++) {\n    args[_key216] = arguments[_key216];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSExternalModuleReference\"].concat(args));\n}\n\nfunction TSNonNullExpression() {\n  for (var _len217 = arguments.length, args = new Array(_len217), _key217 = 0; _key217 < _len217; _key217++) {\n    args[_key217] = arguments[_key217];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSNonNullExpression\"].concat(args));\n}\n\nfunction TSExportAssignment() {\n  for (var _len218 = arguments.length, args = new Array(_len218), _key218 = 0; _key218 < _len218; _key218++) {\n    args[_key218] = arguments[_key218];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSExportAssignment\"].concat(args));\n}\n\nfunction TSNamespaceExportDeclaration() {\n  for (var _len219 = arguments.length, args = new Array(_len219), _key219 = 0; _key219 < _len219; _key219++) {\n    args[_key219] = arguments[_key219];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSNamespaceExportDeclaration\"].concat(args));\n}\n\nfunction TSTypeAnnotation() {\n  for (var _len220 = arguments.length, args = new Array(_len220), _key220 = 0; _key220 < _len220; _key220++) {\n    args[_key220] = arguments[_key220];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeAnnotation\"].concat(args));\n}\n\nfunction TSTypeParameterInstantiation() {\n  for (var _len221 = arguments.length, args = new Array(_len221), _key221 = 0; _key221 < _len221; _key221++) {\n    args[_key221] = arguments[_key221];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeParameterInstantiation\"].concat(args));\n}\n\nfunction TSTypeParameterDeclaration() {\n  for (var _len222 = arguments.length, args = new Array(_len222), _key222 = 0; _key222 < _len222; _key222++) {\n    args[_key222] = arguments[_key222];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeParameterDeclaration\"].concat(args));\n}\n\nfunction TSTypeParameter() {\n  for (var _len223 = arguments.length, args = new Array(_len223), _key223 = 0; _key223 < _len223; _key223++) {\n    args[_key223] = arguments[_key223];\n  }\n\n  return (0, _builder.default).apply(void 0, [\"TSTypeParameter\"].concat(args));\n}\n\nfunction NumberLiteral() {\n  console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n\n  for (var _len224 = arguments.length, args = new Array(_len224), _key224 = 0; _key224 < _len224; _key224++) {\n    args[_key224] = arguments[_key224];\n  }\n\n  return NumberLiteral.apply(void 0, [\"NumberLiteral\"].concat(args));\n}\n\nfunction RegexLiteral() {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n\n  for (var _len225 = arguments.length, args = new Array(_len225), _key225 = 0; _key225 < _len225; _key225++) {\n    args[_key225] = arguments[_key225];\n  }\n\n  return RegexLiteral.apply(void 0, [\"RegexLiteral\"].concat(args));\n}\n\nfunction RestProperty() {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n\n  for (var _len226 = arguments.length, args = new Array(_len226), _key226 = 0; _key226 < _len226; _key226++) {\n    args[_key226] = arguments[_key226];\n  }\n\n  return RestProperty.apply(void 0, [\"RestProperty\"].concat(args));\n}\n\nfunction SpreadProperty() {\n  console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n\n  for (var _len227 = arguments.length, args = new Array(_len227), _key227 = 0; _key227 < _len227; _key227++) {\n    args[_key227] = arguments[_key227];\n  }\n\n  return SpreadProperty.apply(void 0, [\"SpreadProperty\"].concat(args));\n}","map":null,"metadata":{},"sourceType":"script"}