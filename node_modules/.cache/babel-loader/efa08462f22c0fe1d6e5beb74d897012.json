{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar concatStream = require('concat-stream');\n\nvar Readable = require('stream').Readable;\n\nvar path = require(\"path\");\n\nvar fs = require(\"fs-extra\");\n\nvar SolidFileStorage =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function SolidFileStorage() {\n    _classCallCheck(this, SolidFileStorage);\n\n    this.prefix = \"file\";\n    this.name = \"solid-rest-file-storage-1.0.0\";\n  }\n\n  _createClass(SolidFileStorage, [{\n    key: \"_makeStream\",\n    value: function _makeStream(text) {\n      var s = new Readable();\n      s.push(text);\n      s.push(null);\n      return s;\n    }\n  }, {\n    key: \"text\",\n    value: function () {\n      var _text = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(stream) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  stream = stream || \"\";\n                  if (typeof stream === \"string\") return resolve(stream);\n                  stream.pipe(concatStream({\n                    encoding: 'string'\n                  }, resolve())).catch(function (e) {\n                    console.log(e);\n                    reject();\n                  });\n                  stream.on('error', reject());\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function text(_x) {\n        return _text.apply(this, arguments);\n      }\n\n      return text;\n    }()\n  }, {\n    key: \"json\",\n    value: function () {\n      var _json = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(stream) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", text(stream).then(function (text) {\n                  return JSON.parse(text);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function json(_x2) {\n        return _json.apply(this, arguments);\n      }\n\n      return json;\n    }()\n  }, {\n    key: \"getObjectType\",\n    value: function () {\n      var _getObjectType = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(fn, options) {\n        var stat, type;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                try {\n                  stat = fs.lstatSync(fn);\n                } catch (err) {}\n\n                type = stat && stat.isDirectory() ? \"Container\" : \"Resource\";\n                if (!stat && fn.endsWith('/')) type = \"Container\";\n                return _context3.abrupt(\"return\", Promise.resolve([type, stat]));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getObjectType(_x3, _x4) {\n        return _getObjectType.apply(this, arguments);\n      }\n\n      return getObjectType;\n    }()\n  }, {\n    key: \"getResource\",\n    value: function () {\n      var _getResource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(pathname, options, objectType) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", new Promise(function (resolve) {\n                  var fn = pathname.replace(/.*\\//, '');\n                  var success = \"\";\n\n                  try {\n                    fs.createReadStream(pathname).on(\"data\", function (chunk) {\n                      success = success + chunk;\n                    }).on(\"error\", function (err) {\n                      console.log(err);\n                    }).on(\"end\", function () {\n                      return resolve([200, success]);\n                    });\n                  } catch (e) {}\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getResource(_x5, _x6, _x7) {\n        return _getResource.apply(this, arguments);\n      }\n\n      return getResource;\n    }()\n  }, {\n    key: \"putResource\",\n    value: function () {\n      var _putResource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(pathname, options) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", new Promise(function (resolve) {\n                  options.body = _this._makeStream(options.body);\n                  options.body.pipe(fs.createWriteStream(pathname)).on('finish', function () {\n                    resolve([201]);\n                  }).on('error', function (err) {\n                    if (options.method === \"PUT\" && options.objectType === \"Container\") resolve([405]);\n                    resolve([500]);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function putResource(_x8, _x9) {\n        return _putResource.apply(this, arguments);\n      }\n\n      return putResource;\n    }()\n  }, {\n    key: \"deleteResource\",\n    value: function () {\n      var _deleteResource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(fn) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", new Promise(function (resolve) {\n                  fs.unlink(fn, function (err) {\n                    if (err) resolve([409]);else resolve([200]);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function deleteResource(_x10) {\n        return _deleteResource.apply(this, arguments);\n      }\n\n      return deleteResource;\n    }()\n  }, {\n    key: \"deleteContainer\",\n    value: function deleteContainer(fn) {\n      return new Promise(function (resolve) {\n        fs.rmdir(fn, function (err) {\n          if (err) {\n            resolve([409]);\n          } else {\n            resolve([200]);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"postContainer\",\n    value: function postContainer(fn, options) {\n      fn = fn.replace(/\\/$/, '');\n      return new Promise(function (resolve) {\n        if (fs.existsSync(fn)) {\n          return resolve([201]);\n        }\n\n        fs.mkdirp(fn, {}, function (err) {\n          if (err) {\n            return resolve([500]);\n          } else {\n            return resolve([201]);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"makeContainers\",\n    value: function () {\n      var _makeContainers = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(pathname, options) {\n        var filename, reg, foldername, _ref, _ref2, t, exists;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                filename = path.basename(pathname);\n                reg = new RegExp(filename + \"\\$\");\n                foldername = pathname.replace(reg, '');\n                _context7.next = 5;\n                return this.getObjectType(foldername);\n\n              case 5:\n                _ref = _context7.sent;\n                _ref2 = _slicedToArray(_ref, 2);\n                t = _ref2[0];\n                exists = _ref2[1];\n\n                if (!exists) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", Promise.resolve([200]));\n\n              case 11:\n                foldername = foldername.replace(/\\/$/, '');\n                _context7.next = 14;\n                return fs.mkdirpSync(foldername, {}, function (err) {\n                  if (err) return Promise.resolve(500);else return Promise.resolve(201);\n                });\n\n              case 14:\n                return _context7.abrupt(\"return\", Promise.resolve([200]));\n\n              case 15:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function makeContainers(_x11, _x12) {\n        return _makeContainers.apply(this, arguments);\n      }\n\n      return makeContainers;\n    }()\n  }, {\n    key: \"getContainer\",\n    value: function () {\n      var _getContainer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(pathname, options) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", fs.readdirSync(pathname));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function getContainer(_x13, _x14) {\n        return _getContainer.apply(this, arguments);\n      }\n\n      return getContainer;\n    }()\n  }]);\n\n  return SolidFileStorage;\n}();\n\nmodule.exports = SolidFileStorage;","map":null,"metadata":{},"sourceType":"script"}