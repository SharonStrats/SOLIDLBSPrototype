{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport BlankNode from './blank-node';\nimport ClassOrder from './class-order';\nimport Collection from './collection';\nimport Literal from './literal';\nimport log from './log';\nimport NamedNode from './named-node';\nimport Namespace from './namespace';\nimport Node from './node';\nimport Serializer from './serialize';\nimport Statement from './statement';\nimport Variable from './variable';\n/** @module formula */\n\nvar Formula =\n/*#__PURE__*/\nfunction (_Node) {\n  _inherits(Formula, _Node);\n\n  /**\n  * @constructor\n  * @param statements - Initial array of statements\n  * @param constraints - initial array of constraints\n  * @param initBindings - initial bindings used in Query\n  * @param optional - optional\n  */\n  function Formula(statements, constraints, initBindings, optional) {\n    var _this;\n\n    _classCallCheck(this, Formula);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Formula).call(this));\n    _this.termType = Formula.termType;\n    _this.statements = statements || [];\n    _this.constraints = constraints || [];\n    _this.initBindings = initBindings || [];\n    _this.optional = optional || [];\n    return _this;\n  }\n  /** Add a statement from its parts\n  * @param {Node} subject - the first part of the statemnt\n  * @param {Node} predicate - the second part of the statemnt\n  * @param {Node} obbject - the third part of the statemnt\n  * @param {Node} graph - the last part of the statemnt\n  */\n\n\n  _createClass(Formula, [{\n    key: \"add\",\n    value: function add(subject, predicate, object, graph) {\n      return this.statements.push(new Statement(subject, predicate, object, graph));\n    }\n    /** Add a statment object\n    * @param {Statement} statement - an existing constructed statement to add\n    */\n\n  }, {\n    key: \"addStatement\",\n    value: function addStatement(st) {\n      return this.statements.push(st);\n    }\n  }, {\n    key: \"bnode\",\n    value: function bnode(id) {\n      return new BlankNode(id);\n    }\n  }, {\n    key: \"addAll\",\n    value: function addAll(statements) {\n      var _this2 = this;\n\n      statements.forEach(function (quad) {\n        _this2.add(quad.subject, quad.predicate, quad.object, quad.graph);\n      });\n    }\n    /** Follow link from one node, using one wildcard, looking for one\n    *\n    * For example, any(me, knows, null, profile)  - a person I know accoring to my profile .\n    * any(me, knows, null, null)  - a person I know accoring to anything in store .\n    * any(null, knows, me, null)  - a person who know me accoring to anything in store .\n    *\n    * @param {Node} subject - A node to search for as subject, or if null, a wildcard\n    * @param {Node} predicate - A node to search for as predicate, or if null, a wildcard\n    * @param {Node} object - A node to search for as object, or if null, a wildcard\n    * @param {Node} graph - A node to search for as graph, or if null, a wildcard\n    * @returns {Node} - A node which match the wildcard position, or null\n    */\n\n  }, {\n    key: \"any\",\n    value: function any(s, p, o, g) {\n      var st = this.anyStatementMatching(s, p, o, g);\n\n      if (st == null) {\n        return void 0;\n      } else if (s == null) {\n        return st.subject;\n      } else if (p == null) {\n        return st.predicate;\n      } else if (o == null) {\n        return st.object;\n      }\n\n      return void 0;\n    }\n  }, {\n    key: \"anyValue\",\n    value: function anyValue(s, p, o, g) {\n      var y = this.any(s, p, o, g);\n      return y ? y.value : void 0;\n    }\n  }, {\n    key: \"anyJS\",\n    value: function anyJS(s, p, o, g) {\n      var y = this.any(s, p, o, g);\n      return y ? Node.toJS(y) : void 0;\n    }\n  }, {\n    key: \"anyStatementMatching\",\n    value: function anyStatementMatching(subj, pred, obj, why) {\n      var x = this.statementsMatching(subj, pred, obj, why, true);\n\n      if (!x || x.length === 0) {\n        return undefined;\n      }\n\n      return x[0];\n    }\n    /** Search the Store\n     *\n     * This is really a teaching method as to do this properly you would use IndexedFormula\n     *\n     * @param {Node} subject - A node to search for as subject, or if null, a wildcard\n     * @param {Node} predicate - A node to search for as predicate, or if null, a wildcard\n     * @param {Node} object - A node to search for as object, or if null, a wildcard\n     * @param {Node} graph - A node to search for as graph, or if null, a wildcard\n     * @param {Boolean} justOne - flag - stop when found one rather than get all of them?\n     * @returns {Array<Node>} - An array of nodes which match the wildcard position\n     */\n\n  }, {\n    key: \"statementsMatching\",\n    value: function statementsMatching(subj, pred, obj, why, justOne) {\n      var found = this.statements.filter(function (st) {\n        return (!subj || subj.sameTerm(st.subject)) && (!pred || pred.sameTerm(st.predicate)) && (!obj || subj.sameTerm(st.object)) && (!why || why.sameTerm(st.subject));\n      });\n      return found;\n    }\n    /**\n     * Finds the types in the list which have no *stored* subtypes\n     * These are a set of classes which provide by themselves complete\n     * information -- the other classes are redundant for those who\n     * know the class DAG.\n     */\n\n  }, {\n    key: \"bottomTypeURIs\",\n    value: function bottomTypeURIs(types) {\n      var bots;\n      var bottom;\n      var elt;\n      var i;\n      var k;\n      var len;\n      var ref;\n      var subs;\n      var v;\n      bots = [];\n\n      for (k in types) {\n        if (!types.hasOwnProperty(k)) continue;\n        v = types[k];\n        subs = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), this.sym(k));\n        bottom = true;\n        i = 0;\n\n        for (len = subs.length; i < len; i++) {\n          elt = subs[i];\n          ref = elt.uri;\n\n          if (ref in types) {\n            // the subclass is one we know\n            bottom = false;\n            break;\n          }\n        }\n\n        if (bottom) {\n          bots[k] = v;\n        }\n      }\n\n      return bots;\n    }\n  }, {\n    key: \"collection\",\n    value: function collection() {\n      return new Collection();\n    }\n    /** Follow links from one node, using one wildcard\n    *\n    * For example, each(me, knows, null, profile)  - people I know accoring to my profile .\n    * each(me, knows, null, null)  - people I know accoring to anything in store .\n    * each(null, knows, me, null)  - people who know me accoring to anything in store .\n    *\n    * @param {Node} subject - A node to search for as subject, or if null, a wildcard\n    * @param {Node} predicate - A node to search for as predicate, or if null, a wildcard\n    * @param {Node} object - A node to search for as object, or if null, a wildcard\n    * @param {Node} graph - A node to search for as graph, or if null, a wildcard\n    * @returns {Array<Node>} - An array of nodes which match the wildcard position\n    */\n\n  }, {\n    key: \"each\",\n    value: function each(s, p, o, g) {\n      var elt, i, l, m, q;\n      var len, len1, len2, len3;\n      var results = [];\n      var sts = this.statementsMatching(s, p, o, g, false);\n\n      if (s == null) {\n        for (i = 0, len = sts.length; i < len; i++) {\n          elt = sts[i];\n          results.push(elt.subject);\n        }\n      } else if (p == null) {\n        for (l = 0, len1 = sts.length; l < len1; l++) {\n          elt = sts[l];\n          results.push(elt.predicate);\n        }\n      } else if (o == null) {\n        for (m = 0, len2 = sts.length; m < len2; m++) {\n          elt = sts[m];\n          results.push(elt.object);\n        }\n      } else if (g == null) {\n        for (q = 0, len3 = sts.length; q < len3; q++) {\n          elt = sts[q];\n          results.push(elt.why);\n        }\n      }\n\n      return results;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!other) {\n        return false;\n      }\n\n      return this.hashString() === other.hashString();\n    }\n    /*\n    For thisClass or any subclass, anything which has it is its type\n    or is the object of something which has the type as its range, or subject\n    of something which has the type as its domain\n    We don't bother doing subproperty (yet?)as it doesn't seeem to be used much.\n    Get all the Classes of which we can RDFS-infer the subject is a member\n    @returns a hash of URIs\n    */\n\n    /**\n     * For thisClass or any subclass, anything which has it is its type\n     * or is the object of something which has the type as its range, or subject\n     * of something which has the type as its domain\n     * We don't bother doing subproperty (yet?)as it doesn't seeem to be used\n     * much.\n     * Get all the Classes of which we can RDFS-infer the subject is a member\n     * @return a hash of URIs\n     */\n\n  }, {\n    key: \"findMembersNT\",\n    value: function findMembersNT(thisClass) {\n      var i;\n      var l;\n      var len;\n      var len1;\n      var len2;\n      var len3;\n      var len4;\n      var m;\n      var members;\n      var pred;\n      var q;\n      var ref;\n      var ref1;\n      var ref2;\n      var ref3;\n      var ref4;\n      var ref5;\n      var seeds;\n      var st;\n      var t;\n      var u;\n      seeds = {};\n      seeds[thisClass.toNT()] = true;\n      members = {};\n      ref = this.transitiveClosure(seeds, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), true);\n\n      for (t in ref) {\n        if (!ref.hasOwnProperty(t)) continue;\n        ref1 = this.statementsMatching(void 0, this.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), this.fromNT(t));\n\n        for (i = 0, len = ref1.length; i < len; i++) {\n          st = ref1[i];\n          members[st.subject.toNT()] = st;\n        }\n\n        ref2 = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#domain'), this.fromNT(t));\n\n        for (l = 0, len1 = ref2.length; l < len1; l++) {\n          pred = ref2[l];\n          ref3 = this.statementsMatching(void 0, pred);\n\n          for (m = 0, len2 = ref3.length; m < len2; m++) {\n            st = ref3[m];\n            members[st.subject.toNT()] = st;\n          }\n        }\n\n        ref4 = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#range'), this.fromNT(t));\n\n        for (q = 0, len3 = ref4.length; q < len3; q++) {\n          pred = ref4[q];\n          ref5 = this.statementsMatching(void 0, pred);\n\n          for (u = 0, len4 = ref5.length; u < len4; u++) {\n            st = ref5[u];\n            members[st.object.toNT()] = st;\n          }\n        }\n      }\n\n      return members;\n    }\n  }, {\n    key: \"findMemberURIs\",\n    value: function findMemberURIs(subject) {\n      return this.NTtoURI(this.findMembersNT(subject));\n    }\n    /**\n     * Get all the Classes of which we can RDFS-infer the subject is a superclass\n     * Returns a hash table where key is NT of type and value is statement why we\n     * think so.\n     * Does NOT return terms, returns URI strings.\n     * We use NT representations in this version because they handle blank nodes.\n     */\n\n  }, {\n    key: \"findSubClassesNT\",\n    value: function findSubClassesNT(subject) {\n      var types = {};\n      types[subject.toNT()] = true;\n      return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), true);\n    }\n    /**\n     * Get all the Classes of which we can RDFS-infer the subject is a subclass\n     * @param {NamedNode} subject - The thing whose classes are to be found\n     * @returns a hash table where key is NT of type and value is statement why we\n     * think so.\n     * Does NOT return terms, returns URI strings.\n     * We use NT representations in this version because they handle blank nodes.\n     */\n\n  }, {\n    key: \"findSuperClassesNT\",\n    value: function findSuperClassesNT(subject) {\n      var types = {};\n      types[subject.toNT()] = true;\n      return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), false);\n    }\n    /**\n     * Get all the Classes of which we can RDFS-infer the subject is a member\n     * todo: This will loop is there is a class subclass loop (Sublass loops are\n     * not illegal)\n     * @param {NamedNode} subject - The thing whose classes are to be found\n     * @returns a hash table where key is NT of type and value is statement why we think so.\n     * Does NOT return terms, returns URI strings.\n     * We use NT representations in this version because they handle blank nodes.\n     */\n\n  }, {\n    key: \"findTypesNT\",\n    value: function findTypesNT(subject) {\n      var domain;\n      var i;\n      var l;\n      var len;\n      var len1;\n      var len2;\n      var len3;\n      var m;\n      var q;\n      var range;\n      var rdftype;\n      var ref;\n      var ref1;\n      var ref2;\n      var ref3;\n      var st;\n      var types;\n      rdftype = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';\n      types = [];\n      ref = this.statementsMatching(subject, void 0, void 0);\n\n      for (i = 0, len = ref.length; i < len; i++) {\n        st = ref[i];\n\n        if (st.predicate.uri === rdftype) {\n          types[st.object.toNT()] = st;\n        } else {\n          ref1 = this.each(st.predicate, this.sym('http://www.w3.org/2000/01/rdf-schema#domain'));\n\n          for (l = 0, len1 = ref1.length; l < len1; l++) {\n            range = ref1[l];\n            types[range.toNT()] = st;\n          }\n        }\n      }\n\n      ref2 = this.statementsMatching(void 0, void 0, subject);\n\n      for (m = 0, len2 = ref2.length; m < len2; m++) {\n        st = ref2[m];\n        ref3 = this.each(st.predicate, this.sym('http://www.w3.org/2000/01/rdf-schema#range'));\n\n        for (q = 0, len3 = ref3.length; q < len3; q++) {\n          domain = ref3[q];\n          types[domain.toNT()] = st;\n        }\n      }\n\n      return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), false);\n    }\n  }, {\n    key: \"findTypeURIs\",\n    value: function findTypeURIs(subject) {\n      return this.NTtoURI(this.findTypesNT(subject));\n    }\n    /** Trace statements which connect directly, or through bnodes\n     *\n     * @param {NamedNode} subject - The node to start looking for statments\n     * @param {NamedNode} doc - The document to be searched, or null to search all documents\n     * @returns an array of statements, duplicate statements are suppresssed.\n     */\n\n  }, {\n    key: \"connectedStatements\",\n    value: function connectedStatements(subject, doc, excludePredicateURIs) {\n      excludePredicateURIs = excludePredicateURIs || [];\n      var todo = [subject];\n      var done = [];\n      var doneArcs = [];\n      var result = [];\n      var self = this;\n\n      var follow = function follow(x) {\n        var queue = function queue(x) {\n          if (x.termType === 'BlankNode' && !done[x.value]) {\n            done[x.value] = true;\n            todo.push(x);\n          }\n        };\n\n        var sts = self.statementsMatching(null, null, x, doc).concat(self.statementsMatching(x, null, null, doc));\n        sts = sts.filter(function (st) {\n          if (excludePredicateURIs[st.predicate.uri]) return false;\n          var hash = st.toNT();\n          if (doneArcs[hash]) return false;\n          doneArcs[hash] = true;\n          return true;\n        });\n        sts.forEach(function (st, i) {\n          queue(st.subject);\n          queue(st.object);\n        });\n        result = result.concat(sts);\n      };\n\n      while (todo.length) {\n        follow(todo.shift());\n      } // console.log('' + result.length + ' statements about ' + subject)\n\n\n      return result;\n    }\n  }, {\n    key: \"formula\",\n    value: function formula() {\n      return new Formula();\n    }\n    /**\n     * Transforms an NTriples string format into a Node.\n     * The bnode bit should not be used on program-external values; designed\n     * for internal work such as storing a bnode id in an HTML attribute.\n     * This will only parse the strings generated by the vaious toNT() methods.\n     */\n\n  }, {\n    key: \"fromNT\",\n    value: function fromNT(str) {\n      var dt, k, lang;\n\n      switch (str[0]) {\n        case '<':\n          return this.sym(str.slice(1, -1));\n\n        case '\"':\n          lang = void 0;\n          dt = void 0;\n          k = str.lastIndexOf('\"');\n\n          if (k < str.length - 1) {\n            if (str[k + 1] === '@') {\n              lang = str.slice(k + 2);\n            } else if (str.slice(k + 1, k + 3) === '^^') {\n              dt = this.fromNT(str.slice(k + 3));\n            } else {\n              throw new Error(\"Can't convert string from NT: \" + str);\n            }\n          }\n\n          str = str.slice(1, k);\n          str = str.replace(/\\\\\"/g, '\"');\n          str = str.replace(/\\\\n/g, '\\n');\n          str = str.replace(/\\\\\\\\/g, '\\\\');\n          return this.literal(str, lang, dt);\n\n        case '_':\n          return new BlankNode(str.slice(2));\n\n        case '?':\n          return new Variable(str.slice(1));\n      }\n\n      throw new Error(\"Can't convert from NT: \" + str);\n    }\n  }, {\n    key: \"holds\",\n    value: function holds(s, p, o, g) {\n      var i;\n\n      if (arguments.length === 1) {\n        if (!s) {\n          return true;\n        }\n\n        if (s instanceof Array) {\n          for (i = 0; i < s.length; i++) {\n            if (!this.holds(s[i])) {\n              return false;\n            }\n          }\n\n          return true;\n        } else if (s instanceof Statement) {\n          return this.holds(s.subject, s.predicate, s.object, s.why);\n        } else if (s.statements) {\n          return this.holds(s.statements);\n        }\n      }\n\n      var st = this.anyStatementMatching(s, p, o, g);\n      return st != null;\n    }\n  }, {\n    key: \"holdsStatement\",\n    value: function holdsStatement(st) {\n      return this.holds(st.subject, st.predicate, st.object, st.why);\n    }\n  }, {\n    key: \"list\",\n    value: function list(values) {\n      var collection = new Collection();\n      values.forEach(function (val) {\n        collection.append(val);\n      });\n      return collection;\n    }\n  }, {\n    key: \"literal\",\n    value: function literal(val, lang, dt) {\n      return new Literal('' + val, lang, dt);\n    }\n    /**\n     * transform a collection of NTriple URIs into their URI strings\n     * @param t some iterable colletion of NTriple URI strings\n     * @return a collection of the URIs as strings\n     * todo: explain why it is important to go through NT\n     */\n\n  }, {\n    key: \"NTtoURI\",\n    value: function NTtoURI(t) {\n      var k, v;\n      var uris = {};\n\n      for (k in t) {\n        if (!t.hasOwnProperty(k)) continue;\n        v = t[k];\n\n        if (k[0] === '<') {\n          uris[k.slice(1, -1)] = v;\n        }\n      }\n\n      return uris;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(base, contentType, provenance) {\n      var documentString;\n      var sts;\n      var sz;\n      sz = Serializer(this);\n      sz.suggestNamespaces(this.namespaces);\n      sz.setBase(base);\n\n      if (provenance) {\n        sts = this.statementsMatching(void 0, void 0, void 0, provenance);\n      } else {\n        sts = this.statements;\n      }\n\n      switch (contentType != null ? contentType : 'text/n3') {\n        case 'application/rdf+xml':\n          documentString = sz.statementsToXML(sts);\n          break;\n\n        case 'text/n3':\n        case 'text/turtle':\n          documentString = sz.statementsToN3(sts);\n          break;\n\n        default:\n          throw new Error('serialize: Content-type ' + contentType + ' not supported.');\n      }\n\n      return documentString;\n    }\n  }, {\n    key: \"substitute\",\n    value: function substitute(bindings) {\n      var statementsCopy = this.statements.map(function (ea) {\n        return ea.substitute(bindings);\n      });\n      console.log('Formula subs statmnts:' + statementsCopy);\n      var y = new Formula();\n      y.add(statementsCopy);\n      console.log('indexed-form subs formula:' + y);\n      return y;\n    }\n  }, {\n    key: \"sym\",\n    value: function sym(uri, name) {\n      if (name) {\n        throw new Error('This feature (kb.sym with 2 args) is removed. Do not assume prefix mappings.');\n      }\n\n      return new NamedNode(uri);\n    }\n  }, {\n    key: \"the\",\n    value: function the(s, p, o, g) {\n      var x = this.any(s, p, o, g);\n\n      if (x == null) {\n        log.error('No value found for the() {' + s + ' ' + p + ' ' + o + '}.');\n      }\n\n      return x;\n    }\n    /**\n     * RDFS Inference\n     * These are hand-written implementations of a backward-chaining reasoner\n     * over the RDFS axioms.\n     * @param seeds {Object} a hash of NTs of classes to start with\n     * @param predicate The property to trace though\n     * @param inverse trace inverse direction\n     */\n\n  }, {\n    key: \"transitiveClosure\",\n    value: function transitiveClosure(seeds, predicate, inverse) {\n      var elt, i, len, s, sups, t;\n      var agenda = {};\n      Object.assign(agenda, seeds); // make a copy\n\n      var done = {}; // classes we have looked up\n\n      while (true) {\n        t = function () {\n          for (var p in agenda) {\n            if (!agenda.hasOwnProperty(p)) continue;\n            return p;\n          }\n        }();\n\n        if (t == null) {\n          return done;\n        }\n\n        sups = inverse ? this.each(void 0, predicate, this.fromNT(t)) : this.each(this.fromNT(t), predicate);\n\n        for (i = 0, len = sups.length; i < len; i++) {\n          elt = sups[i];\n          s = elt.toNT();\n\n          if (s in done) {\n            continue;\n          }\n\n          if (s in agenda) {\n            continue;\n          }\n\n          agenda[s] = agenda[t];\n        }\n\n        done[t] = agenda[t];\n        delete agenda[t];\n      }\n    }\n    /**\n     * Finds the types in the list which have no *stored* supertypes\n     * We exclude the universal class, owl:Things and rdf:Resource, as it is\n     * information-free.\n     */\n\n  }, {\n    key: \"topTypeURIs\",\n    value: function topTypeURIs(types) {\n      var i;\n      var j;\n      var k;\n      var len;\n      var n;\n      var ref;\n      var tops;\n      var v;\n      tops = [];\n\n      for (k in types) {\n        if (!types.hasOwnProperty(k)) continue;\n        v = types[k];\n        n = 0;\n        ref = this.each(this.sym(k), this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'));\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          j = ref[i];\n\n          if (j.uri !== 'http://www.w3.org/2000/01/rdf-schema#Resource') {\n            n++;\n            break;\n          }\n        }\n\n        if (!n) {\n          tops[k] = v;\n        }\n      }\n\n      if (tops['http://www.w3.org/2000/01/rdf-schema#Resource']) {\n        delete tops['http://www.w3.org/2000/01/rdf-schema#Resource'];\n      }\n\n      if (tops['http://www.w3.org/2002/07/owl#Thing']) {\n        delete tops['http://www.w3.org/2002/07/owl#Thing'];\n      }\n\n      return tops;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '{' + this.statements.join('\\n') + '}';\n    }\n  }, {\n    key: \"whether\",\n    value: function whether(s, p, o, g) {\n      return this.statementsMatching(s, p, o, g, false).length;\n    }\n  }]);\n\n  return Formula;\n}(Node);\n\nexport { Formula as default };\nFormula.termType = 'Graph';\nFormula.prototype.classOrder = ClassOrder['Graph'];\nFormula.prototype.isVar = 0;\nFormula.prototype.ns = Namespace;\n\nFormula.prototype.variable = function (name) {\n  return new Variable(name);\n};","map":null,"metadata":{},"sourceType":"module"}