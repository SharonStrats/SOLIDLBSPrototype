{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar pathExists = require('../path-exists').pathExists;\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\n\nfunction symlinkPaths(srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, function (err) {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink');\n        return callback(err);\n      }\n\n      return callback(null, {\n        'toCwd': srcpath,\n        'toDst': srcpath\n      });\n    });\n  } else {\n    var dstdir = path.dirname(dstpath);\n    var relativeToDst = path.join(dstdir, srcpath);\n    return pathExists(relativeToDst, function (err, exists) {\n      if (err) return callback(err);\n\n      if (exists) {\n        return callback(null, {\n          'toCwd': relativeToDst,\n          'toDst': srcpath\n        });\n      } else {\n        return fs.lstat(srcpath, function (err) {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink');\n            return callback(err);\n          }\n\n          return callback(null, {\n            'toCwd': srcpath,\n            'toDst': path.relative(dstdir, srcpath)\n          });\n        });\n      }\n    });\n  }\n}\n\nfunction symlinkPathsSync(srcpath, dstpath) {\n  var exists;\n\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath);\n    if (!exists) throw new Error('absolute srcpath does not exist');\n    return {\n      'toCwd': srcpath,\n      'toDst': srcpath\n    };\n  } else {\n    var dstdir = path.dirname(dstpath);\n    var relativeToDst = path.join(dstdir, srcpath);\n    exists = fs.existsSync(relativeToDst);\n\n    if (exists) {\n      return {\n        'toCwd': relativeToDst,\n        'toDst': srcpath\n      };\n    } else {\n      exists = fs.existsSync(srcpath);\n      if (!exists) throw new Error('relative srcpath does not exist');\n      return {\n        'toCwd': srcpath,\n        'toDst': path.relative(dstdir, srcpath)\n      };\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths: symlinkPaths,\n  symlinkPathsSync: symlinkPathsSync\n};","map":null,"metadata":{},"sourceType":"script"}