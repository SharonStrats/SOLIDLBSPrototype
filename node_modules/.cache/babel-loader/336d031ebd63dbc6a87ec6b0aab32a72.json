{"ast":null,"code":"exports = module.exports = HttpError;\n\nvar StandardError = require(\"standard-error\");\n\nvar STATUS_CODE_TO_NAME = require(\"./codes\");\n\nvar STATUS_NAME_TO_CODE = exports;\n\nfunction HttpError(code, msg, props) {\n  if (typeof code == \"string\") code = STATUS_NAME_TO_CODE[code];\n  if (typeof code != \"number\") throw new TypeError(\"Non-numeric HTTP code\");\n\n  if (typeof msg == \"object\" && msg != null) {\n    props = msg;\n    msg = null;\n  }\n\n  StandardError.call(this, msg || STATUS_CODE_TO_NAME[code], props);\n  this.code = code;\n}\n\nHttpError.prototype = Object.create(StandardError.prototype, {\n  constructor: {\n    value: HttpError,\n    configurable: true,\n    writable: true\n  }\n}); // Set name explicitly for when the code gets minified.\n\nHttpError.prototype.name = \"HttpError\";\nObject.defineProperties(HttpError.prototype, {\n  statusCode: alias(\"code\"),\n  statusMessage: alias(\"message\"),\n  status: {\n    configurable: true,\n    get: function get() {\n      return this.code;\n    },\n    set: function set(value) {\n      Object.defineProperty(this, \"status\", {\n        value: value,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      });\n    }\n  }\n});\n\nHttpError.prototype.toString = function () {\n  return this.name + \": \" + this.code + \" \" + this.message;\n};\n\nfor (var code in STATUS_CODE_TO_NAME) {\n  var name = STATUS_CODE_TO_NAME[code];\n  exports[name.replace(\"'\", \"\").replace(/[- ]/g, \"_\").toUpperCase()] = +code;\n}\n\nfunction alias(name) {\n  return {\n    configurable: true,\n    get: function get() {\n      return this[name];\n    },\n    set: function set(value) {\n      return this[name] = value;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}