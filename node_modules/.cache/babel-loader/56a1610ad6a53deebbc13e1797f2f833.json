{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'stream'; // ## Constructor\n\nvar N3StreamParser =\n/*#__PURE__*/\nfunction (_Transform) {\n  _inherits(N3StreamParser, _Transform);\n\n  function N3StreamParser(options) {\n    var _this;\n\n    _classCallCheck(this, N3StreamParser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(N3StreamParser).call(this, {\n      decodeStrings: true\n    }));\n    _this._readableState.objectMode = true; // Set up parser with dummy stream to obtain `data` and `end` callbacks\n\n    var self = _assertThisInitialized(_assertThisInitialized(_this)),\n        parser = new N3Parser(options),\n        onData,\n        onEnd;\n\n    parser.parse({\n      on: function on(event, callback) {\n        switch (event) {\n          case 'data':\n            onData = callback;\n            break;\n\n          case 'end':\n            onEnd = callback;\n            break;\n        }\n      }\n    }, // Handle quads by pushing them down the pipeline\n    function (error, quad) {\n      error && self.emit('error', error) || quad && self.push(quad);\n    }, // Emit prefixes through the `prefix` event\n    function (prefix, uri) {\n      self.emit('prefix', prefix, uri);\n    }); // Implement Transform methods through parser callbacks\n\n    _this._transform = function (chunk, encoding, done) {\n      onData(chunk);\n      done();\n    };\n\n    _this._flush = function (done) {\n      onEnd();\n      done();\n    };\n\n    return _this;\n  } // ### Parses a stream of strings\n\n\n  _createClass(N3StreamParser, [{\n    key: \"import\",\n    value: function _import(stream) {\n      var self = this;\n      stream.on('data', function (chunk) {\n        self.write(chunk);\n      });\n      stream.on('end', function () {\n        self.end();\n      });\n      stream.on('error', function (error) {\n        self.emit('error', error);\n      });\n      return this;\n    }\n  }]);\n\n  return N3StreamParser;\n}(Transform);\n\nexport { N3StreamParser as default };","map":null,"metadata":{},"sourceType":"module"}