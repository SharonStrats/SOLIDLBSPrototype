{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar util = require('./util');\n\nvar ActiveContextCache = require('./ActiveContextCache');\n\nvar JsonLdError = require('./JsonLdError');\n\nvar _require = require('./types'),\n    _isArray = _require.isArray,\n    _isObject = _require.isObject,\n    _isString = _require.isString,\n    _isUndefined = _require.isUndefined;\n\nvar _require2 = require('./url'),\n    _isAbsoluteIri = _require2.isAbsolute,\n    _isRelativeIri = _require2.isRelative,\n    prependBase = _require2.prependBase,\n    parseUrl = _require2.parse;\n\nvar _require3 = require('./util'),\n    _asArray = _require3.asArray,\n    _compareShortestLeast = _require3.compareShortestLeast;\n\nvar MAX_CONTEXT_URLS = 10;\nvar INITIAL_CONTEXT_CACHE = new Map();\nvar INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\nvar api = {};\nmodule.exports = api;\napi.cache = new ActiveContextCache();\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param isPropertyTermScopedContext `true` if `localCtx` is a scoped context\n *   from a property term.\n * @param isTypeScopedContext `true` if `localCtx` is a scoped context\n *   from a type.\n *\n * @return the new active context.\n */\n\napi.process = function (_ref) {\n  var activeCtx = _ref.activeCtx,\n      localCtx = _ref.localCtx,\n      options = _ref.options,\n      _ref$isPropertyTermSc = _ref.isPropertyTermScopedContext,\n      isPropertyTermScopedContext = _ref$isPropertyTermSc === void 0 ? false : _ref$isPropertyTermSc,\n      _ref$isTypeScopedCont = _ref.isTypeScopedContext,\n      isTypeScopedContext = _ref$isTypeScopedCont === void 0 ? false : _ref$isTypeScopedCont;\n\n  // normalize local context to an array of @context objects\n  if (_isObject(localCtx) && '@context' in localCtx && _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n\n  var ctxs = _asArray(localCtx); // no contexts in array, return current active context w/o changes\n\n\n  if (ctxs.length === 0) {\n    return activeCtx;\n  } // track the previous context\n\n\n  var previousContext = activeCtx.previousContext || activeCtx; // if context is property scoped and there's a previous context, amend it,\n  // not the current one\n\n  if (isPropertyTermScopedContext && activeCtx.previousContext) {\n    // TODO: consider optimizing to a shallow copy\n    activeCtx = activeCtx.clone();\n    activeCtx.isPropertyTermScoped = true;\n    activeCtx.previousContext = api.process({\n      activeCtx: activeCtx.previousContext,\n      localCtx: ctxs,\n      options: options,\n      isPropertyTermScopedContext: isPropertyTermScopedContext\n    });\n    return activeCtx;\n  } // process each context in order, update active context\n  // on each iteration to ensure proper caching\n\n\n  var rval = activeCtx;\n\n  for (var i = 0; i < ctxs.length; ++i) {\n    var ctx = ctxs[i]; // update active context to one computed from last iteration\n\n    activeCtx = rval; // reset to initial context\n\n    if (ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not processing a property term scoped context\n      if (!isPropertyTermScopedContext && Object.keys(activeCtx.protected).length !== 0) {\n        var protectedMode = options && options.protectedMode || 'error';\n\n        if (protectedMode === 'error') {\n          throw new JsonLdError('Tried to nullify a context with protected terms outside of ' + 'a term definition.', 'jsonld.SyntaxError', {\n            code: 'invalid context nullification'\n          });\n        } else if (protectedMode === 'warn') {\n          // FIXME: remove logging and use a handler\n          console.warn('WARNING: invalid context nullification');\n          var oldActiveCtx = activeCtx; // copy all protected term definitions to fresh initial context\n\n          rval = activeCtx = api.getInitialContext(options).clone();\n\n          for (var _i = 0, _Object$entries = Object.entries(oldActiveCtx.protected); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                term = _Object$entries$_i[0],\n                _protected = _Object$entries$_i[1];\n\n            if (_protected) {\n              activeCtx.mappings[term] = util.clone(oldActiveCtx.mappings[term]);\n            }\n          }\n\n          activeCtx.protected = util.clone(oldActiveCtx.protected); // cache result\n\n          if (api.cache) {\n            api.cache.set(oldActiveCtx, ctx, rval);\n          }\n\n          continue;\n        }\n\n        throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {\n          code: 'invalid protected mode',\n          context: localCtx,\n          protectedMode: protectedMode\n        });\n      }\n\n      rval = activeCtx = api.getInitialContext(options).clone(); // if context is type-scoped, ensure previous context has been set\n\n      if (isTypeScopedContext) {\n        rval.previousContext = previousContext.clone();\n      }\n\n      continue;\n    } // get context from cache if available\n\n\n    if (api.cache) {\n      var cached = api.cache.get(activeCtx, ctx);\n\n      if (cached) {\n        rval = activeCtx = cached;\n        continue;\n      }\n    } // dereference @context key if present\n\n\n    if (_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    } // context must be an object by now, all URLs retrieved before this call\n\n\n    if (!_isObject(ctx)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {\n        code: 'invalid local context',\n        context: ctx\n      });\n    } // TODO: there is likely a `preivousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n    // clone context before updating it\n\n\n    rval = rval.clone(); // define context mappings for keys in local context\n\n    var defined = new Map(); // handle @version\n\n    if ('@version' in ctx) {\n      if (ctx['@version'] !== 1.1) {\n        throw new JsonLdError('Unsupported JSON-LD version: ' + ctx['@version'], 'jsonld.UnsupportedVersion', {\n          code: 'invalid @version value',\n          context: ctx\n        });\n      }\n\n      if (activeCtx.processingMode && activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('@version: ' + ctx['@version'] + ' not compatible with ' + activeCtx.processingMode, 'jsonld.ProcessingModeConflict', {\n          code: 'processing mode conflict',\n          context: ctx\n        });\n      }\n\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    } // if not set explicitly, set processingMode to \"json-ld-1.0\"\n\n\n    rval.processingMode = rval.processingMode || activeCtx.processingMode || 'json-ld-1.0'; // handle @base\n\n    if ('@base' in ctx) {\n      var base = ctx['@base'];\n\n      if (base === null) {// no action\n      } else if (_isAbsoluteIri(base)) {\n        base = parseUrl(base);\n      } else if (_isRelativeIri(base)) {\n        base = parseUrl(prependBase(activeCtx['@base'].href, base));\n      } else {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@base\" in a ' + '@context must be an absolute IRI, a relative IRI, or null.', 'jsonld.SyntaxError', {\n          code: 'invalid base IRI',\n          context: ctx\n        });\n      }\n\n      rval['@base'] = base;\n      defined.set('@base', true);\n    } // handle @vocab\n\n\n    if ('@vocab' in ctx) {\n      var value = ctx['@vocab'];\n\n      if (value === null) {\n        delete rval['@vocab'];\n      } else if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n          code: 'invalid vocab mapping',\n          context: ctx\n        });\n      } else if (!_isAbsoluteIri(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be an absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid vocab mapping',\n          context: ctx\n        });\n      } else {\n        rval['@vocab'] = value;\n      }\n\n      defined.set('@vocab', true);\n    } // handle @language\n\n\n    if ('@language' in ctx) {\n      var _value = ctx['@language'];\n\n      if (_value === null) {\n        delete rval['@language'];\n      } else if (!_isString(_value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@language\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n          code: 'invalid default language',\n          context: ctx\n        });\n      } else {\n        rval['@language'] = _value.toLowerCase();\n      }\n\n      defined.set('@language', true);\n    } // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n\n\n    defined.set('@protected', ctx['@protected'] || false); // process all other keys\n\n    for (var key in ctx) {\n      api.createTermDefinition(rval, ctx, key, defined, options, isPropertyTermScopedContext);\n    } // if context is type-scoped, ensure previous context has been set\n\n\n    if (isTypeScopedContext && !rval.previousContext) {\n      rval.previousContext = previousContext.clone();\n    } // cache result\n\n\n    if (api.cache) {\n      api.cache.set(activeCtx, ctx, rval);\n    }\n  }\n\n  return rval;\n};\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param {string} [options.protectedMode=\"error\"] - \"error\" to throw error\n *   on `@protected` constraint violation, \"warn\" to allow violations and\n *   signal a warning.\n * @param isPropertyTermScopedContext `true` if `localCtx` is a scoped context\n *   from a property term.\n */\n\n\napi.createTermDefinition = function (activeCtx, localCtx, term, defined, options) {\n  var isPropertyTermScopedContext = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n  if (defined.has(term)) {\n    // term already defined\n    if (defined.get(term)) {\n      return;\n    } // cycle detected\n\n\n    throw new JsonLdError('Cyclical context definition detected.', 'jsonld.CyclicalContext', {\n      code: 'cyclic IRI mapping',\n      context: localCtx,\n      term: term\n    });\n  } // now defining term\n\n\n  defined.set(term, false);\n\n  if (api.isKeyword(term)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n      code: 'keyword redefinition',\n      context: localCtx,\n      term: term\n    });\n  }\n\n  if (term === '') {\n    throw new JsonLdError('Invalid JSON-LD syntax; a term cannot be an empty string.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  } // keep reference to previous mapping for potential `@protected` check\n\n\n  var previousMapping = activeCtx.mappings.get(term); // remove old mapping\n\n  if (activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  } // get context term value\n\n\n  var value;\n\n  if (localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  } // clear context entry\n\n\n  if (value === null || _isObject(value) && value['@id'] === null) {\n    activeCtx.mappings.set(term, null);\n    defined.set(term, true);\n    return;\n  } // convert short-hand value to object w/@id\n\n\n  var simpleTerm = false;\n\n  if (_isString(value)) {\n    simpleTerm = true;\n    value = {\n      '@id': value\n    };\n  }\n\n  if (!_isObject(value)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context term values must be ' + 'strings or objects.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  } // create new mapping\n\n\n  var mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false; // make sure term definition only has expected keywords\n\n  var validKeys = ['@container', '@id', '@language', '@reverse', '@type']; // JSON-LD 1.1 support\n\n  if (api.processingMode(activeCtx, 1.1)) {\n    validKeys.push('@context', '@nest', '@prefix', '@protected');\n  }\n\n  for (var kw in value) {\n    if (!validKeys.includes(kw)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a term definition must not contain ' + kw, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n  } // always compute whether term has a colon as an optimization for\n  // _compactIri\n\n\n  var colon = term.indexOf(':');\n  mapping._termHasColon = colon !== -1;\n\n  if ('@reverse' in value) {\n    if ('@id' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @id.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n\n    if ('@nest' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n\n    var reverse = value['@reverse'];\n\n    if (!_isString(reverse)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    } // expand and add @id mapping\n\n\n    var _id = _expandIri(activeCtx, reverse, {\n      vocab: true,\n      base: false\n    }, localCtx, defined, options);\n\n    if (!_isAbsoluteIri(_id)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be an ' + 'absolute IRI or a blank node identifier.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n\n    mapping['@id'] = _id;\n    mapping.reverse = true;\n  } else if ('@id' in value) {\n    var _id2 = value['@id'];\n\n    if (!_isString(_id2)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an array ' + 'of strings or a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n\n    if (_id2 !== term) {\n      // expand and add @id mapping\n      _id2 = _expandIri(activeCtx, _id2, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n\n      if (!_isAbsoluteIri(_id2) && !api.isKeyword(_id2)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an ' + 'absolute IRI, a blank node identifier, or a keyword.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx\n        });\n      }\n\n      mapping['@id'] = _id2; // indicate if this term may be used as a compact IRI prefix\n\n      mapping._prefix = !mapping._termHasColon && _id2.match(/[:\\/\\?#\\[\\]@]$/) && (simpleTerm || api.processingMode(activeCtx, 1.0));\n    }\n  }\n\n  if (!('@id' in mapping)) {\n    // see if the term has a prefix\n    if (mapping._termHasColon) {\n      var prefix = term.substr(0, colon);\n\n      if (localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition(activeCtx, localCtx, prefix, defined, options);\n      }\n\n      if (activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        var suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if (!('@vocab' in activeCtx)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @context terms must define an @id.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx,\n          term: term\n        });\n      } // prepend vocab to term\n\n\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  } // Handle term protection\n\n\n  if (value['@protected'] === true || defined.get('@protected') === true && value['@protected'] !== false) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  } // IRI mapping now defined\n\n\n  defined.set(term, true);\n\n  if ('@type' in value) {\n    var type = value['@type'];\n\n    if (!_isString(type)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid type mapping',\n        context: localCtx\n      });\n    }\n\n    if (type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(activeCtx, type, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n\n      if (!_isAbsoluteIri(type)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an ' + 'absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n\n      if (type.indexOf('_:') === 0) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an IRI, ' + 'not a blank node identifier.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    } // add @type to mapping\n\n\n    mapping['@type'] = type;\n  }\n\n  if ('@container' in value) {\n    // normalize container to an array form\n    var container = _isString(value['@container']) ? [value['@container']] : value['@container'] || [];\n    var validContainers = ['@list', '@set', '@index', '@language'];\n    var isValid = true;\n    var hasSet = container.includes('@set'); // JSON-LD 1.1 support\n\n    if (api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type'); // check container length\n\n      if (container.includes('@list')) {\n        if (container.length !== 1) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @list must ' + 'have no other values', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else if (container.includes('@graph')) {\n        if (container.some(function (key) {\n          return key !== '@graph' && key !== '@id' && key !== '@index' && key !== '@set';\n        })) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @graph must ' + 'have no other values other than @id, @index, and @set', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']); // check container length\n\n      isValid &= container.length <= 1;\n    } // check against valid containers\n\n\n    isValid &= container.every(function (c) {\n      return validContainers.includes(c);\n    }); // @set not allowed with @list\n\n    isValid &= !(hasSet && container.includes('@list'));\n\n    if (!isValid) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value must be ' + 'one of the following: ' + validContainers.join(', '), 'jsonld.SyntaxError', {\n        code: 'invalid container mapping',\n        context: localCtx\n      });\n    }\n\n    if (mapping.reverse && !container.every(function (c) {\n      return ['@index', '@set'].includes(c);\n    })) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value for a @reverse ' + 'type definition must be @index or @set.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    } // add @container to mapping\n\n\n    mapping['@container'] = container;\n  } // scoped contexts\n\n\n  if ('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n\n  if ('@language' in value && !('@type' in value)) {\n    var language = value['@language'];\n\n    if (language !== null && !_isString(language)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @language value must be ' + 'a string or null.', 'jsonld.SyntaxError', {\n        code: 'invalid language mapping',\n        context: localCtx\n      });\n    } // add @language to mapping\n\n\n    if (language !== null) {\n      language = language.toLowerCase();\n    }\n\n    mapping['@language'] = language;\n  } // term may be used as a prefix\n\n\n  if ('@prefix' in value) {\n    if (mapping._termHasColon) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @prefix used on a compact IRI term', 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n\n    if (typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context value for @prefix must be boolean', 'jsonld.SyntaxError', {\n        code: 'invalid @prefix value',\n        context: localCtx\n      });\n    }\n  }\n\n  if ('@nest' in value) {\n    var nest = value['@nest'];\n\n    if (!_isString(nest) || nest !== '@nest' && nest.indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @nest value must be ' + 'a string which is not a keyword other than @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid @nest value',\n        context: localCtx\n      });\n    }\n\n    mapping['@nest'] = nest;\n  } // disallow aliasing @context and @preserve\n\n\n  var id = mapping['@id'];\n\n  if (id === '@context' || id === '@preserve') {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context and @preserve cannot be aliased.', 'jsonld.SyntaxError', {\n      code: 'invalid keyword alias',\n      context: localCtx\n    });\n  } // FIXME if(1.1) ... ?\n\n\n  if (previousMapping && previousMapping.protected && !isPropertyTermScopedContext) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n\n    if (!_deepCompare(previousMapping, mapping)) {\n      var protectedMode = options && options.protectedMode || 'error';\n\n      if (protectedMode === 'error') {\n        throw new JsonLdError('Invalid JSON-LD syntax; tried to redefine a protected term.', 'jsonld.SyntaxError', {\n          code: 'protected term redefinition',\n          context: localCtx,\n          term: term\n        });\n      } else if (protectedMode === 'warn') {\n        // FIXME: remove logging and use a handler\n        console.warn('WARNING: protected term redefinition', {\n          term: term\n        });\n        return;\n      }\n\n      throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {\n        code: 'invalid protected mode',\n        context: localCtx,\n        term: term,\n        protectedMode: protectedMode\n      });\n    }\n  }\n};\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\n\n\napi.expandIri = function (activeCtx, value, relativeTo, options) {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined, options);\n};\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\n\n\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if (value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  } // define term dependency if not defined\n\n\n  if (localCtx && localCtx.hasOwnProperty(value) && defined.get(value) !== true) {\n    api.createTermDefinition(activeCtx, localCtx, value, defined, options);\n  } // if context is from a property term scoped context composed with a\n  // type-scoped context, then use previous context instead\n\n\n  if (activeCtx.isPropertyTermScoped && activeCtx.previousContext) {\n    activeCtx = activeCtx.previousContext;\n  }\n\n  relativeTo = relativeTo || {};\n\n  if (relativeTo.vocab) {\n    var mapping = activeCtx.mappings.get(value); // value is explicitly ignored with a null mapping\n\n    if (mapping === null) {\n      return null;\n    }\n\n    if (mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  } // split value into prefix:suffix\n\n\n  var colon = value.indexOf(':');\n\n  if (colon !== -1) {\n    var prefix = value.substr(0, colon);\n    var suffix = value.substr(colon + 1); // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n\n    if (prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    } // prefix dependency not defined, define it\n\n\n    if (localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition(activeCtx, localCtx, prefix, defined, options);\n    } // use mapping if prefix is defined\n\n\n    if (activeCtx.mappings.has(prefix)) {\n      var _mapping = activeCtx.mappings.get(prefix);\n\n      return _mapping['@id'] + suffix;\n    } // already absolute IRI\n\n\n    return value;\n  } // prepend vocab\n\n\n  if (relativeTo.vocab && '@vocab' in activeCtx) {\n    return activeCtx['@vocab'] + value;\n  } // prepend base\n\n\n  if (relativeTo.base) {\n    return prependBase(activeCtx['@base'], value);\n  }\n\n  return value;\n}\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\n\n\napi.getInitialContext = function (options) {\n  var base = parseUrl(options.base || '');\n  var key = JSON.stringify({\n    base: base,\n    processingMode: options.processingMode\n  });\n  var cached = INITIAL_CONTEXT_CACHE.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  var initialContext = {\n    '@base': base,\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertTypeScopedContext: _revertTypeScopedContext,\n    protected: {}\n  }; // TODO: consider using LRU cache instead\n\n  if (INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n\n  function _createInverseContext() {\n    var activeCtx = this; // lazily create inverse\n\n    if (activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n\n    var inverse = activeCtx.inverse = {}; // variables for building fast CURIE map\n\n    var fastCurieMap = activeCtx.fastCurieMap = {};\n    var irisToTerms = {}; // handle default language\n\n    var defaultLanguage = activeCtx['@language'] || '@none'; // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n\n    var mappings = activeCtx.mappings;\n\n    var terms = _toConsumableArray(mappings.keys()).sort(_compareShortestLeast);\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = terms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var term = _step.value;\n        var mapping = mappings.get(term);\n\n        if (mapping === null) {\n          continue;\n        }\n\n        var container = mapping['@container'] || '@none';\n        container = [].concat(container).sort().join(''); // iterate over every IRI in the mapping\n\n        var ids = _asArray(mapping['@id']);\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = ids[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var iri = _step2.value;\n            var entry = inverse[iri];\n            var isKeyword = api.isKeyword(iri);\n\n            if (!entry) {\n              // initialize entry\n              inverse[iri] = entry = {};\n\n              if (!isKeyword && !mapping._termHasColon) {\n                // init IRI to term map and fast CURIE prefixes\n                irisToTerms[iri] = [term];\n                var fastCurieEntry = {\n                  iri: iri,\n                  terms: irisToTerms[iri]\n                };\n\n                if (iri[0] in fastCurieMap) {\n                  fastCurieMap[iri[0]].push(fastCurieEntry);\n                } else {\n                  fastCurieMap[iri[0]] = [fastCurieEntry];\n                }\n              }\n            } else if (!isKeyword && !mapping._termHasColon) {\n              // add IRI to term match\n              irisToTerms[iri].push(term);\n            } // add new entry\n\n\n            if (!entry[container]) {\n              entry[container] = {\n                '@language': {},\n                '@type': {},\n                '@any': {}\n              };\n            }\n\n            entry = entry[container];\n\n            _addPreferredTerm(term, entry['@any'], '@none');\n\n            if (mapping.reverse) {\n              // term is preferred for values using @reverse\n              _addPreferredTerm(term, entry['@type'], '@reverse');\n            } else if ('@type' in mapping) {\n              // term is preferred for values using specific type\n              _addPreferredTerm(term, entry['@type'], mapping['@type']);\n            } else if ('@language' in mapping) {\n              // term is preferred for values using specific language\n              var language = mapping['@language'] || '@null';\n\n              _addPreferredTerm(term, entry['@language'], language);\n            } else {\n              // term is preferred for values w/default language or no type and\n              // no language\n              // add an entry for the default language\n              _addPreferredTerm(term, entry['@language'], defaultLanguage); // add entries for no type and no language\n\n\n              _addPreferredTerm(term, entry['@type'], '@none');\n\n              _addPreferredTerm(term, entry['@language'], '@none');\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      } // build fast CURIE map\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    for (var _key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, _key, 1);\n    }\n\n    return inverse;\n  }\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n\n\n  function _buildIriMap(iriMap, key, idx) {\n    var entries = iriMap[key];\n    var next = iriMap[key] = {};\n    var iri;\n    var letter;\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = entries[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var entry = _step3.value;\n        iri = entry.iri;\n\n        if (idx >= iri.length) {\n          letter = '';\n        } else {\n          letter = iri[idx];\n        }\n\n        if (letter in next) {\n          next[letter].push(entry);\n        } else {\n          next[letter] = [entry];\n        }\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    for (var _key2 in next) {\n      if (_key2 === '') {\n        continue;\n      }\n\n      _buildIriMap(next, _key2, idx + 1);\n    }\n  }\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n\n\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if (!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n\n\n  function _cloneActiveContext() {\n    var child = {};\n    child['@base'] = this['@base'];\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n\n    if (this.previousContext) {\n      child.isPropertyTermScoped = this.previousContext.isPropertyTermScoped;\n      child.previousContext = this.previousContext.clone();\n    }\n\n    child.revertTypeScopedContext = this.revertTypeScopedContext;\n\n    if ('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n\n    if ('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n\n    return child;\n  }\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n\n\n  function _revertTypeScopedContext() {\n    if (!this.previousContext) {\n      return this;\n    }\n\n    return this.previousContext.clone();\n  }\n};\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\n\n\napi.getContextValue = function (ctx, key, type) {\n  // invalid key\n  if (key === null) {\n    if (type === '@context') {\n      return undefined;\n    }\n\n    return null;\n  } // get specific entry information\n\n\n  if (ctx.mappings.has(key)) {\n    var entry = ctx.mappings.get(key);\n\n    if (_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n\n    if (entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  } // get default language\n\n\n  if (type === '@language' && ctx.hasOwnProperty(type)) {\n    return ctx[type];\n  }\n\n  if (type === '@context') {\n    return undefined;\n  }\n\n  return null;\n};\n/**\n * Retrieves external @context URLs using the given document loader. Every\n * instance of @context in the input that refers to a URL will be replaced\n * with the JSON @context found at that URL.\n *\n * @param input the JSON-LD input with possible contexts.\n * @param options the options to use:\n *          documentLoader(url, [callback(err, remoteDoc)]) the document loader.\n * @param callback(err, input) called once the operation completes.\n */\n\n\napi.getAllContexts =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(input, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", _retrieveContextUrls(input, options));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\n\n\napi.processingMode = function (activeCtx, version) {\n  if (version.toString() >= '1.1') {\n    return activeCtx.processingMode && activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return !activeCtx.processingMode || activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\n\n\napi.isKeyword = function (v) {\n  if (!_isString(v)) {\n    return false;\n  }\n\n  switch (v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@index':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n\n  return false;\n};\n\nfunction _retrieveContextUrls(_x3, _x4) {\n  return _retrieveContextUrls2.apply(this, arguments);\n}\n/**\n * Finds all @context URLs in the given JSON-LD input.\n *\n * @param input the JSON-LD input.\n * @param urls a map of URLs (url => false/@contexts).\n * @param replace true to replace the URLs in the given input with the\n *           @contexts from the urls map, false not to.\n * @param base the base IRI to use to resolve relative IRIs.\n *\n * @return true if new URLs to retrieve were found, false if not.\n */\n\n\nfunction _retrieveContextUrls2() {\n  _retrieveContextUrls2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(input, options) {\n    var documentLoader, retrieve, _retrieve;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _retrieve = function _ref5() {\n              _retrieve = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee3(doc, cycles, documentLoader) {\n                var urls, queue;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        if (!(cycles.size > MAX_CONTEXT_URLS)) {\n                          _context3.next = 2;\n                          break;\n                        }\n\n                        throw new JsonLdError('Maximum number of @context URLs exceeded.', 'jsonld.ContextUrlError', {\n                          code: 'loading remote context failed',\n                          max: MAX_CONTEXT_URLS\n                        });\n\n                      case 2:\n                        // find all URLs in the given document\n                        urls = new Map();\n\n                        _findContextUrls(doc, urls, false, options.base);\n\n                        if (!(urls.size === 0)) {\n                          _context3.next = 6;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\");\n\n                      case 6:\n                        // queue all unretrieved URLs\n                        queue = _toConsumableArray(urls.keys()).filter(function (u) {\n                          return urls.get(u) === false;\n                        }); // retrieve URLs in queue\n\n                        return _context3.abrupt(\"return\", Promise.all(queue.map(\n                        /*#__PURE__*/\n                        function () {\n                          var _ref3 = _asyncToGenerator(\n                          /*#__PURE__*/\n                          _regeneratorRuntime.mark(function _callee2(url) {\n                            var _cycles, remoteDoc, ctx;\n\n                            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                              while (1) {\n                                switch (_context2.prev = _context2.next) {\n                                  case 0:\n                                    if (!cycles.has(url)) {\n                                      _context2.next = 2;\n                                      break;\n                                    }\n\n                                    throw new JsonLdError('Cyclical @context URLs detected.', 'jsonld.ContextUrlError', {\n                                      code: 'recursive context inclusion',\n                                      url: url\n                                    });\n\n                                  case 2:\n                                    _cycles = new Set(cycles);\n\n                                    _cycles.add(url);\n\n                                    _context2.prev = 4;\n                                    _context2.next = 7;\n                                    return documentLoader(url);\n\n                                  case 7:\n                                    remoteDoc = _context2.sent;\n                                    ctx = remoteDoc.document || null; // parse string context as JSON\n\n                                    if (_isString(ctx)) {\n                                      ctx = JSON.parse(ctx);\n                                    }\n\n                                    _context2.next = 15;\n                                    break;\n\n                                  case 12:\n                                    _context2.prev = 12;\n                                    _context2.t0 = _context2[\"catch\"](4);\n                                    throw new JsonLdError('Dereferencing a URL did not result in a valid JSON-LD object. ' + 'Possible causes are an inaccessible URL perhaps due to ' + 'a same-origin policy (ensure the server uses CORS if you are ' + 'using client-side JavaScript), too many redirects, a ' + 'non-JSON response, or more than one HTTP Link Header was ' + 'provided for a remote context.', 'jsonld.InvalidUrl', {\n                                      code: 'loading remote context failed',\n                                      url: url,\n                                      cause: _context2.t0\n                                    });\n\n                                  case 15:\n                                    if (_isObject(ctx)) {\n                                      _context2.next = 17;\n                                      break;\n                                    }\n\n                                    throw new JsonLdError('Dereferencing a URL did not result in a JSON object. The ' + 'response was valid JSON, but it was not a JSON object.', 'jsonld.InvalidUrl', {\n                                      code: 'invalid remote context',\n                                      url: url\n                                    });\n\n                                  case 17:\n                                    // use empty context if no @context key is present\n                                    if (!('@context' in ctx)) {\n                                      ctx = {\n                                        '@context': {}\n                                      };\n                                    } else {\n                                      ctx = {\n                                        '@context': ctx['@context']\n                                      };\n                                    } // append @context URL to context if given\n\n\n                                    if (remoteDoc.contextUrl) {\n                                      if (!_isArray(ctx['@context'])) {\n                                        ctx['@context'] = [ctx['@context']];\n                                      }\n\n                                      ctx['@context'].push(remoteDoc.contextUrl);\n                                    } // recurse\n\n\n                                    _context2.next = 21;\n                                    return retrieve(ctx, _cycles, documentLoader);\n\n                                  case 21:\n                                    // store retrieved context w/replaced @context URLs\n                                    urls.set(url, ctx['@context']); // replace all @context URLs in the document\n\n                                    _findContextUrls(doc, urls, true, options.base);\n\n                                  case 23:\n                                  case \"end\":\n                                    return _context2.stop();\n                                }\n                              }\n                            }, _callee2, null, [[4, 12]]);\n                          }));\n\n                          return function (_x8) {\n                            return _ref3.apply(this, arguments);\n                          };\n                        }())));\n\n                      case 8:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n              return _retrieve.apply(this, arguments);\n            };\n\n            retrieve = function _ref4(_x5, _x6, _x7) {\n              return _retrieve.apply(this, arguments);\n            };\n\n            documentLoader = util.normalizeDocumentLoader(options.documentLoader); // retrieve all @context URLs in input\n\n            _context4.next = 5;\n            return retrieve(input, new Set(), documentLoader);\n\n          case 5:\n            return _context4.abrupt(\"return\", input);\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _retrieveContextUrls2.apply(this, arguments);\n}\n\nfunction _findContextUrls(input, urls, replace, base) {\n  if (_isArray(input)) {\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = input[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var element = _step4.value;\n\n        _findContextUrls(element, urls, replace, base);\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    return;\n  }\n\n  if (!_isObject(input)) {\n    // no @context URLs can be found in non-object input\n    return;\n  } // input is an object\n\n\n  for (var key in input) {\n    if (key !== '@context') {\n      _findContextUrls(input[key], urls, replace, base);\n\n      continue;\n    } // get @context\n\n\n    var ctx = input[key];\n\n    if (_isArray(ctx)) {\n      // array @context\n      var length = ctx.length;\n\n      for (var i = 0; i < length; ++i) {\n        var _ctx = ctx[i];\n\n        if (_isString(_ctx)) {\n          var prepended = prependBase(base, _ctx);\n          var resolved = urls.get(prepended); // replace w/@context if requested\n\n          if (replace) {\n            if (_isArray(resolved)) {\n              // add flattened context\n              Array.prototype.splice.apply(ctx, [i, 1].concat(resolved));\n              i += resolved.length - 1;\n              length = ctx.length;\n            } else if (resolved !== false) {\n              ctx[i] = resolved;\n            }\n          } else if (resolved === undefined) {\n            // @context URL found\n            urls.set(prepended, false);\n          }\n        } else {\n          // look for scoped context\n          for (var _key3 in _ctx) {\n            if (_isObject(_ctx[_key3])) {\n              _findContextUrls(_ctx[_key3], urls, replace, base);\n            }\n          }\n        }\n      }\n    } else if (_isString(ctx)) {\n      // string @context\n      var _prepended = prependBase(base, ctx);\n\n      var _resolved = urls.get(_prepended); // replace w/@context if requested\n\n\n      if (replace) {\n        if (_resolved !== false) {\n          input[key] = _resolved;\n        }\n      } else if (_resolved === undefined) {\n        // @context URL found\n        urls.set(_prepended, false);\n      }\n    } else {\n      // look for scoped context\n      for (var _key4 in ctx) {\n        if (_isObject(ctx[_key4])) {\n          _findContextUrls(ctx[_key4], urls, replace, base);\n        }\n      }\n    }\n  }\n}\n\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if (!(x1 && typeof x1 === 'object') || !(x2 && typeof x2 === 'object')) {\n    return x1 === x2;\n  } // x1 and x2 are objects (also potentially arrays)\n\n\n  var x1Array = Array.isArray(x1);\n\n  if (x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n\n  if (x1Array) {\n    if (x1.length !== x2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < x1.length; ++i) {\n      if (!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } // x1 and x2 are non-array objects\n\n\n  var k1s = Object.keys(x1);\n  var k2s = Object.keys(x2);\n\n  if (k1s.length !== k2s.length) {\n    return false;\n  }\n\n  for (var k1 in x1) {\n    var v1 = x1[k1];\n    var v2 = x2[k1]; // special case: `@container` can be in any order\n\n    if (k1 === '@container') {\n      if (Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n\n    if (!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}