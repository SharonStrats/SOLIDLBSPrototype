{"ast":null,"code":"var _objectWithoutProperties = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectWithoutProperties\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\n/**\n * A JavaScript implementation of the JSON-LD API.\n *\n * @author Dave Longley\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2011-2017 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar canonize = require('rdf-canonize');\n\nvar util = require('./util');\n\nvar IdentifierIssuer = util.IdentifierIssuer;\n\nvar JsonLdError = require('./JsonLdError');\n\nvar NQuads = require('./NQuads');\n\nvar Rdfa = require('./Rdfa');\n\nvar _require = require('./expand'),\n    _expand = _require.expand;\n\nvar _require2 = require('./flatten'),\n    _flatten = _require2.flatten;\n\nvar _require3 = require('./fromRdf'),\n    _fromRDF = _require3.fromRDF;\n\nvar _require4 = require('./toRdf'),\n    _toRDF = _require4.toRDF;\n\nvar _require5 = require('./frame'),\n    _frameMergedOrDefault = _require5.frameMergedOrDefault;\n\nvar _require6 = require('./types'),\n    _isArray = _require6.isArray,\n    _isObject = _require6.isObject,\n    _isString = _require6.isString;\n\nvar _require7 = require('./graphTypes'),\n    _isSubjectReference = _require7.isSubjectReference;\n\nvar _require8 = require('./context'),\n    _getInitialContext = _require8.getInitialContext,\n    _processContext = _require8.process,\n    _getAllContexts = _require8.getAllContexts;\n\nvar _require9 = require('./compact'),\n    _compact = _require9.compact,\n    _compactIri = _require9.compactIri,\n    _removePreserve = _require9.removePreserve;\n\nvar _require10 = require('./nodeMap'),\n    _createNodeMap = _require10.createNodeMap,\n    _createMergedNodeMap = _require10.createMergedNodeMap,\n    _mergeNodeMaps = _require10.mergeNodeMaps; // determine if in-browser or using node.js\n\n\nvar _nodejs = typeof process !== 'undefined' && process.versions && process.versions.node;\n\nvar _browser = !_nodejs && (typeof window !== 'undefined' || typeof self !== 'undefined');\n/* eslint-disable indent */\n// attaches jsonld API to the given object\n\n\nvar wrapper = function wrapper(jsonld) {\n  /** Registered RDF dataset parsers hashed by content-type. */\n  var _rdfParsers = {};\n  /* Core API */\n\n  /**\n   * Performs JSON-LD compaction.\n   *\n   * @param input the JSON-LD input to compact.\n   * @param ctx the context to compact with.\n   * @param [options] options to use:\n   *          [base] the base IRI to use.\n   *          [compactArrays] true to compact arrays to single values when\n   *            appropriate, false not to (default: true).\n   *          [compactToRelative] true to compact IRIs to be relative to document\n   *            base, false to keep absolute (default: true)\n   *          [graph] true to always output a top-level graph (default: false).\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   *          [expansionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   *          [framing] true if compaction is occuring during a framing operation.\n   *          [compactionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   * @param [callback(err, compacted)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the compacted output.\n   */\n\n  jsonld.compact = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(input, ctx, options) {\n      var expanded,\n          activeCtx,\n          compacted,\n          tmp,\n          i,\n          hasContext,\n          graphAlias,\n          graph,\n          _graph,\n          key,\n          _graph2,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_args.length < 2)) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not compact, too few arguments.');\n\n            case 2:\n              if (!(ctx === null)) {\n                _context.next = 4;\n                break;\n              }\n\n              throw new JsonLdError('The compaction context must not be null.', 'jsonld.CompactError', {\n                code: 'invalid local context'\n              });\n\n            case 4:\n              if (!(input === null)) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 6:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                compactArrays: true,\n                compactToRelative: true,\n                graph: false,\n                skipExpansion: false,\n                link: false,\n                issuer: new IdentifierIssuer('_:b')\n              });\n\n              if (options.link) {\n                // force skip expansion when linking, \"link\" is not part of the public\n                // API, it should only be called from framing\n                options.skipExpansion = true;\n              }\n\n              if (!options.compactToRelative) {\n                delete options.base;\n              } // expand input\n\n\n              if (!options.skipExpansion) {\n                _context.next = 13;\n                break;\n              }\n\n              expanded = input;\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return jsonld.expand(input, options);\n\n            case 15:\n              expanded = _context.sent;\n\n            case 16:\n              _context.next = 18;\n              return jsonld.processContext(_getInitialContext(options), ctx, options);\n\n            case 18:\n              activeCtx = _context.sent;\n              // do compaction\n              compacted = _compact({\n                activeCtx: activeCtx,\n                element: expanded,\n                options: options,\n                compactionMap: options.compactionMap\n              }); // perform clean up\n\n              if (options.compactArrays && !options.graph && _isArray(compacted)) {\n                if (compacted.length === 1) {\n                  // simplify to a single item\n                  compacted = compacted[0];\n                } else if (compacted.length === 0) {\n                  // simplify to an empty object\n                  compacted = {};\n                }\n              } else if (options.graph && _isObject(compacted)) {\n                // always use array if graph option is on\n                compacted = [compacted];\n              } // follow @context key\n\n\n              if (_isObject(ctx) && '@context' in ctx) {\n                ctx = ctx['@context'];\n              } // build output context\n\n\n              ctx = util.clone(ctx);\n\n              if (!_isArray(ctx)) {\n                ctx = [ctx];\n              } // remove empty contexts\n\n\n              tmp = ctx;\n              ctx = [];\n\n              for (i = 0; i < tmp.length; ++i) {\n                if (!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {\n                  ctx.push(tmp[i]);\n                }\n              } // remove array if only one context\n\n\n              hasContext = ctx.length > 0;\n\n              if (ctx.length === 1) {\n                ctx = ctx[0];\n              } // add context and/or @graph\n\n\n              if (_isArray(compacted)) {\n                // use '@graph' keyword\n                graphAlias = _compactIri({\n                  activeCtx: activeCtx,\n                  iri: '@graph',\n                  relativeTo: {\n                    vocab: true\n                  }\n                });\n                graph = compacted;\n                compacted = {};\n\n                if (hasContext) {\n                  compacted['@context'] = ctx;\n                }\n\n                compacted[graphAlias] = graph;\n              } else if (_isObject(compacted) && hasContext) {\n                // reorder keys so @context is first\n                _graph = compacted;\n                compacted = {\n                  '@context': ctx\n                };\n\n                for (key in _graph) {\n                  compacted[key] = _graph[key];\n                }\n              }\n\n              if (options.framing) {\n                // get graph alias\n                _graph2 = _compactIri({\n                  activeCtx: activeCtx,\n                  iri: '@graph',\n                  relativeTo: {\n                    vocab: true\n                  }\n                }); // remove @preserve from results\n\n                options.link = {};\n                compacted[_graph2] = _removePreserve(activeCtx, compacted[_graph2], options);\n              }\n\n              return _context.abrupt(\"return\", compacted);\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  /**\n   * Performs JSON-LD expansion.\n   *\n   * @param input the JSON-LD input to expand.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [keepFreeFloatingNodes] true to keep free-floating nodes,\n   *            false not to, defaults to false.\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   *          [expansionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   * @param [callback(err, expanded)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the expanded output.\n   */\n\n  jsonld.expand = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(input, options) {\n      var toResolve,\n          contextsToProcess,\n          expandContext,\n          defaultBase,\n          remoteDoc,\n          activeCtx,\n          expanded,\n          _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_args2.length < 1)) {\n                _context2.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not expand, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                keepFreeFloatingNodes: false\n              });\n\n              if (options.expansionMap === false) {\n                options.expansionMap = undefined;\n              } // build set of objects that may have @contexts to resolve\n\n\n              toResolve = {}; // build set of contexts to process prior to expansion\n\n              contextsToProcess = []; // if an `expandContext` has been given ensure it gets resolved\n\n              if ('expandContext' in options) {\n                expandContext = util.clone(options.expandContext);\n\n                if (_isObject(expandContext) && '@context' in expandContext) {\n                  toResolve.expandContext = expandContext;\n                } else {\n                  toResolve.expandContext = {\n                    '@context': expandContext\n                  };\n                }\n\n                contextsToProcess.push(toResolve.expandContext);\n              } // if input is a string, attempt to dereference remote document\n\n\n              if (_isString(input)) {\n                _context2.next = 11;\n                break;\n              }\n\n              // input is not a URL, do not need to retrieve it first\n              toResolve.input = util.clone(input);\n              _context2.next = 17;\n              break;\n\n            case 11:\n              _context2.next = 13;\n              return jsonld.get(input, options);\n\n            case 13:\n              remoteDoc = _context2.sent;\n              defaultBase = remoteDoc.documentUrl;\n              toResolve.input = remoteDoc.document;\n\n              if (remoteDoc.contextUrl) {\n                // context included in HTTP link header and must be resolved\n                toResolve.remoteContext = {\n                  '@context': remoteDoc.contextUrl\n                };\n                contextsToProcess.push(toResolve.remoteContext);\n              }\n\n            case 17:\n              // set default base\n              if (!('base' in options)) {\n                options.base = defaultBase || '';\n              } // get all contexts in `toResolve`\n\n\n              _context2.next = 20;\n              return _getAllContexts(toResolve, options);\n\n            case 20:\n              // process any additional contexts\n              activeCtx = _getInitialContext(options);\n              contextsToProcess.forEach(function (localCtx) {\n                activeCtx = _processContext({\n                  activeCtx: activeCtx,\n                  localCtx: localCtx,\n                  options: options\n                });\n              }); // expand resolved input\n\n              expanded = _expand({\n                activeCtx: activeCtx,\n                element: toResolve.input,\n                options: options,\n                expansionMap: options.expansionMap\n              }); // optimize away @graph with no other properties\n\n              if (_isObject(expanded) && '@graph' in expanded && Object.keys(expanded).length === 1) {\n                expanded = expanded['@graph'];\n              } else if (expanded === null) {\n                expanded = [];\n              } // normalize to an array\n\n\n              if (!_isArray(expanded)) {\n                expanded = [expanded];\n              }\n\n              return _context2.abrupt(\"return\", expanded);\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  /**\n   * Performs JSON-LD flattening.\n   *\n   * @param input the JSON-LD to flatten.\n   * @param ctx the context to use to compact the flattened output, or null.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   * @param [callback(err, flattened)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the flattened output.\n   */\n\n  jsonld.flatten = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(input, ctx, options) {\n      var expanded,\n          flattened,\n          compacted,\n          _args3 = arguments;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(_args3.length < 1)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", new TypeError('Could not flatten, too few arguments.'));\n\n            case 2:\n              if (typeof ctx === 'function') {\n                ctx = null;\n              } else {\n                ctx = ctx || null;\n              } // set default options\n\n\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : ''\n              }); // expand input\n\n              _context3.next = 6;\n              return jsonld.expand(input, options);\n\n            case 6:\n              expanded = _context3.sent;\n              // do flattening\n              flattened = _flatten(expanded);\n\n              if (!(ctx === null)) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", flattened);\n\n            case 10:\n              // compact result (force @graph option to true, skip expansion)\n              options.graph = true;\n              options.skipExpansion = true;\n              _context3.next = 14;\n              return jsonld.compact(flattened, ctx, options);\n\n            case 14:\n              compacted = _context3.sent;\n              return _context3.abrupt(\"return\", compacted);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x6, _x7, _x8) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  /**\n   * Performs JSON-LD framing.\n   *\n   * @param input the JSON-LD input to frame.\n   * @param frame the JSON-LD frame to use.\n   * @param [options] the framing options.\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [embed] default @embed flag: '@last', '@always', '@never', '@link'\n   *            (default: '@last').\n   *          [explicit] default @explicit flag (default: false).\n   *          [requireAll] default @requireAll flag (default: true).\n   *          [omitDefault] default @omitDefault flag (default: false).\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   * @param [callback(err, framed)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the framed output.\n   */\n\n  jsonld.frame = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(input, frame, options) {\n      var remoteDoc,\n          ctx,\n          frameContext,\n          expanded,\n          opts,\n          expandedFrame,\n          framed,\n          compacted,\n          _args4 = arguments;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(_args4.length < 2)) {\n                _context4.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not frame, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                embed: '@last',\n                explicit: false,\n                requireAll: true,\n                omitDefault: false,\n                pruneBlankNodeIdentifiers: true,\n                bnodesToClear: []\n              }); // if frame is a string, attempt to dereference remote document\n\n              if (!_isString(frame)) {\n                _context4.next = 9;\n                break;\n              }\n\n              _context4.next = 6;\n              return jsonld.get(frame, options);\n\n            case 6:\n              remoteDoc = _context4.sent;\n              frame = remoteDoc.document;\n\n              if (remoteDoc.contextUrl) {\n                // inject link header @context into frame\n                ctx = frame['@context'];\n\n                if (!ctx) {\n                  ctx = remoteDoc.contextUrl;\n                } else if (_isArray(ctx)) {\n                  ctx.push(remoteDoc.contextUrl);\n                } else {\n                  ctx = [ctx, remoteDoc.contextUrl];\n                }\n\n                frame['@context'] = ctx;\n              }\n\n            case 9:\n              frameContext = frame ? frame['@context'] || {} : {}; // expand input\n\n              _context4.next = 12;\n              return jsonld.expand(input, options);\n\n            case 12:\n              expanded = _context4.sent;\n              // expand frame\n              opts = util.clone(options);\n              opts.isFrame = true;\n              opts.keepFreeFloatingNodes = true;\n              _context4.next = 18;\n              return jsonld.expand(frame, opts);\n\n            case 18:\n              expandedFrame = _context4.sent;\n              // if the unexpanded frame includes a key expanding to @graph, frame the\n              // default graph, otherwise, the merged graph\n              // FIXME should look for aliases of @graph\n              opts.merged = !('@graph' in frame); // do framing\n\n              framed = _frameMergedOrDefault(expanded, expandedFrame, opts); // compact result (force @graph option to true, skip expansion,\n              // check for linked embeds)\n\n              opts.graph = true;\n              opts.skipExpansion = true;\n              opts.link = {};\n              opts.framing = true;\n              _context4.next = 27;\n              return jsonld.compact(framed, frameContext, opts);\n\n            case 27:\n              compacted = _context4.sent;\n              return _context4.abrupt(\"return\", compacted);\n\n            case 29:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x9, _x10, _x11) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n  /**\n   * **Experimental**\n   *\n   * Links a JSON-LD document's nodes in memory.\n   *\n   * @param input the JSON-LD document to link.\n   * @param [ctx] the JSON-LD context to apply.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   * @param [callback(err, linked)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the linked output.\n   */\n\n  jsonld.link = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref5 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(input, ctx, options) {\n      var frame;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // API matches running frame with a wildcard frame and embed: '@link'\n              // get arguments\n              frame = {};\n\n              if (ctx) {\n                frame['@context'] = ctx;\n              }\n\n              frame['@embed'] = '@link';\n              return _context5.abrupt(\"return\", jsonld.frame(input, frame, options));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x12, _x13, _x14) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n  /**\n   * Performs RDF dataset normalization on the given input. The input is JSON-LD\n   * unless the 'inputFormat' option is used. The output is an RDF dataset\n   * unless the 'format' option is used.\n   *\n   * @param input the input to normalize as JSON-LD or as a format specified by\n   *          the 'inputFormat' option.\n   * @param [options] the options to use:\n   *          [algorithm] the normalization algorithm to use, `URDNA2015` or\n   *            `URGNA2012` (default: `URDNA2015`).\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [inputFormat] the format if input is not JSON-LD:\n   *            'application/n-quads' for N-Quads.\n   *          [format] the format if output is a string:\n   *            'application/n-quads' for N-Quads.\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   *          [useNative] true to use a native canonize algorithm\n   * @param [callback(err, normalized)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the normalized output.\n   */\n\n  jsonld.normalize = jsonld.canonize = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(input, options) {\n      var parsedInput,\n          opts,\n          dataset,\n          _args6 = arguments;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(_args6.length < 1)) {\n                _context6.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not canonize, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                algorithm: 'URDNA2015',\n                skipExpansion: false\n              });\n\n              if (!('inputFormat' in options)) {\n                _context6.next = 8;\n                break;\n              }\n\n              if (!(options.inputFormat !== 'application/n-quads' && options.inputFormat !== 'application/nquads')) {\n                _context6.next = 6;\n                break;\n              }\n\n              throw new JsonLdError('Unknown canonicalization input format.', 'jsonld.CanonizeError');\n\n            case 6:\n              // TODO: `await` for async parsers\n              parsedInput = NQuads.parse(input); // do canonicalization\n\n              return _context6.abrupt(\"return\", canonize.canonize(parsedInput, options));\n\n            case 8:\n              // convert to RDF dataset then do normalization\n              opts = util.clone(options);\n              delete opts.format;\n              opts.produceGeneralizedRdf = false;\n              _context6.next = 13;\n              return jsonld.toRDF(input, opts);\n\n            case 13:\n              dataset = _context6.sent;\n              return _context6.abrupt(\"return\", canonize.canonize(dataset, options));\n\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x15, _x16) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n  /**\n   * Converts an RDF dataset to JSON-LD.\n   *\n   * @param dataset a serialized string of RDF in a format specified by the\n   *          format option or an RDF dataset to convert.\n   * @param [options] the options to use:\n   *          [format] the format if dataset param must first be parsed:\n   *            'application/n-quads' for N-Quads (default).\n   *          [rdfParser] a custom RDF-parser to use to parse the dataset.\n   *          [useRdfType] true to use rdf:type, false to use @type\n   *            (default: false).\n   *          [useNativeTypes] true to convert XSD types into native types\n   *            (boolean, integer, double), false not to (default: false).\n   * @param [callback(err, output)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the JSON-LD document.\n   */\n\n  jsonld.fromRDF = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref7 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(dataset, options) {\n      var _options,\n          format,\n          _options2,\n          rdfParser,\n          parsedDataset,\n          _args7 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(_args7.length < 1)) {\n                _context7.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not convert from RDF, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                format: _isString(dataset) ? 'application/n-quads' : undefined\n              });\n              _options = options, format = _options.format;\n              _options2 = options, rdfParser = _options2.rdfParser; // handle special format\n\n              if (!format) {\n                _context7.next = 11;\n                break;\n              }\n\n              // check supported formats\n              rdfParser = rdfParser || _rdfParsers[format];\n\n              if (rdfParser) {\n                _context7.next = 9;\n                break;\n              }\n\n              throw new JsonLdError('Unknown input format.', 'jsonld.UnknownFormat', {\n                format: format\n              });\n\n            case 9:\n              _context7.next = 12;\n              break;\n\n            case 11:\n              // no-op parser, assume dataset already parsed\n              rdfParser = function rdfParser() {\n                return dataset;\n              };\n\n            case 12:\n              if (rdfParser.length > 1) {\n                // convert callback-based rdf parser to promise-based\n                parsedDataset = new Promise(function (resolve, reject) {\n                  rdfParser(dataset, function (err, dataset) {\n                    if (err) {\n                      reject(err);\n                    } else {\n                      resolve(dataset);\n                    }\n                  });\n                });\n              } else {\n                parsedDataset = Promise.resolve(rdfParser(dataset));\n              }\n\n              _context7.next = 15;\n              return parsedDataset;\n\n            case 15:\n              parsedDataset = _context7.sent;\n\n              // back-compat with old parsers that produced legacy dataset format\n              if (!Array.isArray(parsedDataset)) {\n                parsedDataset = NQuads.legacyDatasetToQuads(parsedDataset);\n              }\n\n              return _context7.abrupt(\"return\", _fromRDF(parsedDataset, options));\n\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x17, _x18) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n  /**\n   * Outputs the RDF dataset found in the given JSON-LD object.\n   *\n   * @param input the JSON-LD input.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [format] the format to use to output a string:\n   *            'application/n-quads' for N-Quads.\n   *          [produceGeneralizedRdf] true to output generalized RDF, false\n   *            to produce only standard RDF (default: false).\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   * @param [callback(err, dataset)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the RDF dataset.\n   */\n\n  jsonld.toRDF = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref8 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8(input, options) {\n      var expanded,\n          dataset,\n          _args8 = arguments;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(_args8.length < 1)) {\n                _context8.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not convert to RDF, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                skipExpansion: false\n              }); // TODO: support toRDF custom map?\n\n              if (!options.skipExpansion) {\n                _context8.next = 7;\n                break;\n              }\n\n              expanded = input;\n              _context8.next = 10;\n              break;\n\n            case 7:\n              _context8.next = 9;\n              return jsonld.expand(input, options);\n\n            case 9:\n              expanded = _context8.sent;\n\n            case 10:\n              // output RDF dataset\n              dataset = _toRDF(expanded, options);\n\n              if (!options.format) {\n                _context8.next = 17;\n                break;\n              }\n\n              if (!(options.format === 'application/n-quads' || options.format === 'application/nquads')) {\n                _context8.next = 16;\n                break;\n              }\n\n              _context8.next = 15;\n              return NQuads.serialize(dataset);\n\n            case 15:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 16:\n              throw new JsonLdError('Unknown output format.', 'jsonld.UnknownFormat', {\n                format: options.format\n              });\n\n            case 17:\n              return _context8.abrupt(\"return\", dataset);\n\n            case 18:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function (_x19, _x20) {\n      return _ref8.apply(this, arguments);\n    };\n  }());\n  /**\n   * **Experimental**\n   *\n   * Recursively flattens the nodes in the given JSON-LD input into a merged\n   * map of node ID => node. All graphs will be merged into the default graph.\n   *\n   * @param input the JSON-LD input.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   * @param [callback(err, nodeMap)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the merged node map.\n   */\n\n  jsonld.createNodeMap = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref9 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9(input, options) {\n      var expanded,\n          _args9 = arguments;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(_args9.length < 1)) {\n                _context9.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not create node map, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : ''\n              }); // expand input\n\n              _context9.next = 5;\n              return jsonld.expand(input, options);\n\n            case 5:\n              expanded = _context9.sent;\n              return _context9.abrupt(\"return\", _createMergedNodeMap(expanded, options));\n\n            case 7:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function (_x21, _x22) {\n      return _ref9.apply(this, arguments);\n    };\n  }());\n  /**\n   * **Experimental**\n   *\n   * Merges two or more JSON-LD documents into a single flattened document.\n   *\n   * @param docs the JSON-LD documents to merge together.\n   * @param ctx the context to use to compact the merged result, or null.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n   *          [mergeNodes] true to merge properties for nodes with the same ID,\n   *            false to ignore new properties for nodes with the same ID once\n   *            the ID has been defined; note that this may not prevent merging\n   *            new properties where a node is in the `object` position\n   *            (default: true).\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   * @param [callback(err, merged)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the merged output.\n   */\n\n  jsonld.merge = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref10 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee10(docs, ctx, options) {\n      var expanded,\n          mergeNodes,\n          issuer,\n          graphs,\n          i,\n          doc,\n          _graphs,\n          graphName,\n          _nodeMap,\n          nodeMap,\n          key,\n          defaultGraph,\n          flattened,\n          keys,\n          ki,\n          node,\n          compacted,\n          _args10 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!(_args10.length < 1)) {\n                _context10.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not merge, too few arguments.');\n\n            case 2:\n              if (_isArray(docs)) {\n                _context10.next = 4;\n                break;\n              }\n\n              throw new TypeError('Could not merge, \"docs\" must be an array.');\n\n            case 4:\n              if (typeof ctx === 'function') {\n                ctx = null;\n              } else {\n                ctx = ctx || null;\n              } // set default options\n\n\n              options = _setDefaults(options, {}); // expand all documents\n\n              _context10.next = 8;\n              return Promise.all(docs.map(function (doc) {\n                var opts = Object.assign({}, options);\n                return jsonld.expand(doc, opts);\n              }));\n\n            case 8:\n              expanded = _context10.sent;\n              mergeNodes = true;\n\n              if ('mergeNodes' in options) {\n                mergeNodes = options.mergeNodes;\n              }\n\n              issuer = options.issuer || new IdentifierIssuer('_:b');\n              graphs = {\n                '@default': {}\n              };\n              i = 0;\n\n            case 14:\n              if (!(i < expanded.length)) {\n                _context10.next = 33;\n                break;\n              }\n\n              // uniquely relabel blank nodes\n              doc = util.relabelBlankNodes(expanded[i], {\n                issuer: new IdentifierIssuer('_:b' + i + '-')\n              }); // add nodes to the shared node map graphs if merging nodes, to a\n              // separate graph set if not\n\n              _graphs = mergeNodes || i === 0 ? graphs : {\n                '@default': {}\n              };\n\n              _createNodeMap(doc, _graphs, '@default', issuer);\n\n              if (!(_graphs !== graphs)) {\n                _context10.next = 30;\n                break;\n              }\n\n              _context10.t0 = _regeneratorRuntime.keys(_graphs);\n\n            case 20:\n              if ((_context10.t1 = _context10.t0()).done) {\n                _context10.next = 30;\n                break;\n              }\n\n              graphName = _context10.t1.value;\n              _nodeMap = _graphs[graphName];\n\n              if (graphName in graphs) {\n                _context10.next = 26;\n                break;\n              }\n\n              graphs[graphName] = _nodeMap;\n              return _context10.abrupt(\"continue\", 20);\n\n            case 26:\n              nodeMap = graphs[graphName];\n\n              for (key in _nodeMap) {\n                if (!(key in nodeMap)) {\n                  nodeMap[key] = _nodeMap[key];\n                }\n              }\n\n              _context10.next = 20;\n              break;\n\n            case 30:\n              ++i;\n              _context10.next = 14;\n              break;\n\n            case 33:\n              // add all non-default graphs to default graph\n              defaultGraph = _mergeNodeMaps(graphs); // produce flattened output\n\n              flattened = [];\n              keys = Object.keys(defaultGraph).sort();\n\n              for (ki = 0; ki < keys.length; ++ki) {\n                node = defaultGraph[keys[ki]]; // only add full subjects to top-level\n\n                if (!_isSubjectReference(node)) {\n                  flattened.push(node);\n                }\n              }\n\n              if (!(ctx === null)) {\n                _context10.next = 39;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", flattened);\n\n            case 39:\n              // compact result (force @graph option to true, skip expansion)\n              options.graph = true;\n              options.skipExpansion = true;\n              _context10.next = 43;\n              return jsonld.compact(flattened, ctx, options);\n\n            case 43:\n              compacted = _context10.sent;\n              return _context10.abrupt(\"return\", compacted);\n\n            case 45:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function (_x23, _x24, _x25) {\n      return _ref10.apply(this, arguments);\n    };\n  }());\n  /**\n   * The default document loader for external documents. If the environment\n   * is node.js, a callback-continuation-style document loader is used; otherwise,\n   * a promises-style document loader is used.\n   *\n   * @param url the URL to load.\n   * @param callback(err, remoteDoc) called once the operation completes,\n   *          if using a non-promises API.\n   *\n   * @return a promise, if using a promises API.\n   */\n\n  Object.defineProperty(jsonld, 'documentLoader', {\n    get: function get() {\n      return jsonld._documentLoader;\n    },\n    set: function set(v) {\n      return jsonld._documentLoader = util.normalizeDocumentLoader(v);\n    }\n  }); // default document loader not implemented\n\n  jsonld.documentLoader =\n  /*#__PURE__*/\n  function () {\n    var _ref11 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee11(url) {\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              throw new JsonLdError('Could not retrieve a JSON-LD document from the URL. URL ' + 'dereferencing not implemented.', 'jsonld.LoadDocumentError', {\n                code: 'loading document failed',\n                url: url\n              });\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function (_x26) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n  /**\n   * Deprecated default document loader. Do not use or override.\n   */\n\n\n  jsonld.loadDocument = util.callbackify(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee12() {\n    var _args12 = arguments;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            return _context12.abrupt(\"return\", jsonld.documentLoader.apply(null, _args12));\n\n          case 1:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  })));\n  /**\n   * Gets a remote JSON-LD document using the default document loader or\n   * one given in the passed options.\n   *\n   * @param url the URL to fetch.\n   * @param [options] the options to use:\n   *          [documentLoader] the document loader to use.\n   * @param [callback(err, remoteDoc)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the retrieved remote document.\n   */\n\n  jsonld.get = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref13 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee13(url, options) {\n      var load, remoteDoc;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (typeof options.documentLoader === 'function') {\n                load = util.normalizeDocumentLoader(options.documentLoader);\n              } else {\n                load = jsonld.documentLoader;\n              }\n\n              _context13.next = 3;\n              return load(url);\n\n            case 3:\n              remoteDoc = _context13.sent;\n              _context13.prev = 4;\n\n              if (remoteDoc.document) {\n                _context13.next = 7;\n                break;\n              }\n\n              throw new JsonLdError('No remote document found at the given URL.', 'jsonld.NullRemoteDocument');\n\n            case 7:\n              if (_isString(remoteDoc.document)) {\n                remoteDoc.document = JSON.parse(remoteDoc.document);\n              }\n\n              _context13.next = 13;\n              break;\n\n            case 10:\n              _context13.prev = 10;\n              _context13.t0 = _context13[\"catch\"](4);\n              throw new JsonLdError('Could not retrieve a JSON-LD document from the URL.', 'jsonld.LoadDocumentError', {\n                code: 'loading document failed',\n                cause: _context13.t0,\n                remoteDoc: remoteDoc\n              });\n\n            case 13:\n              return _context13.abrupt(\"return\", remoteDoc);\n\n            case 14:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[4, 10]]);\n    }));\n\n    return function (_x27, _x28) {\n      return _ref13.apply(this, arguments);\n    };\n  }());\n  /**\n   * Processes a local context, resolving any URLs as necessary, and returns a\n   * new active context in its callback.\n   *\n   * @param activeCtx the current active context.\n   * @param localCtx the local context to process.\n   * @param [options] the options to use:\n   *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n   * @param [callback(err, activeCtx)] called once the operation completes.\n   *\n   * @return a Promise that resolves to the new active context.\n   */\n\n  jsonld.processContext = util.callbackify(\n  /*#__PURE__*/\n  function () {\n    var _ref14 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee14(activeCtx, localCtx, options) {\n      var ctx;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              // set default options\n              options = _setDefaults(options, {\n                base: ''\n              }); // return initial context early for null context\n\n              if (!(localCtx === null)) {\n                _context14.next = 3;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", _getInitialContext(options));\n\n            case 3:\n              // get URLs in localCtx\n              localCtx = util.clone(localCtx);\n\n              if (!(_isObject(localCtx) && '@context' in localCtx)) {\n                localCtx = {\n                  '@context': localCtx\n                };\n              }\n\n              _context14.next = 7;\n              return _getAllContexts(localCtx, options);\n\n            case 7:\n              ctx = _context14.sent;\n              return _context14.abrupt(\"return\", _processContext({\n                activeCtx: activeCtx,\n                localCtx: ctx,\n                options: options\n              }));\n\n            case 9:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function (_x29, _x30, _x31) {\n      return _ref14.apply(this, arguments);\n    };\n  }()); // backwards compatibility\n\n  jsonld.getContextValue = require('./context').getContextValue;\n  /**\n   * Document loaders.\n   */\n\n  jsonld.documentLoaders = {};\n  jsonld.documentLoaders.node = require('./documentLoaders/node');\n  jsonld.documentLoaders.xhr = require('./documentLoaders/xhr');\n  /**\n   * Assigns the default document loader for external document URLs to a built-in\n   * default. Supported types currently include: 'xhr' and 'node'.\n   *\n   * @param type the type to set.\n   * @param [params] the parameters required to use the document loader.\n   */\n\n  jsonld.useDocumentLoader = function (type) {\n    if (!(type in jsonld.documentLoaders)) {\n      throw new JsonLdError('Unknown document loader type: \"' + type + '\"', 'jsonld.UnknownDocumentLoader', {\n        type: type\n      });\n    } // set document loader\n\n\n    jsonld.documentLoader = jsonld.documentLoaders[type].apply(jsonld, Array.prototype.slice.call(arguments, 1));\n  };\n  /**\n   * Registers an RDF dataset parser by content-type, for use with\n   * jsonld.fromRDF. An RDF dataset parser will always be given two parameters,\n   * a string of input and a callback. An RDF dataset parser can be synchronous\n   * or asynchronous.\n   *\n   * If the parser function returns undefined or null then it will be assumed to\n   * be asynchronous w/a continuation-passing style and the callback parameter\n   * given to the parser MUST be invoked.\n   *\n   * If it returns a Promise, then it will be assumed to be asynchronous, but the\n   * callback parameter MUST NOT be invoked. It should instead be ignored.\n   *\n   * If it returns an RDF dataset, it will be assumed to be synchronous and the\n   * callback parameter MUST NOT be invoked. It should instead be ignored.\n   *\n   * @param contentType the content-type for the parser.\n   * @param parser(input, callback(err, dataset)) the parser function (takes a\n   *          string as a parameter and either returns null/undefined and uses\n   *          the given callback, returns a Promise, or returns an RDF dataset).\n   */\n\n\n  jsonld.registerRDFParser = function (contentType, parser) {\n    _rdfParsers[contentType] = parser;\n  };\n  /**\n   * Unregisters an RDF dataset parser by content-type.\n   *\n   * @param contentType the content-type for the parser.\n   */\n\n\n  jsonld.unregisterRDFParser = function (contentType) {\n    delete _rdfParsers[contentType];\n  }; // register the N-Quads RDF parser\n\n\n  jsonld.registerRDFParser('application/n-quads', NQuads.parse);\n  jsonld.registerRDFParser('application/nquads', NQuads.parse); // register the RDFa API RDF parser\n\n  jsonld.registerRDFParser('rdfa-api', Rdfa.parse);\n  /* URL API */\n\n  jsonld.url = require('./url');\n  /* Utility API */\n\n  jsonld.util = util; // backwards compatibility\n\n  Object.assign(jsonld, util); // reexpose API as jsonld.promises for backwards compatability\n\n  jsonld.promises = jsonld; // backwards compatibility\n\n  jsonld.RequestQueue = require('./RequestQueue');\n  /* WebIDL API */\n\n  jsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld); // setup browser global JsonLdProcessor\n\n  if (_browser && typeof global.JsonLdProcessor === 'undefined') {\n    Object.defineProperty(global, 'JsonLdProcessor', {\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      value: jsonld.JsonLdProcessor\n    });\n  } // set platform-specific defaults/APIs\n\n\n  if (_nodejs) {\n    // use node document loader by default\n    jsonld.useDocumentLoader('node');\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    // use xhr document loader by default\n    jsonld.useDocumentLoader('xhr');\n  }\n\n  function _setDefaults(options, _ref15) {\n    var _ref15$documentLoader = _ref15.documentLoader,\n        documentLoader = _ref15$documentLoader === void 0 ? jsonld.documentLoader : _ref15$documentLoader,\n        defaults = _objectWithoutProperties(_ref15, [\"documentLoader\"]);\n\n    return Object.assign({}, {\n      documentLoader: documentLoader\n    }, defaults, options);\n  } // end of jsonld API `wrapper` factory\n\n\n  return jsonld;\n}; // external APIs:\n// used to generate a new jsonld API instance\n\n\nvar factory = function factory() {\n  return wrapper(function () {\n    return factory();\n  });\n}; // wrap the main jsonld API instance\n\n\nwrapper(factory); // export API\n\nmodule.exports = factory;","map":null,"metadata":{},"sourceType":"script"}