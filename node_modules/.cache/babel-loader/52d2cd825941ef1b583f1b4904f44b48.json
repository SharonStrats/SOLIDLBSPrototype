{"ast":null,"code":"/* a light layer on top of solid-cli, giving it persistant \n * sessions and making it conform to the same API as \n * solid-auth-client\n */\n\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar Rest = require('solid-rest/src/rest.js');\n\nvar rest;\n\nfunction setRestHandlers(handlers) {\n  if (typeof handlers != \"undefined\") {\n    rest = new Rest(handlers);\n    return;\n  }\n\n  if (typeof rest === \"undefined\") {\n    var File = require('solid-rest/src/file.js');\n\n    var Mem = require('solid-rest/src/localStorage.js');\n\n    rest = new Rest([new File(), new Mem()]);\n  }\n}\n\nvar ifetch = require('isomorphic-fetch');\n\nvar SolidClient = require('@solid/cli/src/SolidClient');\n\nvar IdentityManager = require('@solid/cli/src/IdentityManager');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nexports.name = \"cli\";\nexports.fetch = fetch;\nexports.currentSession = currentSession;\nexports.login = login;\nexports.logout = logout;\nexports.getCredentials = getCredentials; // cjs-end\n\nvar session;\nvar idMan = new IdentityManager();\nvar client = new SolidClient({\n  identityManager: new IdentityManager()\n});\n/*cjs*/\n\nfunction fetch(_x, _x2) {\n  return _fetch.apply(this, arguments);\n}\n/* \n *  RATHER MINIMAL, BUT FOR NOW THEY\"LL DO\n */\n\n/*cjs*/\n\n\nfunction _fetch() {\n  _fetch = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(url, request) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!url.match(/^(file:|app:)/)) {\n              _context.next = 5;\n              break;\n            }\n\n            setRestHandlers();\n            _context.next = 4;\n            return rest.fetch(url, request);\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n            request = request || {};\n            request.method = request.method || 'GET';\n            request.headers = request.headers || {};\n\n            if (!session) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 11;\n            return client.createToken(url, session);\n\n          case 11:\n            token = _context.sent;\n            request.credentials = \"include\";\n            request.headers.authorization = \"Bearer \".concat(token);\n\n          case 14:\n            _context.next = 16;\n            return ifetch(url, request);\n\n          case 16:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetch.apply(this, arguments);\n}\n\nfunction logout() {\n  return _logout.apply(this, arguments);\n}\n/*cjs*/\n\n\nfunction _logout() {\n  _logout = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            session = undefined;\n            return _context2.abrupt(\"return\", 1);\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _logout.apply(this, arguments);\n}\n\nfunction currentSession() {\n  return _currentSession.apply(this, arguments);\n}\n/*cjs*/\n\n\nfunction _currentSession() {\n  _currentSession = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(session && !client.isExpired(session))) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", session);\n\n          case 4:\n            return _context3.abrupt(\"return\", null);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _currentSession.apply(this, arguments);\n}\n\nfunction login(_x3) {\n  return _login.apply(this, arguments);\n}\n/*cjs*/\n\n\nfunction _login() {\n  _login = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(cfg) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (typeof cfg === \"string\") cfg = undefined; // s-a-client compatability \n\n            _context4.t0 = cfg;\n\n            if (_context4.t0) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.next = 5;\n            return getCredentials();\n\n          case 5:\n            _context4.t0 = _context4.sent;\n\n          case 6:\n            cfg = _context4.t0;\n\n            if (!(typeof cfg.password === \"undefined\")) {\n              _context4.next = 9;\n              break;\n            }\n\n            throw new Error(\"Couldn't find login config, please specify environment variables SOLID_IDP, SOLID_USERNAME, and SOLID_PASSWORD or see the README for solid-auth-cli for other login options.\");\n\n          case 9:\n            _context4.next = 11;\n            return client.login(cfg.idp, {\n              username: cfg.username,\n              password: cfg.password\n            });\n\n          case 11:\n            session = _context4.sent;\n\n            if (!session) {\n              _context4.next = 17;\n              break;\n            }\n\n            session.webId = session.idClaims.sub;\n            return _context4.abrupt(\"return\", session);\n\n          case 17:\n            throw new Error(\"could not log in\");\n\n          case 18:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _login.apply(this, arguments);\n}\n\nfunction getCredentials(_x4) {\n  return _getCredentials.apply(this, arguments);\n}\n\nfunction _getCredentials() {\n  _getCredentials = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(fn) {\n    var creds;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            fn = fn || path.join(process.env.HOME, \".solid-auth-cli-config.json\");\n            creds = {};\n\n            if (!fs.existsSync(fn)) {\n              _context5.next = 21;\n              break;\n            }\n\n            _context5.prev = 3;\n            creds = fs.readFileSync(fn, 'utf8');\n            _context5.next = 10;\n            break;\n\n          case 7:\n            _context5.prev = 7;\n            _context5.t0 = _context5[\"catch\"](3);\n            throw new Error(\"read file error \" + _context5.t0);\n\n          case 10:\n            _context5.prev = 10;\n            creds = JSON.parse(creds);\n\n            if (creds) {\n              _context5.next = 14;\n              break;\n            }\n\n            throw new Error(\"JSON parse error : \" + err);\n\n          case 14:\n            _context5.next = 19;\n            break;\n\n          case 16:\n            _context5.prev = 16;\n            _context5.t1 = _context5[\"catch\"](10);\n            throw new Error(\"JSON parse error : \" + _context5.t1);\n\n          case 19:\n            _context5.next = 22;\n            break;\n\n          case 21:\n            creds = {\n              idp: process.env.SOLID_IDP,\n              username: process.env.SOLID_USERNAME,\n              password: process.env.SOLID_PASSWORD\n            };\n\n          case 22:\n            return _context5.abrupt(\"return\", creds);\n\n          case 23:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[3, 7], [10, 16]]);\n  }));\n  return _getCredentials.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}