{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport N3DataFactory from './N3DataFactory';\nvar DEFAULTGRAPH = N3DataFactory.defaultGraph();\nvar rdf = namespaces.rdf,\n    xsd = namespaces.xsd; // Characters in literals that require escaping\n\nvar escape = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n  '\\\\': '\\\\\\\\',\n  '\"': '\\\\\"',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f'\n}; // ## Placeholder class to represent already pretty-printed terms\n\nvar SerializedTerm =\n/*#__PURE__*/\nfunction (_N3DataFactory$intern) {\n  _inherits(SerializedTerm, _N3DataFactory$intern);\n\n  function SerializedTerm() {\n    _classCallCheck(this, SerializedTerm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SerializedTerm).apply(this, arguments));\n  }\n\n  _createClass(SerializedTerm, [{\n    key: \"equals\",\n    // Pretty-printed nodes are not equal to any other node\n    // (e.g., [] does not equal [])\n    value: function equals() {\n      return false;\n    }\n  }]);\n\n  return SerializedTerm;\n}(N3DataFactory.internal.Term); // ## Constructor\n\n\nvar N3Writer =\n/*#__PURE__*/\nfunction () {\n  function N3Writer(outputStream, options) {\n    _classCallCheck(this, N3Writer);\n\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/; // Shift arguments if the first argument is not a stream\n\n    if (outputStream && typeof outputStream.write !== 'function') options = outputStream, outputStream = null;\n    options = options || {}; // If no output stream given, send the output as string through the end callback\n\n    if (!outputStream) {\n      var output = '';\n      this._outputStream = {\n        write: function write(chunk, encoding, done) {\n          output += chunk;\n          done && done();\n        },\n        end: function end(done) {\n          done && done(null, output);\n        }\n      };\n      this._endStream = true;\n    } else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    } // Initialize writer, depending on the format\n\n\n    this._subject = null;\n\n    if (!/triple|quad/i.test(options.format)) {\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n    } else {\n      this._writeQuad = this._writeQuadLine;\n    }\n  } // ## Private methods\n  // ### Whether the current graph is the default graph\n\n\n  _createClass(N3Writer, [{\n    key: \"_write\",\n    // ### `_write` writes the argument to the output stream\n    value: function _write(string, callback) {\n      this._outputStream.write(string, 'utf8', callback);\n    } // ### `_writeQuad` writes the quad to the output stream\n\n  }, {\n    key: \"_writeQuad\",\n    value: function _writeQuad(subject, predicate, object, graph, done) {\n      try {\n        // Write the graph's label if it has changed\n        if (!graph.equals(this._graph)) {\n          // Close the previous graph and start the new one\n          this._write((this._subject === null ? '' : this._inDefaultGraph ? '.\\n' : '\\n}\\n') + (DEFAULTGRAPH.equals(graph) ? '' : this._encodeIriOrBlank(graph) + ' {\\n'));\n\n          this._graph = graph;\n          this._subject = null;\n        } // Don't repeat the subject if it's the same\n\n\n        if (subject.equals(this._subject)) {\n          // Don't repeat the predicate if it's the same\n          if (predicate.equals(this._predicate)) this._write(', ' + this._encodeObject(object), done); // Same subject, different predicate\n          else this._write(';\\n    ' + this._encodePredicate(this._predicate = predicate) + ' ' + this._encodeObject(object), done);\n        } // Different subject; write the whole quad\n        else this._write((this._subject === null ? '' : '.\\n') + this._encodeIriOrBlank(this._subject = subject) + ' ' + this._encodePredicate(this._predicate = predicate) + ' ' + this._encodeObject(object), done);\n      } catch (error) {\n        done && done(error);\n      }\n    } // ### `_writeQuadLine` writes the quad to the output stream as a single line\n\n  }, {\n    key: \"_writeQuadLine\",\n    value: function _writeQuadLine(subject, predicate, object, graph, done) {\n      // Write the quad without prefixes\n      delete this._prefixMatch;\n\n      this._write(this.quadToString(subject, predicate, object, graph), done);\n    } // ### `quadToString` serializes a quad as a string\n\n  }, {\n    key: \"quadToString\",\n    value: function quadToString(subject, predicate, object, graph) {\n      return this._encodeIriOrBlank(subject) + ' ' + this._encodeIriOrBlank(predicate) + ' ' + this._encodeObject(object) + (graph && graph.value ? ' ' + this._encodeIriOrBlank(graph) + ' .\\n' : ' .\\n');\n    } // ### `quadsToString` serializes an array of quads as a string\n\n  }, {\n    key: \"quadsToString\",\n    value: function quadsToString(quads) {\n      return quads.map(function (t) {\n        return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n      }, this).join('');\n    } // ### `_encodeIriOrBlank` represents an IRI or blank node\n\n  }, {\n    key: \"_encodeIriOrBlank\",\n    value: function _encodeIriOrBlank(entity) {\n      // A blank node or list is represented as-is\n      if (entity.termType !== 'NamedNode') return 'id' in entity ? entity.id : '_:' + entity.value; // Escape special characters\n\n      var iri = entity.value;\n      if (escape.test(iri)) iri = iri.replace(escapeAll, characterReplacer); // Try to represent the IRI as prefixed name\n\n      var prefixMatch = this._prefixRegex.exec(iri);\n\n      return !prefixMatch ? '<' + iri + '>' : !prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2];\n    } // ### `_encodeLiteral` represents a literal\n\n  }, {\n    key: \"_encodeLiteral\",\n    value: function _encodeLiteral(literal) {\n      // Escape special characters\n      var value = literal.value;\n      if (escape.test(value)) value = value.replace(escapeAll, characterReplacer); // Write the literal, possibly with type or language\n\n      if (literal.language) return '\"' + value + '\"@' + literal.language;else if (literal.datatype.value !== xsd.string) return '\"' + value + '\"^^' + this._encodeIriOrBlank(literal.datatype);else return '\"' + value + '\"';\n    } // ### `_encodePredicate` represents a predicate\n\n  }, {\n    key: \"_encodePredicate\",\n    value: function _encodePredicate(predicate) {\n      return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n    } // ### `_encodeObject` represents an object\n\n  }, {\n    key: \"_encodeObject\",\n    value: function _encodeObject(object) {\n      return object.termType === 'Literal' ? this._encodeLiteral(object) : this._encodeIriOrBlank(object);\n    } // ### `_blockedWrite` replaces `_write` after the writer has been closed\n\n  }, {\n    key: \"_blockedWrite\",\n    value: function _blockedWrite() {\n      throw new Error('Cannot write because the writer has been closed.');\n    } // ### `addQuad` adds the quad to the output stream\n\n  }, {\n    key: \"addQuad\",\n    value: function addQuad(subject, predicate, object, graph, done) {\n      // The quad was given as an object, so shift parameters\n      if (object === undefined) this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate); // The optional `graph` parameter was not provided\n      else if (typeof graph === 'function') this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph); // The `graph` parameter was provided\n        else this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n    } // ### `addQuads` adds the quads to the output stream\n\n  }, {\n    key: \"addQuads\",\n    value: function addQuads(quads) {\n      for (var i = 0; i < quads.length; i++) {\n        this.addQuad(quads[i]);\n      }\n    } // ### `addPrefix` adds the prefix to the output stream\n\n  }, {\n    key: \"addPrefix\",\n    value: function addPrefix(prefix, iri, done) {\n      var prefixes = {};\n      prefixes[prefix] = iri;\n      this.addPrefixes(prefixes, done);\n    } // ### `addPrefixes` adds the prefixes to the output stream\n\n  }, {\n    key: \"addPrefixes\",\n    value: function addPrefixes(prefixes, done) {\n      // Add all useful prefixes\n      var prefixIRIs = this._prefixIRIs,\n          hasPrefixes = false;\n\n      for (var prefix in prefixes) {\n        // Verify whether the prefix can be used and does not exist yet\n        var iri = prefixes[prefix];\n        if (typeof iri !== 'string') iri = iri.value;\n\n        if (/[#\\/]$/.test(iri) && prefixIRIs[iri] !== (prefix += ':')) {\n          hasPrefixes = true;\n          prefixIRIs[iri] = prefix; // Finish a possible pending quad\n\n          if (this._subject !== null) {\n            this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n\n            this._subject = null, this._graph = '';\n          } // Write prefix\n\n\n          this._write('@prefix ' + prefix + ' <' + iri + '>.\\n');\n        }\n      } // Recreate the prefix matcher\n\n\n      if (hasPrefixes) {\n        var IRIlist = '',\n            prefixList = '';\n\n        for (var prefixIRI in prefixIRIs) {\n          IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;\n          prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];\n        }\n\n        IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n        this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\\/]*$|' + '^(' + IRIlist + ')([a-zA-Z][\\\\-_a-zA-Z0-9]*)$');\n      } // End a prefix block with a newline\n\n\n      this._write(hasPrefixes ? '\\n' : '', done);\n    } // ### `blank` creates a blank node with the given content\n\n  }, {\n    key: \"blank\",\n    value: function blank(predicate, object) {\n      var children = predicate,\n          child,\n          length; // Empty blank node\n\n      if (predicate === undefined) children = []; // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n      else if (predicate.termType) children = [{\n          predicate: predicate,\n          object: object\n        }]; // Blank node passed as blank({ predicate: predicate, object: object })\n        else if (!('length' in predicate)) children = [predicate];\n\n      switch (length = children.length) {\n        // Generate an empty blank node\n        case 0:\n          return new SerializedTerm('[]');\n        // Generate a non-nested one-triple blank node\n\n        case 1:\n          child = children[0];\n          if (!(child.object instanceof SerializedTerm)) return new SerializedTerm('[ ' + this._encodePredicate(child.predicate) + ' ' + this._encodeObject(child.object) + ' ]');\n        // Generate a multi-triple or nested blank node\n\n        default:\n          var contents = '['; // Write all triples in order\n\n          for (var i = 0; i < length; i++) {\n            child = children[i]; // Write only the object is the predicate is the same as the previous\n\n            if (child.predicate.equals(predicate)) contents += ', ' + this._encodeObject(child.object); // Otherwise, write the predicate and the object\n            else {\n                contents += (i ? ';\\n  ' : '\\n  ') + this._encodePredicate(child.predicate) + ' ' + this._encodeObject(child.object);\n                predicate = child.predicate;\n              }\n          }\n\n          return new SerializedTerm(contents + '\\n]');\n      }\n    } // ### `list` creates a list node with the given content\n\n  }, {\n    key: \"list\",\n    value: function list(elements) {\n      var length = elements && elements.length || 0,\n          contents = new Array(length);\n\n      for (var i = 0; i < length; i++) {\n        contents[i] = this._encodeObject(elements[i]);\n      }\n\n      return new SerializedTerm('(' + contents.join(' ') + ')');\n    } // ### `end` signals the end of the output stream\n\n  }, {\n    key: \"end\",\n    value: function end(done) {\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n\n        this._subject = null;\n      } // Disallow further writing\n\n\n      this._write = this._blockedWrite; // Try to end the underlying stream, ensuring done is called exactly one time\n\n      var singleDone = done && function (error, result) {\n        singleDone = null, done(error, result);\n      };\n\n      if (this._endStream) {\n        try {\n          return this._outputStream.end(singleDone);\n        } catch (error) {\n          /* error closing stream */\n        }\n      }\n\n      singleDone && singleDone();\n    }\n  }, {\n    key: \"_inDefaultGraph\",\n    get: function get() {\n      return DEFAULTGRAPH.equals(this._graph);\n    }\n  }]);\n\n  return N3Writer;\n}(); // Replaces a character by its escaped version\n\n\nexport { N3Writer as default };\n\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  var result = escapedCharacters[character];\n\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = \"\\\\u0000\".substr(0, 6 - result.length) + result;\n    } // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n        result = ((character.charCodeAt(0) - 0xD800) * 0x400 + character.charCodeAt(1) + 0x2400).toString(16);\n        result = \"\\\\U00000000\".substr(0, 10 - result.length) + result;\n      }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}