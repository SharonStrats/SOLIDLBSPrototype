{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/**\n * Module dependencies\n */\nvar legacyCrypto = require('crypto');\n\nvar SubtleCrypto = require('./SubtleCrypto');\n\nvar _require = require('./errors'),\n    QuotaExceededError = _require.QuotaExceededError,\n    TypeMismatchError = _require.TypeMismatchError;\n/**\n * integerTypes\n */\n\n\nvar integerTypes = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array];\n/**\n * integerGetByConstructor\n */\n\nvar integerGetByConstructor = {\n  'Int8Array': 'getInt8',\n  'Uint8Array': 'getUint8',\n  'Int16Array': 'getInt16',\n  'Uint16Array': 'getUint16',\n  'Int32Array': 'getInt32',\n  'Uint32Array': 'getUint32'\n  /**\n   * Crypto interface\n   */\n\n};\n\nvar Crypto =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Crypto() {\n    _classCallCheck(this, Crypto);\n  }\n\n  _createClass(Crypto, [{\n    key: \"getRandomValues\",\n\n    /**\n     * getRandomValues\n     */\n    value: function getRandomValues(typedArray) {\n      if (!integerTypes.some(function (type) {\n        return typedArray instanceof type;\n      })) {\n        throw new TypeMismatchError();\n      }\n\n      var byteLength = typedArray.byteLength;\n\n      if (byteLength > 65536) {\n        throw new QuotaExceededError();\n      }\n\n      var type = typedArray.constructor;\n      var method = integerGetByConstructor[type.name];\n      var totalBytes = byteLength * typedArray.length;\n      var buffer = legacyCrypto.randomBytes(totalBytes);\n      var arrayBuffer = new Uint8Array(buffer);\n      var dataView = new DataView(arrayBuffer.buffer);\n\n      for (var byteIndex = 0; byteIndex < totalBytes; byteIndex += byteLength) {\n        var integer = dataView[method](byteIndex);\n        var arrayIndex = byteIndex / byteLength;\n        typedArray[arrayIndex] = integer;\n      }\n\n      return typedArray;\n    }\n    /**\n     * subtle\n     */\n\n  }, {\n    key: \"subtle\",\n    get: function get() {\n      return new SubtleCrypto();\n    }\n  }]);\n\n  return Crypto;\n}();\n/**\n * Export\n */\n\n\nmodule.exports = Crypto;","map":null,"metadata":{},"sourceType":"script"}