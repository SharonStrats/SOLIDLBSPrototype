{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _require = require('./context'),\n    isKeyword = _require.isKeyword;\n\nvar graphTypes = require('./graphTypes');\n\nvar types = require('./types');\n\nvar util = require('./util');\n\nvar JsonLdError = require('./JsonLdError');\n\nvar _require2 = require('./nodeMap'),\n    _createNodeMap = _require2.createNodeMap,\n    _mergeNodeMapGraphs = _require2.mergeNodeMapGraphs;\n\nvar api = {};\nmodule.exports = api;\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\n\napi.frameMergedOrDefault = function (input, frame, options) {\n  // create framing state\n  var state = {\n    options: options,\n    graph: '@default',\n    graphMap: {\n      '@default': {}\n    },\n    graphStack: [],\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  }; // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n\n  var issuer = new util.IdentifierIssuer('_:b');\n\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n\n  if (options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n\n  state.subjects = state.graphMap[state.graph]; // frame the subjects\n\n  var framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed); // If pruning blank nodes, find those to prune\n\n  if (options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear = Object.keys(state.bnodeMap).filter(function (id) {\n      return state.bnodeMap[id].length === 1;\n    });\n  }\n\n  return framed;\n};\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\n\n\napi.frame = function (state, subjects, frame, parent) {\n  var property = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n  // validate the frame\n  _validateFrame(frame);\n\n  frame = frame[0]; // get flags for current frame\n\n  var options = state.options;\n  var flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  }; // filter out subjects that match the frame\n\n  var matches = _filterSubjects(state, subjects, frame, flags); // add matches to output\n\n\n  var ids = Object.keys(matches).sort();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var id = _step.value;\n      var subject = matches[id];\n\n      if (flags.embed === '@link' && id in state.link) {\n        // TODO: may want to also match an existing linked subject against\n        // the current frame ... so different frames could produce different\n        // subjects that are only shared in-memory when the frames are the same\n        // add existing linked subject\n        _addFrameOutput(parent, property, state.link[id]);\n\n        return \"continue\";\n      }\n      /* Note: In order to treat each top-level match as a compartmentalized\n      result, clear the unique embedded subjects map when the property is null,\n      which only occurs at the top-level. */\n\n\n      if (property === null) {\n        state.uniqueEmbeds = _defineProperty({}, state.graph, {});\n      } else {\n        state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n      } // start output for subject\n\n\n      var output = {};\n      output['@id'] = id;\n\n      if (id.indexOf('_:') === 0) {\n        util.addValue(state.bnodeMap, id, output, {\n          propertyIsArray: true\n        });\n      }\n\n      state.link[id] = output; // if embed is @never or if a circular reference would be created by an\n      // embed, the subject cannot be embedded, just add the reference;\n      // note that a circular reference won't occur when the embed flag is\n      // `@link` as the above check will short-circuit before reaching this point\n\n      if (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack)) {\n        _addFrameOutput(parent, property, output);\n\n        return \"continue\";\n      } // if only the last match should be embedded\n\n\n      if (flags.embed === '@last') {\n        // remove any existing embed\n        if (id in state.uniqueEmbeds[state.graph]) {\n          _removeEmbed(state, id);\n        }\n\n        state.uniqueEmbeds[state.graph][id] = {\n          parent: parent,\n          property: property\n        };\n      } // push matching subject onto stack to enable circular embed checks\n\n\n      state.subjectStack.push({\n        subject: subject,\n        graph: state.graph\n      }); // subject is also the name of a graph\n\n      if (id in state.graphMap) {\n        var recurse = false;\n        var subframe = null;\n\n        if (!('@graph' in frame)) {\n          recurse = state.graph !== '@merged';\n          subframe = {};\n        } else {\n          subframe = frame['@graph'][0];\n\n          if (!types.isObject(subframe)) {\n            subframe = {};\n          }\n\n          recurse = !(id === '@merged' || id === '@default');\n        }\n\n        if (recurse) {\n          state.graphStack.push(state.graph);\n          state.graph = id; // recurse into graph\n\n          api.frame(state, Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n          state.graph = state.graphStack.pop;\n        }\n      } // iterate over subject properties\n\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = Object.keys(subject).sort()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var prop = _step2.value;\n\n          // copy keywords to output\n          if (isKeyword(prop)) {\n            output[prop] = util.clone(subject[prop]);\n\n            if (prop === '@type') {\n              // count bnode values of @type\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = subject['@type'][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var type = _step5.value;\n\n                  if (type.indexOf('_:') === 0) {\n                    util.addValue(state.bnodeMap, type, output, {\n                      propertyIsArray: true\n                    });\n                  }\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                    _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n            }\n\n            continue;\n          } // explicit is on and property isn't in the frame, skip processing\n\n\n          if (flags.explicit && !(prop in frame)) {\n            continue;\n          } // add objects\n\n\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = subject[prop][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var o = _step6.value;\n\n              var _subframe2 = prop in frame ? frame[prop] : _createImplicitFrame(flags); // recurse into list\n\n\n              if (graphTypes.isList(o)) {\n                // add empty list\n                var list = {\n                  '@list': []\n                };\n\n                _addFrameOutput(output, prop, list); // add list objects\n\n\n                var src = o['@list'];\n\n                for (var n in src) {\n                  o = src[n];\n\n                  if (graphTypes.isSubjectReference(o)) {\n                    var _subframe3 = prop in frame ? frame[prop][0]['@list'] : _createImplicitFrame(flags); // recurse into subject reference\n\n\n                    api.frame(state, [o['@id']], _subframe3, list, '@list');\n                  } else {\n                    // include other values automatically\n                    _addFrameOutput(list, '@list', util.clone(o));\n                  }\n                }\n\n                continue;\n              }\n\n              if (graphTypes.isSubjectReference(o)) {\n                // recurse into subject reference\n                api.frame(state, [o['@id']], _subframe2, output, prop);\n              } else if (_valueMatch(_subframe2[0], o)) {\n                // include other values, if they match\n                _addFrameOutput(output, prop, util.clone(o));\n              }\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        } // handle defaults\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = Object.keys(frame).sort()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _prop = _step3.value;\n\n          // skip keywords\n          if (isKeyword(_prop)) {\n            continue;\n          } // if omit default is off, then include default values for properties\n          // that appear in the next frame but are not in the matching subject\n\n\n          var next = frame[_prop][0] || {};\n\n          var omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n\n          if (!omitDefaultOn && !(_prop in output)) {\n            var preserve = '@null';\n\n            if ('@default' in next) {\n              preserve = util.clone(next['@default']);\n            }\n\n            if (!types.isArray(preserve)) {\n              preserve = [preserve];\n            }\n\n            output[_prop] = [{\n              '@preserve': preserve\n            }];\n          }\n        } // if embed reverse values by finding nodes having this subject as a value\n        // of the associated property\n\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if ('@reverse' in frame) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = Object.keys(frame['@reverse']).sort()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var reverseProp = _step4.value;\n            var _subframe = frame['@reverse'][reverseProp];\n\n            for (var _i = 0, _Object$keys = Object.keys(state.subjects); _i < _Object$keys.length; _i++) {\n              var _subject = _Object$keys[_i];\n              var nodeValues = util.getValues(state.subjects[_subject], reverseProp);\n\n              if (nodeValues.some(function (v) {\n                return v['@id'] === id;\n              })) {\n                // node has property referencing this subject, recurse\n                output['@reverse'] = output['@reverse'] || {};\n                util.addValue(output['@reverse'], reverseProp, [], {\n                  propertyIsArray: true\n                });\n                api.frame(state, [_subject], _subframe, output['@reverse'][reverseProp], property);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      } // add output to parent\n\n\n      _addFrameOutput(parent, property, output); // pop matching subject from circular ref-checking stack\n\n\n      state.subjectStack.pop();\n    };\n\n    for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\n\n\nfunction _createImplicitFrame(flags) {\n  var frame = {};\n\n  for (var key in flags) {\n    if (flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n\n  return [frame];\n}\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\n\n\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for (var i = subjectStack.length - 1; i >= 0; --i) {\n    var subject = subjectStack[i];\n\n    if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\n\n\nfunction _getFrameFlag(frame, options, name) {\n  var flag = '@' + name;\n  var rval = flag in frame ? frame[flag][0] : options[name];\n\n  if (name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if (rval === true) {\n      rval = '@last';\n    } else if (rval === false) {\n      rval = '@never';\n    } else if (rval !== '@always' && rval !== '@never' && rval !== '@link') {\n      rval = '@last';\n    }\n  }\n\n  return rval;\n}\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\n\n\nfunction _validateFrame(frame) {\n  if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {\n      frame: frame\n    });\n  }\n}\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\n\n\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  var rval = {};\n  var _iteratorNormalCompletion7 = true;\n  var _didIteratorError7 = false;\n  var _iteratorError7 = undefined;\n\n  try {\n    for (var _iterator7 = subjects[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n      var id = _step7.value;\n      var subject = state.graphMap[state.graph][id];\n\n      if (_filterSubject(state, subject, frame, flags)) {\n        rval[id] = subject;\n      }\n    }\n  } catch (err) {\n    _didIteratorError7 = true;\n    _iteratorError7 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n        _iterator7.return();\n      }\n    } finally {\n      if (_didIteratorError7) {\n        throw _iteratorError7;\n      }\n    }\n  }\n\n  return rval;\n}\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\n\n\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  var wildcard = true;\n  var matchesSome = false;\n\n  var _loop2 = function _loop2(key) {\n    var matchThis = false;\n    var nodeValues = util.getValues(subject, key);\n    var isEmpty = util.getValues(frame, key).length === 0;\n\n    if (isKeyword(key)) {\n      // skip non-@id and non-@type\n      if (key !== '@id' && key !== '@type') {\n        return \"continue\";\n      }\n\n      wildcard = false; // check @id for a specific @id value\n\n      if (key === '@id') {\n        // if @id is not a wildcard and is not empty, then match or not on\n        // specific value\n        if (frame['@id'].length >= 0 && !types.isEmptyObject(frame['@id'][0])) {\n          return {\n            v: frame['@id'].includes(nodeValues[0])\n          };\n        }\n\n        matchThis = true;\n        return \"continue\";\n      } // check @type (object value means 'any' type, fall through to ducktyping)\n\n\n      if ('@type' in frame) {\n        if (isEmpty) {\n          if (nodeValues.length > 0) {\n            // don't match on no @type\n            return {\n              v: false\n            };\n          }\n\n          matchThis = true;\n        } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) {\n          // match on wildcard @type\n          matchThis = nodeValues.length > 0;\n        } else {\n          // match on a specific @type\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            var _loop3 = function _loop3() {\n              var type = _step8.value;\n\n              if (nodeValues.some(function (tt) {\n                return tt === type;\n              })) {\n                return {\n                  v: {\n                    v: true\n                  }\n                };\n              }\n            };\n\n            for (var _iterator8 = frame['@type'][Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _ret3 = _loop3();\n\n              if (typeof _ret3 === \"object\") return _ret3.v;\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n\n          return {\n            v: false\n          };\n        }\n      }\n    } // Forc a copy of this frame entry so it can be manipulated\n\n\n    var thisFrame = util.getValues(frame, key)[0];\n    var hasDefault = false;\n\n    if (thisFrame) {\n      _validateFrame([thisFrame]);\n\n      hasDefault = '@default' in thisFrame;\n    } // no longer a wildcard pattern if frame has any non-keyword properties\n\n\n    wildcard = false; // skip, but allow match if node has no value for property, and frame has a\n    // default value\n\n    if (nodeValues.length === 0 && hasDefault) {\n      return \"continue\";\n    } // if frame value is empty, don't match if subject has any value\n\n\n    if (nodeValues.length > 0 && isEmpty) {\n      return {\n        v: false\n      };\n    }\n\n    if (thisFrame === undefined) {\n      // node does not match if values is not empty and the value of property\n      // in frame is match none.\n      if (nodeValues.length > 0) {\n        return {\n          v: false\n        };\n      }\n\n      matchThis = true;\n    } else if (types.isObject(thisFrame)) {\n      // node matches if values is not empty and the value of property in frame\n      // is wildcard\n      matchThis = nodeValues.length > 0;\n    } else {\n      if (graphTypes.isValue(thisFrame)) {\n        // match on any matching value\n        matchThis = nodeValues.some(function (nv) {\n          return _valueMatch(thisFrame, nv);\n        });\n      } else if (graphTypes.isSubject(thisFrame) || graphTypes.isSubjectReference(thisFrame)) {\n        matchThis = nodeValues.some(function (nv) {\n          return _nodeMatch(state, thisFrame, nv, flags);\n        });\n      } else if (graphTypes.isList(thisFrame)) {\n        var listValue = thisFrame['@list'][0];\n\n        if (graphTypes.isList(nodeValues[0])) {\n          var nodeListValues = nodeValues[0]['@list'];\n\n          if (graphTypes.isValue(listValue)) {\n            // match on any matching value\n            matchThis = nodeListValues.some(function (lv) {\n              return _valueMatch(listValue, lv);\n            });\n          } else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) {\n            matchThis = nodeListValues.some(function (lv) {\n              return _nodeMatch(state, listValue, lv, flags);\n            });\n          }\n        } else {\n          // value must be a list to match\n          matchThis = false;\n        }\n      }\n    } // all non-defaulted values must match if requireAll is set\n\n\n    if (!matchThis && flags.requireAll) {\n      return {\n        v: false\n      };\n    }\n\n    matchesSome = matchesSome || matchThis;\n  };\n\n  for (var key in frame) {\n    var _ret2 = _loop2(key);\n\n    switch (_ret2) {\n      case \"continue\":\n        continue;\n\n      default:\n        if (typeof _ret2 === \"object\") return _ret2.v;\n    }\n  } // return true if wildcard or subject matches some properties\n\n\n  return wildcard || matchesSome;\n}\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\n\n\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  var embeds = state.uniqueEmbeds[state.graph];\n  var embed = embeds[id];\n  var parent = embed.parent;\n  var property = embed.property; // create reference to replace embed\n\n  var subject = {\n    '@id': id\n  }; // remove existing embed\n\n  if (types.isArray(parent)) {\n    // replace subject with reference\n    for (var i = 0; i < parent.length; ++i) {\n      if (util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    var useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n    util.addValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n  } // recursively remove dependent dangling embeds\n\n\n  var removeDependents = function removeDependents(id) {\n    // get embed keys as a separate array to enable deleting keys in map\n    var ids = Object.keys(embeds);\n\n    for (var _i2 = 0, _ids = ids; _i2 < _ids.length; _i2++) {\n      var next = _ids[_i2];\n\n      if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n\n  removeDependents(id);\n}\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\n\n\nfunction _addFrameOutput(parent, property, output) {\n  if (types.isObject(parent)) {\n    util.addValue(parent, property, output, {\n      propertyIsArray: true\n    });\n  } else {\n    parent.push(output);\n  }\n}\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\n\n\nfunction _nodeMatch(state, pattern, value, flags) {\n  if (!('@id' in value)) {\n    return false;\n  }\n\n  var nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\n\n\nfunction _valueMatch(pattern, value) {\n  var v1 = value['@value'];\n  var t1 = value['@type'];\n  var l1 = value['@language'];\n  var v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [pattern['@value']] : [];\n  var t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [pattern['@type']] : [];\n  var l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [pattern['@language']] : [];\n\n  if (v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n\n  if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n\n  if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n\n  if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}