{"ast":null,"code":"/**\n * Local dependencies\n */\nvar SupportedAlgorithms = require('./SupportedAlgorithms');\n/**\n * Register Supported Algorithms\n */\n\n\nvar supportedAlgorithms = new SupportedAlgorithms();\n/**\n * encrypt\n */\n\nsupportedAlgorithms.define('RSA-OAEP', 'encrypt', '../algorithms/RSA-OAEP');\nsupportedAlgorithms.define('AES-CTR', 'encrypt', '../algorithms/AES-CTR');\nsupportedAlgorithms.define('AES-CBC', 'encrypt', '../algorithms/AES-CBC');\nsupportedAlgorithms.define('AES-GCM', 'encrypt', '../algorithms/AES-GCM'); //supportedAlgorithms.define('AES-CFB', 'encrypt', )\n\n/**\n * decrypt\n */\n\nsupportedAlgorithms.define('RSA-OAEP', 'decrypt', '../algorithms/RSA-OAEP');\nsupportedAlgorithms.define('AES-CTR', 'decrypt', '../algorithms/AES-CTR');\nsupportedAlgorithms.define('AES-CBC', 'decrypt', '../algorithms/AES-CBC');\nsupportedAlgorithms.define('AES-GCM', 'decrypt', '../algorithms/AES-GCM'); //supportedAlgorithms.define('AES-CFB', 'decrypt', )\n\n/**\n * sign\n */\n\nsupportedAlgorithms.define('RSASSA-PKCS1-v1_5', 'sign', '../algorithms/RSASSA-PKCS1-v1_5');\nsupportedAlgorithms.define('RSA-PSS', 'sign', '../algorithms/RSA-PSS');\nsupportedAlgorithms.define('ECDSA', 'sign', '../algorithms/ECDSA');\nsupportedAlgorithms.define('EDDSA', 'sign', '../algorithms/EDDSA'); //supportedAlgorithms.define('AES-CMAC', 'sign', )\n\nsupportedAlgorithms.define('HMAC', 'sign', '../algorithms/HMAC');\n/**\n * verify\n */\n\nsupportedAlgorithms.define('RSASSA-PKCS1-v1_5', 'verify', '../algorithms/RSASSA-PKCS1-v1_5');\nsupportedAlgorithms.define('RSA-PSS', 'verify', '../algorithms/RSA-PSS');\nsupportedAlgorithms.define('ECDSA', 'verify', '../algorithms/ECDSA');\nsupportedAlgorithms.define('EDDSA', 'verify', '../algorithms/EDDSA'); //supportedAlgorithms.define('AES-CMAC', 'verify', )\n\nsupportedAlgorithms.define('HMAC', 'verify', '../algorithms/HMAC');\n/**\n * digest\n */\n\nsupportedAlgorithms.define('SHA-1', 'digest', '../algorithms/SHA');\nsupportedAlgorithms.define('SHA-256', 'digest', '../algorithms/SHA');\nsupportedAlgorithms.define('SHA-384', 'digest', '../algorithms/SHA');\nsupportedAlgorithms.define('SHA-512', 'digest', '../algorithms/SHA');\n/**\n * deriveKey\n */\n//supportedAlgorithms.define('ECDH', 'deriveKey', )\n//supportedAlgorithms.define('DH', 'deriveKey', )\n//supportedAlgorithms.define('CONCAT', 'deriveKey', )\n//supportedAlgorithms.define('HKDF-CTR', 'deriveKey', )\n//supportedAlgorithms.define('PBKDF2', 'deriveKey', )\n\n/**\n * deriveBits\n */\n//supportedAlgorithms.define('ECDH', 'deriveBits', )\n//supportedAlgorithms.define('DH', 'deriveBits', )\n//supportedAlgorithms.define('CONCAT', 'deriveBits', )\n//supportedAlgorithms.define('HKDF-CTR', 'deriveBits', )\n//supportedAlgorithms.define('PBKDF2', 'deriveBits', )\n\n/**\n * generateKey\n */\n\nsupportedAlgorithms.define('RSASSA-PKCS1-v1_5', 'generateKey', '../algorithms/RSASSA-PKCS1-v1_5');\nsupportedAlgorithms.define('RSA-PSS', 'generateKey', '../algorithms/RSA-PSS');\nsupportedAlgorithms.define('RSA-OAEP', 'generateKey', '../algorithms/RSA-OAEP');\nsupportedAlgorithms.define('ECDSA', 'generateKey', '../algorithms/ECDSA');\nsupportedAlgorithms.define('EDDSA', 'generateKey', '../algorithms/EDDSA'); //supportedAlgorithms.define('ECDH', 'generateKey', )\n\nsupportedAlgorithms.define('AES-CTR', 'generateKey', '../algorithms/AES-CTR');\nsupportedAlgorithms.define('AES-CBC', 'generateKey', '../algorithms/AES-CBC'); //supportedAlgorithms.define('AES-CMAC', 'generateKey', )\n\nsupportedAlgorithms.define('AES-GCM', 'generateKey', '../algorithms/AES-GCM'); //supportedAlgorithms.define('AES-CFB', 'generateKey', )\n\nsupportedAlgorithms.define('AES-KW', 'generateKey', '../algorithms/AES-KW');\nsupportedAlgorithms.define('HMAC', 'generateKey', '../algorithms/HMAC'); //supportedAlgorithms.define('DH', 'generateKey', )\n//supportedAlgorithms.define('PBKDF2', 'generateKey', )\n\n/**\n * importKey\n */\n\nsupportedAlgorithms.define('RSASSA-PKCS1-v1_5', 'importKey', '../algorithms/RSASSA-PKCS1-v1_5');\nsupportedAlgorithms.define('RSA-PSS', 'importKey', '../algorithms/RSA-PSS');\nsupportedAlgorithms.define('RSA-OAEP', 'importKey', '../algorithms/RSA-OAEP');\nsupportedAlgorithms.define('ECDSA', 'importKey', '../algorithms/ECDSA');\nsupportedAlgorithms.define('EDDSA', 'importKey', '../algorithms/EDDSA'); //supportedAlgorithms.define('ECDH', 'importKey', )\n\nsupportedAlgorithms.define('AES-CTR', 'importKey', '../algorithms/AES-CTR');\nsupportedAlgorithms.define('AES-CBC', 'importKey', '../algorithms/AES-CBC'); //supportedAlgorithms.define('AES-CMAC', 'importKey', )\n\nsupportedAlgorithms.define('AES-GCM', 'importKey', '../algorithms/AES-GCM'); //supportedAlgorithms.define('AES-CFB', 'importKey', )\n\nsupportedAlgorithms.define('AES-KW', 'importKey', '../algorithms/AES-KW');\nsupportedAlgorithms.define('HMAC', 'importKey', '../algorithms/HMAC'); //supportedAlgorithms.define('DH', 'importKey', )\n//supportedAlgorithms.define('CONCAT', 'importKey', )\n//supportedAlgorithms.define('HKDF-CTR', 'importKey', )\n//supportedAlgorithms.define('PBKDF2', 'importey', )\n\n/**\n * exportKey\n */\n\nsupportedAlgorithms.define('RSASSA-PKCS1-v1_5', 'exportKey', '../algorithms/RSASSA-PKCS1-v1_5');\nsupportedAlgorithms.define('RSA-PSS', 'exportKey', '../algorithms/RSA-PSS');\nsupportedAlgorithms.define('RSA-OAEP', 'exportKey', '../algorithms/RSA-OAEP');\nsupportedAlgorithms.define('EDDSA', 'exportKey', '../algorithms/EDDSA');\nsupportedAlgorithms.define('ECDSA', 'exportKey', '../algorithms/ECDSA'); //supportedAlgorithms.define('ECDH', 'exportKey', )\n\nsupportedAlgorithms.define('AES-CTR', 'exportKey', '../algorithms/AES-CTR');\nsupportedAlgorithms.define('AES-CBC', 'exportKey', '../algorithms/AES-CBC'); //supportedAlgorithms.define('AES-CMAC', 'exportKey', )\n\nsupportedAlgorithms.define('AES-GCM', 'exportKey', '../algorithms/AES-GCM'); //supportedAlgorithms.define('AES-CFB', 'exportKey', )\n\nsupportedAlgorithms.define('AES-KW', 'exportKey', '../algorithms/AES-KW');\nsupportedAlgorithms.define('HMAC', 'exportKey', '../algorithms/HMAC'); //supportedAlgorithms.define('DH', 'exportKey', )\n\n/**\n * wrapKey\n */\n\nsupportedAlgorithms.define('RSA-OAEP', 'wrapKey', '../algorithms/RSA-OAEP');\nsupportedAlgorithms.define('AES-CTR', 'wrapKey', '../algorithms/AES-CTR');\nsupportedAlgorithms.define('AES-CBC', 'wrapKey', '../algorithms/AES-CBC');\nsupportedAlgorithms.define('AES-GCM', 'wrapKey', '../algorithms/AES-GCM'); //supportedAlgorithms.define('AES-CFB', 'wrapKey', )\n\nsupportedAlgorithms.define('AES-KW', 'wrapKey', '../algorithms/AES-KW');\n/**\n * unwrapKey\n */\n\nsupportedAlgorithms.define('RSA-OAEP', 'unwrapKey', '../algorithms/RSA-OAEP');\nsupportedAlgorithms.define('AES-CTR', 'unwrapKey', '../algorithms/AES-CTR');\nsupportedAlgorithms.define('AES-CBC', 'unwrapKey', '../algorithms/AES-CBC');\nsupportedAlgorithms.define('AES-GCM', 'unwrapKey', '../algorithms/AES-GCM'); //supportedAlgorithms.define('AES-CFB', 'unwrapKey', )\n\nsupportedAlgorithms.define('AES-KW', 'unwrapKey', '../algorithms/AES-KW');\n/**\n * Export\n */\n\nmodule.exports = supportedAlgorithms;","map":null,"metadata":{},"sourceType":"script"}