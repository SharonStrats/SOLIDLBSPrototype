{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _require = require(\"./infra\"),\n    isASCIIHex = _require.isASCIIHex;\n\nfunction strictlySplitByteSequence(buf, cp) {\n  var list = [];\n  var last = 0;\n  var i = buf.indexOf(cp);\n\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  var i = buf.indexOf(from);\n\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n\n  return buf;\n}\n\nfunction percentEncode(c) {\n  var hex = c.toString(16).toUpperCase();\n\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n\n  return \"%\" + hex;\n}\n\nfunction percentDecode(input) {\n  var output = Buffer.alloc(input.byteLength);\n  var ptr = 0;\n\n  for (var i = 0; i < input.length; ++i) {\n    if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {\n      output[ptr++] = input[i];\n    } else {\n      output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);\n      i += 2;\n    }\n  }\n\n  return output.slice(0, ptr);\n}\n\nfunction _parseUrlencoded(input) {\n  var sequences = strictlySplitByteSequence(input, 38);\n  var output = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = sequences[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var bytes = _step.value;\n\n      if (bytes.length === 0) {\n        continue;\n      }\n\n      var name = void 0;\n      var value = void 0;\n      var indexOfEqual = bytes.indexOf(61);\n\n      if (indexOfEqual >= 0) {\n        name = bytes.slice(0, indexOfEqual);\n        value = bytes.slice(indexOfEqual + 1);\n      } else {\n        name = bytes;\n        value = Buffer.alloc(0);\n      }\n\n      name = replaceByteInByteSequence(Buffer.from(name), 43, 32);\n      value = replaceByteInByteSequence(Buffer.from(value), 43, 32);\n      output.push([percentDecode(name).toString(), percentDecode(value).toString()]);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return output;\n}\n\nfunction serializeUrlencodedByte(input) {\n  var output = \"\";\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var byte = _step2.value;\n\n      if (byte === 32) {\n        output += \"+\";\n      } else if (byte === 42 || byte === 45 || byte === 46 || byte >= 48 && byte <= 57 || byte >= 65 && byte <= 90 || byte === 95 || byte >= 97 && byte <= 122) {\n        output += String.fromCodePoint(byte);\n      } else {\n        output += percentEncode(byte);\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return output;\n}\n\nfunction serializeUrlencoded(tuples) {\n  var encodingOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var encoding = \"utf-8\";\n\n  if (encodingOverride !== undefined) {\n    encoding = encodingOverride;\n  }\n\n  var output = \"\";\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = tuples.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          i = _step3$value[0],\n          tuple = _step3$value[1];\n\n      // TODO: handle encoding override\n      var name = serializeUrlencodedByte(Buffer.from(tuple[0]));\n      var value = tuple[1];\n\n      if (tuple.length > 2 && tuple[2] !== undefined) {\n        if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n          value = encoding;\n        } else if (tuple[2] === \"file\") {\n          // value is a File object\n          value = value.name;\n        }\n      }\n\n      value = serializeUrlencodedByte(Buffer.from(value));\n\n      if (i !== 0) {\n        output += \"&\";\n      }\n\n      output += \"\".concat(name, \"=\").concat(value);\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  percentEncode: percentEncode,\n  percentDecode: percentDecode,\n  // application/x-www-form-urlencoded string parser\n  parseUrlencoded: function parseUrlencoded(input) {\n    return _parseUrlencoded(Buffer.from(input));\n  },\n  // application/x-www-form-urlencoded serializer\n  serializeUrlencoded: serializeUrlencoded\n};","map":null,"metadata":{},"sourceType":"script"}