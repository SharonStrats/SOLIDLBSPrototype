{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\src\\\\containers\\\\Welcome\\\\welcome.container.js\";\nimport React, { Component } from 'react';\nimport WelcomePageContent from \"./welcome.component\";\nimport { withWebId } from '@inrupt/solid-react-components';\nimport data from '@solid/query-ldflex';\nimport { withToastManager } from 'react-toast-notifications';\nimport { namedNode } from '@rdfjs/data-model';\nvar defaultProfilePhoto = '/img/icon/empty-profile.svg';\n/**\n * Container component for the Welcome Page, containing example of how to fetch data from a POD\n */\n\nvar WelcomeComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WelcomeComponent, _Component);\n\n  function WelcomeComponent(props) {\n    var _this;\n\n    _classCallCheck(this, WelcomeComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WelcomeComponent).call(this, props));\n    _this.getProfileData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var hasImage, user, nameLd, name, imageLd, image;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                isLoading: true\n              });\n\n              /*\n               * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\n               * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\n               * from the returned user object.\n               */\n              user = data[_this.props.webId];\n              _context.next = 4;\n              return user.name;\n\n            case 4:\n              nameLd = _context.sent;\n              name = nameLd ? nameLd.value : '';\n              _context.next = 8;\n              return user.vcard_hasPhoto;\n\n            case 8:\n              imageLd = _context.sent;\n\n              if (imageLd && imageLd.value) {\n                image = imageLd.value;\n                hasImage = true;\n              } else {\n                hasImage = false;\n                image = defaultProfilePhoto;\n              }\n              /**\n               * This is where we set the state with the name and image values. The user[hasPhotoContext] line of code is an example of\n               * what to do when LDFlex doesn't have the full context. LDFlex has many data contexts already in place, but in case\n               * it's missing, you can manually add it like we're doing here.\n               *\n               * The hasPhotoContext variable stores a link to the definition of the vcard ontology and, specifically, the #hasPhoto\n               * property that we're using to store and link the profile image.\n               *\n               * For more information please go to: https://github.com/solid/query-ldflex\n               */\n\n\n              _this.setState({\n                name: name,\n                image: image,\n                isLoading: false,\n                hasImage: hasImage\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.updatePhoto =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(uri, message) {\n        var user;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                user = data.user;\n\n                if (!_this.state.hasImage) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 5;\n                return user.vcard_hasPhoto.set(namedNode(uri));\n\n              case 5:\n                _context2.next = 9;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return user.vcard_hasPhoto.add(namedNode(uri));\n\n              case 9:\n                _this.props.toastManager.add(['', message], {\n                  appearance: 'success'\n                });\n\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                _this.props.toastManager.add(['Error', _context2.t0.message], {\n                  appearance: 'error',\n                  autoDismiss: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 12]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      name: '',\n      image: defaultProfilePhoto,\n      isLoading: false,\n      hasImage: false\n    };\n    return _this;\n  }\n\n  _createClass(WelcomeComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.webId) {\n        this.getProfileData();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.webId && this.props.webId !== prevProps.webId) {\n        this.getProfileData();\n      }\n    }\n    /**\n     * This function retrieves a user's card data and tries to grab both the user's name and profile photo if they exist.\n     *\n     * This is an example of how to use the LDFlex library to fetch different linked data fields.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          name = _this$state.name,\n          image = _this$state.image,\n          isLoading = _this$state.isLoading;\n      return React.createElement(WelcomePageContent, {\n        name: name,\n        image: image,\n        isLoading: isLoading,\n        webId: this.props.webId,\n        updatePhoto: this.updatePhoto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return WelcomeComponent;\n}(Component);\n\nexport default withWebId(withToastManager(WelcomeComponent));","map":{"version":3,"sources":["C:\\Users\\SoDiAl\\Documents\\WebDev2019\\SolidReactTest\\src\\containers\\Welcome\\welcome.container.js"],"names":["React","Component","WelcomePageContent","withWebId","data","withToastManager","namedNode","defaultProfilePhoto","WelcomeComponent","props","getProfileData","setState","isLoading","user","webId","name","nameLd","value","vcard_hasPhoto","imageLd","image","hasImage","updatePhoto","uri","message","state","set","add","toastManager","appearance","autoDismiss","prevProps","prevState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport WelcomePageContent from './welcome.component';\nimport { withWebId } from '@inrupt/solid-react-components';\nimport data from '@solid/query-ldflex';\nimport { withToastManager } from 'react-toast-notifications';\nimport { namedNode } from '@rdfjs/data-model';\nconst defaultProfilePhoto = '/img/icon/empty-profile.svg';\n\n/**\n * Container component for the Welcome Page, containing example of how to fetch data from a POD\n */\nclass WelcomeComponent extends Component<Props> {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: '',\n            image: defaultProfilePhoto,\n            isLoading: false,\n            hasImage: false,\n        };\n    }\n    componentDidMount() {\n        if (this.props.webId) {\n            this.getProfileData();\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.webId && this.props.webId !== prevProps.webId) {\n            this.getProfileData();\n        }\n    }\n\n    /**\n     * This function retrieves a user's card data and tries to grab both the user's name and profile photo if they exist.\n     *\n     * This is an example of how to use the LDFlex library to fetch different linked data fields.\n     */\n    getProfileData = async () => {\n        this.setState({ isLoading: true });\n        let hasImage;\n\n        /*\n         * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\n         * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\n         * from the returned user object.\n         */\n        const user = data[this.props.webId];\n        const nameLd = await user.name;\n\n        const name = nameLd ? nameLd.value : '';\n\n        let imageLd = await user.vcard_hasPhoto;\n\n        let image;\n        if (imageLd && imageLd.value) {\n            image = imageLd.value;\n            hasImage = true;\n        } else {\n            hasImage = false;\n            image = defaultProfilePhoto;\n        }\n        /**\n         * This is where we set the state with the name and image values. The user[hasPhotoContext] line of code is an example of\n         * what to do when LDFlex doesn't have the full context. LDFlex has many data contexts already in place, but in case\n         * it's missing, you can manually add it like we're doing here.\n         *\n         * The hasPhotoContext variable stores a link to the definition of the vcard ontology and, specifically, the #hasPhoto\n         * property that we're using to store and link the profile image.\n         *\n         * For more information please go to: https://github.com/solid/query-ldflex\n         */\n        this.setState({ name, image, isLoading: false, hasImage });\n    };\n\n    /**\n     * updatedPhoto will update the photo url on vcard file\n     * this function will check if user has image or hasPhoto node if not\n     * will just update it, the idea is use image instead of hasPhoto\n     * @params{String} uri photo url\n     */\n    updatePhoto = async (uri: String, message) => {\n        try {\n            const { user } = data;\n            this.state.hasImage\n                ? await user.vcard_hasPhoto.set(namedNode(uri))\n                : await user.vcard_hasPhoto.add(namedNode(uri));\n\n            this.props.toastManager.add(['', message], {\n                appearance: 'success',\n            });\n        } catch (error) {\n            this.props.toastManager.add(['Error', error.message], {\n                appearance: 'error',\n                autoDismiss: false,\n            });\n        }\n    };\n\n    render() {\n        const { name, image, isLoading } = this.state;\n        return (\n            <WelcomePageContent\n                name={name}\n                image={image}\n                isLoading={isLoading}\n                webId={this.props.webId}\n                updatePhoto={this.updatePhoto}\n            />\n        );\n    }\n}\n\nexport default withWebId(withToastManager(WelcomeComponent));\n"]},"metadata":{},"sourceType":"module"}