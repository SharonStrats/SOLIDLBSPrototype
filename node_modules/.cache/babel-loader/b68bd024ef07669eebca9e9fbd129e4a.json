{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\SoDiAl\\\\Documents\\\\WebDev2019\\\\SolidReactTest\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar util = require('./util');\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   */\n  function IdentifierIssuer(prefix) {\n    _classCallCheck(this, IdentifierIssuer);\n\n    this.prefix = prefix;\n    this.counter = 0;\n    this.existing = {};\n  }\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n\n\n  _createClass(IdentifierIssuer, [{\n    key: \"clone\",\n    value: function clone() {\n      var copy = new IdentifierIssuer(this.prefix);\n      copy.counter = this.counter;\n      copy.existing = util.clone(this.existing);\n      return copy;\n    }\n    /**\n     * Gets the new identifier for the given old identifier, where if no old\n     * identifier is given a new identifier will be generated.\n     *\n     * @param [old] the old identifier to get the new identifier for.\n     *\n     * @return the new identifier.\n     */\n\n  }, {\n    key: \"getId\",\n    value: function getId(old) {\n      // return existing old identifier\n      if (old && old in this.existing) {\n        return this.existing[old];\n      } // get next identifier\n\n\n      var identifier = this.prefix + this.counter;\n      this.counter += 1; // save mapping\n\n      if (old) {\n        this.existing[old] = identifier;\n      }\n\n      return identifier;\n    }\n    /**\n     * Returns true if the given old identifer has already been assigned a new\n     * identifier.\n     *\n     * @param old the old identifier to check.\n     *\n     * @return true if the old identifier has been assigned a new identifier,\n     *   false if not.\n     */\n\n  }, {\n    key: \"hasId\",\n    value: function hasId(old) {\n      return old in this.existing;\n    }\n  }]);\n\n  return IdentifierIssuer;\n}();","map":null,"metadata":{},"sourceType":"script"}