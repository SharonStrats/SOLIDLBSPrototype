'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _classOrder = _interopRequireDefault(require("./class-order"));

var _nodeInternal = _interopRequireDefault(require("./node-internal"));

var BlankNode =
/*#__PURE__*/
function (_Node) {
  (0, _inherits2.default)(BlankNode, _Node);

  function BlankNode(id) {
    var _this;

    (0, _classCallCheck2.default)(this, BlankNode);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BlankNode).call(this));
    _this.termType = BlankNode.termType;

    if (id) {
      if (typeof id !== 'string') {
        console.log('Bad blank id:', id);
        throw new Error('Bad id argument to new blank node: ' + id);
      }

      if (id.includes('#')) {
        // Is a URI with hash fragment
        var fragments = id.split('#');
        id = fragments[fragments.length - 1];
      }

      _this.id = id; // this.id = '' + BlankNode.nextId++
    } else {
      _this.id = 'n' + BlankNode.nextId++;
    }

    _this.value = _this.id;
    return _this;
  }

  (0, _createClass2.default)(BlankNode, [{
    key: "compareTerm",
    value: function compareTerm(other) {
      if (this.classOrder < other.classOrder) {
        return -1;
      }

      if (this.classOrder > other.classOrder) {
        return +1;
      }

      if (this.id < other.id) {
        return -1;
      }

      if (this.id > other.id) {
        return +1;
      }

      return 0;
    }
  }, {
    key: "copy",
    value: function copy(formula) {
      // depends on the formula
      var bnodeNew = new BlankNode();
      formula.copyTo(this, bnodeNew);
      return bnodeNew;
    }
  }, {
    key: "toCanonical",
    value: function toCanonical() {
      return '_:' + this.value;
    }
  }, {
    key: "toString",
    value: function toString() {
      return BlankNode.NTAnonymousNodePrefix + this.id;
    }
  }]);
  return BlankNode;
}(_nodeInternal.default);

exports.default = BlankNode;
BlankNode.nextId = 0;
BlankNode.termType = 'BlankNode';
BlankNode.NTAnonymousNodePrefix = '_:';
BlankNode.prototype.classOrder = _classOrder.default['BlankNode'];
BlankNode.prototype.isBlank = 1;
BlankNode.prototype.isVar = 1;