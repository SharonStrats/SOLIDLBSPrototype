'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _blankNode = _interopRequireDefault(require("./blank-node"));

var _collection = _interopRequireDefault(require("./collection"));

var _defaultGraph = _interopRequireDefault(require("./default-graph"));

var _fetcher = _interopRequireDefault(require("./fetcher"));

var _store = _interopRequireDefault(require("./store"));

var _literal = _interopRequireDefault(require("./literal"));

var _namedNode = _interopRequireDefault(require("./named-node"));

var _statement = _interopRequireDefault(require("./statement"));

var _variable = _interopRequireDefault(require("./variable"));

var DataFactory = {
  blankNode: blankNode,
  defaultGraph: defaultGraph,
  fetcher: fetcher,
  graph: graph,
  lit: lit,
  literal: literal,
  namedNode: namedNode,
  quad: quad,
  st: st,
  triple: triple,
  variable: variable
};
var _default = DataFactory;
exports.default = _default;

function blankNode(value) {
  return new _blankNode.default(value);
}

function collection(elements) {
  return new _collection.default(elements);
}

function defaultGraph() {
  return new _defaultGraph.default();
}

function fetcher(store, options) {
  return new _fetcher.default(store, options);
}

function graph() {
  return new _store.default();
}

function lit(val, lang, dt) {
  return new _literal.default('' + val, lang, dt);
}

function literal(value, languageOrDatatype) {
  if (typeof languageOrDatatype === 'string') {
    if (languageOrDatatype.indexOf(':') === -1) {
      return new _literal.default(value, languageOrDatatype);
    } else {
      return new _literal.default(value, null, namedNode(languageOrDatatype));
    }
  } else {
    return new _literal.default(value, null, languageOrDatatype);
  }
}

function namedNode(value) {
  return new _namedNode.default(value);
}

function quad(subject, predicate, object, graph) {
  graph = graph || new _defaultGraph.default();
  return new _statement.default(subject, predicate, object, graph);
}

function st(subject, predicate, object, graph) {
  return new _statement.default(subject, predicate, object, graph);
}

function triple(subject, predicate, object) {
  return quad(subject, predicate, object);
}

function variable(name) {
  return new _variable.default(name);
}