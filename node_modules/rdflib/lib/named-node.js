'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _classOrder = _interopRequireDefault(require("./class-order"));

var _nodeInternal = _interopRequireDefault(require("./node-internal"));

/**
 * @class NamedNode
 * @extends Node
 */
var NamedNode =
/*#__PURE__*/
function (_Node) {
  (0, _inherits2.default)(NamedNode, _Node);

  /**
   * @constructor
   * @param iri {String}
   */
  function NamedNode(iri) {
    var _this;

    (0, _classCallCheck2.default)(this, NamedNode);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NamedNode).call(this));
    _this.termType = NamedNode.termType;

    if (iri && iri.termType === NamedNode.termType) {
      // param is a named node
      iri = iri.value;
    }

    if (!iri) {
      throw new Error('Missing IRI for NamedNode');
    }

    if (!iri.includes(':')) {
      throw new Error('NamedNode IRI "' + iri + '" must be absolute.');
    }

    if (iri.includes(' ')) {
      var message = 'Error: NamedNode IRI "' + iri + '" must not contain unencoded spaces.';
      throw new Error(message);
    }

    _this.value = iri;
    return _this;
  }
  /**
   * Returns an $rdf node for the containing directory, ending in slash.
   */


  (0, _createClass2.default)(NamedNode, [{
    key: "dir",
    value: function dir() {
      var str = this.uri.split('#')[0];
      var p = str.slice(0, -1).lastIndexOf('/');
      var q = str.indexOf('//');
      if (q >= 0 && p < q + 2 || p < 0) return null;
      return new NamedNode(str.slice(0, p + 1));
    }
    /**
     * Returns an NN for the whole web site, ending in slash.
     * Contrast with the "origin" which does NOT have a trailing slash
     */

  }, {
    key: "site",
    value: function site() {
      var str = this.uri.split('#')[0];
      var p = str.indexOf('//');
      if (p < 0) throw new Error('This URI does not have a web site part (origin)');
      var q = str.indexOf('/', p + 2);

      if (q < 0) {
        return new NamedNode(str.slice(0) + '/'); // Add slash to a bare origin
      } else {
        return new NamedNode(str.slice(0, q + 1));
      }
    }
  }, {
    key: "doc",
    value: function doc() {
      if (this.uri.indexOf('#') < 0) {
        return this;
      } else {
        return new NamedNode(this.uri.split('#')[0]);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return '<' + this.uri + '>';
    }
    /* The local identifier with the document
    */

  }, {
    key: "id",
    value: function id() {
      return this.uri.split('#')[1];
    }
    /**
     * Legacy getter and setter alias, node.uri
     */

  }, {
    key: "uri",
    get: function get() {
      return this.value;
    },
    set: function set(uri) {
      this.value = uri;
    }
  }], [{
    key: "fromValue",
    value: function fromValue(value) {
      if (typeof value === 'undefined' || value === null) {
        return value;
      }

      var isNode = value && value.termType;

      if (isNode) {
        return value;
      }

      return new NamedNode(value);
    }
  }]);
  return NamedNode;
}(_nodeInternal.default);

exports.default = NamedNode;
NamedNode.termType = 'NamedNode';
NamedNode.prototype.classOrder = _classOrder.default['NamedNode'];
NamedNode.prototype.isVar = 0;