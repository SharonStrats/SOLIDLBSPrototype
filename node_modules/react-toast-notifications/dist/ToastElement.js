'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultToast = exports.shrink = exports.toastWidth = exports.gutter = exports.borderRadius = undefined;

var _emotion = require('emotion');

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactEmotion = require('react-emotion');

var _reactEmotion2 = _interopRequireDefault(_reactEmotion);

var _icons = require('./icons');

var _colors = require('./colors');

var colors = _interopRequireWildcard(_colors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// common
var borderRadius = exports.borderRadius = 4;
var gutter = exports.gutter = 8;
var toastWidth = exports.toastWidth = 360;
var shrink = /*#__PURE__*/exports.shrink = (0, _reactEmotion.keyframes)('from{height:100%;}to{height:0%}');

// a11y helper
var _ref2 = {
  border: 0,
  clip: 'rect(1px, 1px, 1px, 1px)',
  height: 1,
  overflow: 'hidden',
  padding: 0,
  position: 'absolute',
  whiteSpace: 'nowrap',
  width: 1
};
var A11yText = function A11yText(_ref) {
  var Tag = _ref.tag,
      props = _objectWithoutProperties(_ref, ['tag']);

  return _react2.default.createElement(Tag, _extends({
    className: (0, _emotion.css)(_ref2)
  }, props));
};
A11yText.defaultProps = {
  tag: 'span'
};

// default appearances

var appearances = {
  success: {
    icon: _icons.CheckIcon,
    text: colors.G500,
    fg: colors.G300,
    bg: colors.G50
  },
  error: {
    icon: _icons.FlameIcon,
    text: colors.R500,
    fg: colors.R300,
    bg: colors.R50
  },
  warning: {
    icon: _icons.AlertIcon,
    text: colors.Y500,
    fg: colors.Y300,
    bg: colors.Y50
  },
  info: {
    icon: _icons.InfoIcon,
    text: colors.N400,
    fg: colors.B200,
    bg: 'white'
  }
};


var Button = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1rce5zx0'
})({
  cursor: 'pointer',
  flexShrink: 0,
  opacity: 0.5,
  padding: gutter + 'px ' + gutter * 1.5 + 'px',
  transition: 'opacity 150ms',

  ':hover': { opacity: 1 }
});

var Content = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1rce5zx1'
})({
  flexGrow: 1,
  fontSize: 14,
  lineHeight: 1.4,
  minHeight: 40,
  padding: gutter + 'px ' + gutter * 1.5 + 'px'
});

// NOTE: invoke animation when NOT `autoDismiss` with opacity of 0 to avoid a
// paint bug in FireFox.
// https://bugzilla.mozilla.org/show_bug.cgi?id=625289
var Countdown = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1rce5zx2'
})(function (_ref3) {
  var autoDismissTimeout = _ref3.autoDismissTimeout,
      opacity = _ref3.opacity,
      isRunning = _ref3.isRunning;
  return {
    animation: shrink + ' ' + autoDismissTimeout + 'ms linear',
    animationPlayState: isRunning ? 'running' : 'paused',
    backgroundColor: 'rgba(0,0,0,0.1)',
    bottom: 0,
    height: 0,
    left: 0,
    opacity: opacity,
    position: 'absolute',
    width: '100%'
  };
});
var _ref5 = { position: 'relative', zIndex: 1 };
var Icon = function Icon(_ref4) {
  var appearance = _ref4.appearance,
      autoDismiss = _ref4.autoDismiss,
      autoDismissTimeout = _ref4.autoDismissTimeout,
      isRunning = _ref4.isRunning;

  var meta = appearances[appearance];
  var Glyph = meta.icon;

  return _react2.default.createElement(
    'div',
    {
      className: (0, _emotion.css)({
        backgroundColor: meta.fg,
        borderTopLeftRadius: borderRadius,
        borderBottomLeftRadius: borderRadius,
        color: meta.bg,
        flexShrink: 0,
        paddingBottom: gutter,
        paddingTop: gutter,
        position: 'relative',
        overflow: 'hidden',
        textAlign: 'center',
        width: 30
      })
    },
    _react2.default.createElement(Countdown, {
      opacity: autoDismiss ? 1 : 0,
      autoDismissTimeout: autoDismissTimeout,
      isRunning: isRunning
    }),
    _react2.default.createElement(Glyph, {
      className: (0, _emotion.css)(_ref5)
    })
  );
};
function getTranslate(placement) {
  var pos = placement.split('-');
  var relevantPlacement = pos[1] === 'center' ? pos[0] : pos[1];
  var translateMap = {
    right: 'translate3d(120%, 0, 0)',
    left: 'translate3d(-120%, 0, 0)',
    bottom: 'translate3d(0, 120%, 0)',
    top: 'translate3d(0, -120%, 0)'
  };

  return translateMap[relevantPlacement];
}

var toastStates = function toastStates(placement) {
  return {
    entering: { transform: getTranslate(placement) },
    entered: { transform: 'translate3d(0,0,0)' },
    exiting: { transform: getTranslate(placement) },
    exited: { transform: getTranslate(placement) }
  };
};
var ToastElement = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1rce5zx3'
})(function (_ref6) {
  var appearance = _ref6.appearance,
      placement = _ref6.placement,
      transitionDuration = _ref6.transitionDuration,
      transitionState = _ref6.transitionState;

  return _extends({
    backgroundColor: appearances[appearance].bg,
    borderRadius: borderRadius,
    boxShadow: '0 3px 8px rgba(0, 0, 0, 0.175)',
    color: appearances[appearance].text,
    display: 'flex',
    marginBottom: gutter,
    transition: 'transform ' + transitionDuration + 'ms cubic-bezier(0.2, 0, 0, 1)',
    width: toastWidth
  }, toastStates(placement)[transitionState]);
});

// ==============================
// DefaultToast
// ==============================

var DefaultToast = exports.DefaultToast = function DefaultToast(_ref7) {
  var appearance = _ref7.appearance,
      autoDismiss = _ref7.autoDismiss,
      autoDismissTimeout = _ref7.autoDismissTimeout,
      children = _ref7.children,
      isRunning = _ref7.isRunning,
      onDismiss = _ref7.onDismiss,
      pauseOnHover = _ref7.pauseOnHover,
      placement = _ref7.placement,
      transitionDuration = _ref7.transitionDuration,
      transitionState = _ref7.transitionState,
      onMouseEnter = _ref7.onMouseEnter,
      onMouseLeave = _ref7.onMouseLeave;
  return _react2.default.createElement(
    ToastElement,
    {
      appearance: appearance,
      placement: placement,
      transitionState: transitionState,
      transitionDuration: transitionDuration,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    },
    _react2.default.createElement(Icon, {
      appearance: appearance,
      autoDismiss: autoDismiss,
      autoDismissTimeout: autoDismissTimeout,
      isRunning: isRunning
    }),
    _react2.default.createElement(
      Content,
      null,
      children
    ),
    onDismiss ? _react2.default.createElement(
      Button,
      { onClick: onDismiss, role: 'button' },
      _react2.default.createElement(_icons.CloseIcon, null),
      _react2.default.createElement(
        A11yText,
        null,
        'Close'
      )
    ) : null
  );
};